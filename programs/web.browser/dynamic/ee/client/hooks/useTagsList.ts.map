)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/hooks/useTagsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../client/hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../client/hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../client/lib/lists/RecordList';\n\ntype TagsListOptions = {\n\tfilter: string;\n\tdepartment?: string;\n\tviewAll?: boolean;\n};\n\ntype TagListItem = { _id: string; label: string; value: string; _updatedAt: Date };\n\ntype UseTagsListResult = {\n\titemsList: RecordList<TagListItem>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n};\n\nexport const useTagsList = (options: TagsListOptions): UseTagsListResult => {\n\tconst { viewAll, department, filter } = options;\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<TagListItem>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<TagListItem>()), []);\n\n\tconst getTags = useEndpoint('GET', '/v1/livechat/tags');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { tags, total } = await getTags({\n\t\t\t\ttext: filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t\t...(viewAll && { viewAll: 'true' }),\n\t\t\t\t...(department && { department }),\n\t\t\t\tsort: JSON.stringify({ name: 1 }),\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: tags.map<any>((tag: any) => ({\n\t\t\t\t\t_id: tag._id,\n\t\t\t\t\tlabel: tag.name,\n\t\t\t\t\tvalue: tag.name,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getTags, filter, viewAll, department],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["_objectSpread","useEndpoint","useCallback","useState","useScrollableRecordList","useComponentDidUpdate","RecordList","module","link","default","export","useTagsList","options","viewAll","department","filter","itemsList","setItemsList","reload","getTags","fetchData","start","end","tags","total","text","offset","count","sort","JSON","stringify","name","items","map","tag","_id","label","value","itemCount","loadMoreItems","initialItemCount"],"mappings":"2BAAAA,EAA4BC,EAA2BC,EAAAC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAA,CAAAA,EAAAT,EAAAA,CAAA,CAAA,EAAA,GAAvDO,EAAOG,MAAE,CAAA,CAAAC,YAAa,IAAMA,CAAA,GAA2BJ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,QAAAA,CAAAL,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,sDAAAA,CAAAH,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,8CAAAA,CAAAF,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAD,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAsBhD,IAAMK,EAAeC,IAC3B,GAAM,CAAEC,QAAAA,CAAO,CAAEC,WAAAA,CAAU,CAAEC,OAAAA,CAAAA,CAAQ,CAAGH,EAClC,CAACI,EAAWC,EAAa,CAAGd,EAAS,IAAM,IAAIG,GAC/CY,EAAShB,EAAY,IAAMe,EAAa,IAAIX,GAA4B,EAAE,EAE1Ea,EAAUlB,EAAY,MAAO,qBAEnCI,EAAsB,KACrBO,GAAWM,GACZ,EAAG,CAACN,EAASM,EAAO,EAEpB,IAAME,EAAYlB,EACjB,MAAOmB,EAAOC,KACb,GAAM,CAAEC,KAAAA,CAAI,CAAEC,MAAAA,CAAAA,CAAO,CAAG,MAAML,EAAOnB,EAAAA,EAAAA,EAAA,CACpCyB,KAAMV,EACNW,OAAQL,EACRM,MAAOL,EAAMD,CAAK,EACdR,GAAW,CAAEA,QAAS,MAAM,GAC5BC,GAAc,CAAEA,WAAAA,CAAU,GAAE,CAAA,EAAA,CAChCc,KAAMC,KAAKC,SAAS,CAAC,CAAEC,KAAM,CAAC,EAAG,IAGlC,MAAO,CACNC,MAAOT,EAAKU,GAAG,CAAOC,GAAc,CAAA,CACnCC,IAAKD,EAAIC,GAAG,CACZC,MAAOF,EAAIH,IAAI,CACfM,MAAOH,EAAIH,IAAAA,IAEZO,UAAWd,EAEb,EACA,CAACL,EAASJ,EAAQF,EAASC,EAAW,EAGjC,CAAEyB,cAAAA,CAAa,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGpC,EAAwBY,EAAWI,EAAW,IAE1F,MAAO,CACNF,OAAAA,EACAF,UAAAA,EACAuB,cAAAA,EACAC,iBAAAA,EAEF"}