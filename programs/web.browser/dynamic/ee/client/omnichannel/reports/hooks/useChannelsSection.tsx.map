)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/omnichannel/reports/hooks/useChannelsSection.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { capitalize } from '@rocket.chat/string-helpers';\nimport type { TranslationContextValue, TranslationKey } from '@rocket.chat/ui-contexts';\nimport { useEndpoint, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { getPeriodRange } from '../../../components/dashboards/periods';\nimport { usePeriodSelectorStorage } from '../../../components/dashboards/usePeriodSelectorStorage';\nimport { PERIOD_OPTIONS } from '../components/constants';\nimport { formatPeriodDescription } from '../utils/formatPeriodDescription';\nimport { getTop } from '../utils/getTop';\nimport { round } from '../utils/round';\nimport { useDefaultDownload } from './useDefaultDownload';\n\ntype DataItem = { label: string; value: number; id: string; rawLabel: string };\n\nconst TYPE_LABEL: Record<string, TranslationKey> = {\n\t'widget': 'Livechat',\n\t'email-inbox': 'Email',\n\t'twilio': 'SMS',\n\t'api': 'Custom_Integration',\n};\n\nconst formatItem = (item: { label: string; value: number }, total: number, t: TranslationContextValue['translate']): DataItem => {\n\tconst percentage = total > 0 ? round((item.value / total) * 100) : 0;\n\tconst label = `${t(TYPE_LABEL[item.label]) || capitalize(item.label)}`;\n\treturn {\n\t\t...item,\n\t\tlabel: `${label} ${item.value} (${percentage}%)`,\n\t\trawLabel: label,\n\t\tid: item.label,\n\t};\n};\n\nconst formatChartData = (data: { label: string; value: number }[] | undefined = [], total = 0, t: TranslationContextValue['translate']) => {\n\treturn data.map((item) => formatItem(item, total, t));\n};\n\nexport const useChannelsSection = () => {\n\tconst t = useTranslation();\n\tconst [period, periodSelectorProps] = usePeriodSelectorStorage('reports-channels-period', PERIOD_OPTIONS);\n\tconst getConversationsBySource = useEndpoint('GET', '/v1/livechat/analytics/dashboards/conversations-by-source');\n\n\tconst {\n\t\tdata: { data, rawData, total } = { data: [], rawData: [], total: 0 },\n\t\trefetch,\n\t\tisLoading,\n\t\tisError,\n\t\tisSuccess,\n\t} = useQuery(\n\t\t['omnichannel-reports', 'conversations-by-source', period],\n\t\tasync () => {\n\t\t\tconst { start, end } = getPeriodRange(period);\n\t\t\tconst response = await getConversationsBySource({ start: start.toISOString(), end: end.toISOString() });\n\t\t\tconst data = formatChartData(response.data, response.total, t);\n\t\t\tconst displayData: DataItem[] = getTop<DataItem>(5, data, (value) => formatItem({ label: t('Others'), value }, response.total, t));\n\t\t\treturn { ...response, data: displayData, rawData: data };\n\t\t},\n\t\t{\n\t\t\trefetchInterval: 5 * 60 * 1000,\n\t\t},\n\t);\n\n\tconst title = t('Conversations_by_channel');\n\tconst subtitle = t('__count__conversations__period__', {\n\t\tcount: total ?? 0,\n\t\tperiod: formatPeriodDescription(period, t),\n\t});\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Channels_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Channel'), title, data: rawData, period });\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\tid: 'conversations-by-channel',\n\t\t\ttitle,\n\t\t\tsubtitle,\n\t\t\temptyStateSubtitle,\n\t\t\tdata,\n\t\t\ttotal,\n\t\t\tisLoading,\n\t\t\tisError,\n\t\t\tisDataFound: isSuccess && data.length > 0,\n\t\t\tperiodSelectorProps,\n\t\t\tperiod,\n\t\t\tdownloadProps,\n\t\t\tonRetry: refetch,\n\t\t}),\n\t\t[title, subtitle, emptyStateSubtitle, data, total, isLoading, isError, isSuccess, periodSelectorProps, period, downloadProps, refetch],\n\t);\n};\n",null],"names":["_objectSpread","capitalize","useEndpoint","useTranslation","useQuery","useMemo","getPeriodRange","usePeriodSelectorStorage","PERIOD_OPTIONS","formatPeriodDescription","getTop","round","useDefaultDownload","module","link","default","export","useChannelsSection","TYPE_LABEL","formatItem","item","total","t","percentage","value","label","concat","rawLabel","id","formatChartData","data","arguments","length","undefined","map","period","periodSelectorProps","getConversationsBySource","rawData","refetch","isLoading","isError","isSuccess","start","end","response","toISOString","displayData","refetchInterval","title","subtitle","count","emptyStateSubtitle","downloadProps","columnName","isDataFound","onRetry"],"mappings":"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"}