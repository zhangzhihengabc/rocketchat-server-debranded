)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/app/ecdh/Session.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n",null],"names":["SodiumPlus","X25519PublicKey","sodium","module","export","Session","constructor","stringFormatKey","stringFormatEncryptedData","stringFormatRawData","decryptKey","encryptKey","secretKey","publicKey","auto","publicKeyString","toString","publicKeyFromString","text","Buffer","from","encryptToBuffer","plaintext","nonce","randombytes_buf","ciphertext","crypto_secretbox","concat","encrypt","buffer","decryptToBuffer","data","isBuffer","decrypted","crypto_secretbox_open","slice","decrypt"],"mappings":"2BACsCA,EAAMC,EAExCC,EAFJC,EAAOC,MAAE,CAAA,CAAAC,QAAY,IAAAA,CAAA,GAAqCF,EAAAA,IAAAA,CAAAA,cAAAA,CAAAH,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,EAIpD,OAAOI,EAAOC,aAAA,CAAA,IAAA,CAEAC,eAAe,CAAmB,SAAQ,IAAA,CAG1CC,yBAAyB,CAAmB,SAAQ,IAAA,CAGpDC,mBAAmB,CAAmB,SAAQ,IAAA,CAEvDC,UAAU,CAAA,KAAA,EAAA,IAAA,CAEVC,UAAU,CAAA,KAAA,EAAA,IAAA,CAEVC,SAAS,CAAA,KAAA,EAAA,IAAA,CAEZC,SAAS,CAAA,KAAA,CAAA,CAEhB,MAAMX,QAAM,CACX,OAAOA,GAAUF,EAAWc,IAAI,EACjC,CAEA,IAAIC,iBAAe,CAClB,OAAO,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,IAAI,CAACT,eAAe,CACpD,CAEAU,oBAAoBC,CAAY,CAAA,CAC/B,OAAO,IAAIjB,EAAgBkB,OAAOC,IAAI,CAACF,EAAM,IAAI,CAACX,eAAe,EAClE,CAEA,MAAMc,gBAAgBC,CAA0B,CAAA,CAC/C,IAAMpB,EAAS,MAAM,IAAI,CAACA,MAAM,GAC1BqB,EAAQ,MAAMrB,EAAOsB,eAAe,CAAC,IAErCC,EAAa,MAAMvB,EAAOwB,gBAAgB,CAACP,OAAOC,IAAI,CAACE,GAAWN,QAAQ,CAAC,IAAI,CAACP,mBAAmB,EAAGc,EAAO,IAAI,CAACZ,UAAU,EAElI,OAAOQ,OAAOQ,MAAM,CAAC,CAACJ,EAAOE,EAAW,CACzC,CAEA,MAAMG,QAAQN,CAA0B,CAAA,CACvC,IAAMO,EAAS,MAAM,IAAI,CAACR,eAAe,CAACC,GAC1C,OAAOO,EAAOb,QAAQ,CAAC,IAAI,CAACR,yBAAyB,CACtD,CAEA,MAAMsB,gBAAgBC,CAAqB,CAAA,CAC1C,IAAM7B,EAAS,MAAM,IAAI,CAACA,MAAM,GAC1B2B,EAASV,OAAOC,IAAI,CAACD,OAAOa,QAAQ,CAACD,GAAQA,EAAKf,QAAQ,GAAKe,EAAM,IAAI,CAACvB,yBAAyB,EAEnGyB,EAAY,MAAM/B,EAAOgC,qBAAqB,CAACL,EAAOM,KAAK,CAAC,IAAKN,EAAOM,KAAK,CAAC,EAAG,IAAK,IAAI,CAACzB,UAAU,EAE3G,OAAOS,OAAOC,IAAI,CAACa,EAAUjB,QAAQ,GAAI,IAAI,CAACP,mBAAmB,CAClE,CAEA,MAAM2B,QAAQL,CAAqB,CAAA,CAClC,IAAMF,EAAS,MAAM,IAAI,CAACC,eAAe,CAACC,GAC1C,OAAOF,EAAOb,QAAQ,EACvB"}