)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/livechat/client/lib/stream/queueManager.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ILivechatDepartment, ILivechatInquiryRecord, IOmnichannelAgent } from '@rocket.chat/core-typings';\n\nimport { queryClient } from '../../../../../client/lib/queryClient';\nimport { callWithErrorHandling } from '../../../../../client/lib/utils/callWithErrorHandling';\nimport { settings } from '../../../../settings/client';\nimport { sdk } from '../../../../utils/client/lib/SDKClient';\nimport { LivechatInquiry } from '../../collections/LivechatInquiry';\n\nconst departments = new Set();\n\nconst events = {\n\tadded: async (inquiry: ILivechatInquiryRecord) => {\n\t\tif (!departments.has(inquiry.department)) {\n\t\t\treturn;\n\t\t}\n\n\t\tLivechatInquiry.insert({ ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tawait invalidateRoomQueries(inquiry.rid);\n\t},\n\tchanged: async (inquiry: ILivechatInquiryRecord) => {\n\t\tif (inquiry.status !== 'queued' || (inquiry.department && !departments.has(inquiry.department))) {\n\t\t\treturn removeInquiry(inquiry);\n\t\t}\n\n\t\tLivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tawait invalidateRoomQueries(inquiry.rid);\n\t},\n\tremoved: (inquiry: ILivechatInquiryRecord) => removeInquiry(inquiry),\n};\n\nconst invalidateRoomQueries = async (rid: string) => {\n\tawait queryClient.invalidateQueries(['rooms', { reference: rid, type: 'l' }]);\n\tawait queryClient.removeQueries(['rooms', rid]);\n\tawait queryClient.removeQueries(['/v1/rooms.info', rid]);\n};\n\nconst removeInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tawait LivechatInquiry.remove(inquiry._id);\n\treturn queryClient.invalidateQueries(['rooms', { reference: inquiry.rid, type: 'l' }]);\n};\n\nconst getInquiriesFromAPI = async () => {\n\tconst count = settings.get('Livechat_guest_pool_max_number_incoming_livechats_displayed') ?? 0;\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', { count });\n\treturn inquiries;\n};\n\nconst removeListenerOfDepartment = (departmentId: ILivechatDepartment['_id']) => {\n\tsdk.stop('livechat-inquiry-queue-observer', `department/${departmentId}`);\n\tdepartments.delete(departmentId);\n};\n\nconst appendListenerToDepartment = (departmentId: ILivechatDepartment['_id']) => {\n\tdepartments.add(departmentId);\n\tsdk.stream('livechat-inquiry-queue-observer', [`department/${departmentId}`], async (args) => {\n\t\tif (!('type' in args)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { type, ...inquiry } = args;\n\t\tawait events[args.type](inquiry);\n\t});\n\treturn () => removeListenerOfDepartment(departmentId);\n};\nconst addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));\n\nconst getAgentsDepartments = async (userId: IOmnichannelAgent['_id']) => {\n\tconst { departments } = await sdk.rest.get(`/v1/livechat/agents/${userId}/departments`, { enabledDepartmentsOnly: 'true' });\n\treturn departments;\n};\n\nconst removeGlobalListener = () => sdk.stop('livechat-inquiry-queue-observer', 'public');\n\nconst addGlobalListener = () => {\n\tsdk.stream('livechat-inquiry-queue-observer', ['public'], async (args) => {\n\t\tif (!('type' in args)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { type, ...inquiry } = args;\n\t\tawait events[args.type](inquiry);\n\t});\n\treturn removeGlobalListener;\n};\n\nconst subscribe = async (userId: IOmnichannelAgent['_id']) => {\n\tconst config = await callWithErrorHandling('livechat:getRoutingConfig');\n\tif (config?.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tconst agentDepartments = (await getAgentsDepartments(userId)).map((department) => department.departmentId);\n\n\t// Register to all depts + public queue always to match the inquiry list returned by backend\n\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst globalCleanup = addGlobalListener();\n\n\tconst computation = Tracker.autorun(async () => {\n\t\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\n\t\tawait updateInquiries(inquiriesFromAPI);\n\t});\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});\n\t\tremoveGlobalListener();\n\t\tcleanDepartmentListeners?.();\n\t\tglobalCleanup?.();\n\t\tdepartments.clear();\n\t\tcomputation.stop();\n\t};\n};\n\nexport const initializeLivechatInquiryStream = (() => {\n\tlet cleanUp: (() => void) | undefined;\n\n\treturn async (...args: Parameters<typeof subscribe>) => {\n\t\tcleanUp?.();\n\t\tcleanUp = await subscribe(...args);\n\t};\n})();\n",null],"names":["_objectWithoutProperties","_objectSpread","queryClient","callWithErrorHandling","settings","sdk","LivechatInquiry","cleanUp","module","default","export","initializeLivechatInquiryStream","departments","Set","events","added","inquiry","has","department","insert","alert","_updatedAt","Date","invalidateRoomQueries","rid","changed","status","removeInquiry","upsert","_id","removed","invalidateQueries","reference","type","removeQueries","remove","getInquiriesFromAPI","_settings$get","count","get","inquiries","rest","removeListenerOfDepartment","departmentId","stop","concat","delete","appendListenerToDepartment","add","stream","args","_excluded","addListenerForeachDepartment","cleanupFunctions","map","forEach","cleanup","updateInquiries","getAgentsDepartments","userId","enabledDepartmentsOnly","removeGlobalListener","addGlobalListener","_excluded2","subscribe","config","autoAssignAgent","agentDepartments","cleanDepartmentListeners","globalCleanup","computation","Tracker","autorun","inquiriesFromAPI","clear","_cleanUp","arguments"],"mappings":"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"}