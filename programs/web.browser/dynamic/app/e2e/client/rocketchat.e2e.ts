function module(e,t,r){let i,s,a,o,n,l,c,y,d,p,h,g,u,m,w,_,k,v,b,S,K,E,f,A,I,R,P,M,C,B,F,U,q,x,D,j,L,Q,V;let J=["_id"];r.link("@babel/runtime/helpers/objectWithoutProperties",{default(e){i=e}},0),r.link("@babel/runtime/helpers/objectSpread2",{default(e){s=e}},1),r.export({e2e:()=>O}),r.link("querystring",{default(e){a=e}},0),r.link("url",{default(e){o=e}},1),r.link("@rocket.chat/core-typings",{isE2EEMessage(e){n=e}},2),r.link("@rocket.chat/emitter",{Emitter(e){l=e}},3),r.link("ejson",{default(e){c=e}},4),r.link("meteor/meteor",{Meteor(e){y=e}},5),r.link("meteor/reactive-var",{ReactiveVar(e){d=e}},6),r.link("../../../client/lib/banners",{"*"(e){p=e}},7),r.link("../../../client/lib/imperativeModal",{imperativeModal(e){h=e}},8),r.link("../../../client/lib/utils/mapMessageFromApi",{mapMessageFromApi(e){g=e}},9),r.link("../../../client/lib/utils/waitUntilFind",{waitUntilFind(e){u=e}},10),r.link("../../../client/views/e2e/EnterE2EPasswordModal",{default(e){m=e}},11),r.link("../../../client/views/e2e/SaveE2EPasswordModal",{default(e){w=e}},12),r.link("../../../lib/createQuoteAttachment",{createQuoteAttachment(e){_=e}},13),r.link("../../../lib/getMessageUrlRegex",{getMessageUrlRegex(e){k=e}},14),r.link("../../models/client",{ChatRoom(e){v=e},Subscriptions(e){b=e},Messages(e){S=e}},15),r.link("../../settings/client",{settings(e){K=e}},16),r.link("../../utils/client",{getUserAvatarURL(e){E=e}},17),r.link("../../utils/client/lib/SDKClient",{sdk(e){f=e}},18),r.link("../../utils/lib/i18n",{t(e){A=e}},19),r.link("./helper",{toString(e){I=e},toArrayBuffer(e){R=e},joinVectorAndEcryptedData(e){P=e},splitVectorAndEcryptedData(e){M=e},encryptAES(e){C=e},decryptAES(e){B=e},generateRSAKey(e){F=e},exportJWKKey(e){U=e},importRSAKey(e){q=e},importRawKey(e){x=e},deriveKey(e){D=e},generateMnemonicPhrase(e){j=e}},20),r.link("./logger",{log(e){L=e},logError(e){Q=e}},21),r.link("./rocketchat.e2e.room",{E2ERoom(e){V=e}},22),r.link("./events.js");let N=!1,O=new class e extends l{constructor(){super(),this.started=void 0,this.enabled=void 0,this._ready=void 0,this.instancesByRoomId=void 0,this.db_public_key=void 0,this.db_private_key=void 0,this.privateKey=void 0,this.started=!1,this.enabled=new d(!1),this._ready=new d(!1),this.instancesByRoomId={},this.on("ready",async()=>{this._ready.set(!0),this.log("startClient -> Done"),this.log("decryptSubscriptions"),await this.decryptSubscriptions(),this.log("decryptSubscriptions -> Done")})}log(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];L("E2E",...t)}error(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];Q("E2E",...t)}isEnabled(){return this.enabled.get()}isReady(){return this.enabled.get()&&this._ready.get()}async getInstanceByRoomId(e){let t=await u(()=>v.findOne({_id:e}));return("d"===t.t||"p"===t.t)&&(!0===t.encrypted||t.e2eKeyId)?(this.instancesByRoomId[e]||(this.instancesByRoomId[e]=new V(y.userId(),e,t.t)),this.instancesByRoomId[e]):null}removeInstanceByRoomId(e){delete this.instancesByRoomId[e]}async persistKeys(e,t){let{public_key:r,private_key:i}=e;if("string"!=typeof r||"string"!=typeof i)throw Error("Failed to persist keys as they are not strings.");let s=await this.encodePrivateKey(i,t);if(!s)throw Error("Failed to encode private key with provided password.");await f.rest.post("/v1/e2e.setUserPublicAndPrivateKeys",{public_key:r,private_key:s})}async acceptSuggestedKey(e){await f.rest.post("/v1/e2e.acceptSuggestedGroupKey",{rid:e})}async rejectSuggestedKey(e){await f.rest.post("/v1/e2e.rejectSuggestedGroupKey",{rid:e})}getKeysFromLocalStorage(){return{public_key:y._localStorage.getItem("public_key"),private_key:y._localStorage.getItem("private_key")}}async startClient(){if(this.started)return;this.log("startClient -> STARTED"),this.started=!0;let{public_key:e,private_key:t}=this.getKeysFromLocalStorage();if(await this.loadKeysFromDB(),!e&&this.db_public_key&&(e=this.db_public_key),!t&&this.db_private_key)try{t=await this.decodePrivateKey(this.db_private_key)}catch(e){this.started=!1,N=!0,this.openAlert({title:"Wasn't possible to decode your encryption key to be imported.",html:"<div>Your encryption password seems wrong. Click here to try again.</div>",modifiers:["large","danger"],closable:!0,icon:"key",action:async()=>{await this.startClient(),this.closeAlert()}});return}e&&t?await this.loadKeys({public_key:e,private_key:t}):await this.createAndLoadKeys(),this.db_public_key&&this.db_private_key||await this.persistKeys(this.getKeysFromLocalStorage(),await this.createRandomPassword());let r=y._localStorage.getItem("e2e.randomPassword");r&&this.openAlert({title:()=>A("Save_your_encryption_password"),html:()=>A("Click_here_to_view_and_copy_your_password"),modifiers:["large"],closable:!1,icon:"key",action:()=>{h.open({component:w,props:{randomPassword:r,onClose:h.close,onCancel:()=>{this.closeAlert(),h.close()},onConfirm:()=>{y._localStorage.removeItem("e2e.randomPassword"),this.closeAlert(),h.close()}}})}}),this.emit("ready")}async stopClient(){this.log("-> Stop Client"),this.closeAlert(),y._localStorage.removeItem("public_key"),y._localStorage.removeItem("private_key"),this.instancesByRoomId={},this.privateKey=void 0,this.enabled.set(!1),this._ready.set(!1),this.started=!1}async changePassword(e){await this.persistKeys(this.getKeysFromLocalStorage(),e),y._localStorage.getItem("e2e.randomPassword")&&y._localStorage.setItem("e2e.randomPassword",e)}async loadKeysFromDB(){try{let{public_key:e,private_key:t}=await f.rest.get("/v1/e2e.fetchMyKeys");this.db_public_key=e,this.db_private_key=t}catch(e){return this.error("Error fetching RSA keys: ",e)}}async loadKeys(e){let{public_key:t,private_key:r}=e;y._localStorage.setItem("public_key",t);try{this.privateKey=await q(c.parse(r),["decrypt"]),y._localStorage.setItem("private_key",r)}catch(e){return this.error("Error importing private key: ",e)}}async createAndLoadKeys(){let e;try{e=await F(),this.privateKey=e.privateKey}catch(e){return this.error("Error generating key: ",e)}try{let t=await U(e.publicKey);y._localStorage.setItem("public_key",JSON.stringify(t))}catch(e){return this.error("Error exporting public key: ",e)}try{let t=await U(e.privateKey);y._localStorage.setItem("private_key",JSON.stringify(t))}catch(e){return this.error("Error exporting private key: ",e)}await this.requestSubscriptionKeys()}async requestSubscriptionKeys(){await f.call("e2e.requestSubscriptionKeys")}async createRandomPassword(){let e=await j(5);return y._localStorage.setItem("e2e.randomPassword",e),e}async encodePrivateKey(e,t){let r=await this.getMasterKey(t),i=crypto.getRandomValues(new Uint8Array(16));try{let t=await C(i,r,R(e));return c.stringify(P(i,t))}catch(e){return this.error("Error encrypting encodedPrivateKey: ",e)}}async getMasterKey(e){let t;null==e&&alert("You should provide a password");try{t=await x(R(e))}catch(e){return this.error("Error creating a key based on user password: ",e)}try{return await D(R(y.userId()),t)}catch(e){return this.error("Error deriving baseKey: ",e)}}async requestPassword(){return new Promise(e=>{let t=()=>{h.open({component:m,props:{onClose:h.close,onCancel:()=>{N=!1,this.closeAlert(),h.close()},onConfirm:t=>{e(t),this.closeAlert(),h.close()}}})};N?t():(()=>{this.openAlert({title:()=>A("Enter_your_E2E_password"),html:()=>A("Click_here_to_enter_your_encryption_password"),modifiers:["large"],closable:!1,icon:"key",action(){t()}})})()})}async decodePrivateKey(e){let t=await this.requestPassword(),r=await this.getMasterKey(t),[i,s]=M(c.parse(e));try{let e=await B(i,r,s);return I(e)}catch(e){throw Error("E2E -> Error decrypting private key")}}async decryptMessage(e){if(!n(e)||"done"===e.e2e)return e;let t=await this.getInstanceByRoomId(e.rid);if(!t)return e;let r=await t.decrypt(e.msg);if(!r)return e;let i=s(s({},e),{},{msg:r.text,e2e:"done"}),a=await this.parseQuoteAttachment(i);return a}async decryptPendingMessages(){return S.find({t:"e2e",e2e:"pending"}).forEach(async e=>{let{_id:t}=e,r=i(e,J);S.update({_id:t},await this.decryptMessage(r))})}async decryptSubscription(e){let t=await this.getInstanceByRoomId(e);this.log("decryptSubscription ->",e),await (null==t?void 0:t.decryptSubscription())}async decryptSubscriptions(){b.find({encrypted:!0}).forEach(e=>this.decryptSubscription(e._id))}openAlert(e){p.open(s({id:"e2e"},e))}closeAlert(){p.closeById("e2e")}async parseQuoteAttachment(e){let t=e.msg.match(k())||[];return await Promise.all(t.map(async t=>{if(!t.includes(K.get("Site_Url")))return;let r=o.parse(t);if(!r.query)return;let{msg:i}=a.parse(r.query);if(!i||Array.isArray(i))return;let s=await f.rest.get("/v1/chat.getMessage",{msgId:i}),n=null==s?void 0:s.message;if(!n)return;let l=await this.decryptMessage(g(n));e.attachments=e.attachments||[];let c=K.get("UI_Use_Real_Name"),y=_(l,t,c,E(l.u.username||""));e.attachments.push(y)})),e}}}
//# sourceMappingURL=/dynamic/app/e2e/client/db83c0ee4df11a6270f31ab408e2b8752bc75d36.map
