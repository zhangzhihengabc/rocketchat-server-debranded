function module(n,l,t){let e,c,o,s;t.export({code:()=>i}),t.link("@rocket.chat/string-helpers",{unescapeHTML(n){e=n}},0),t.link("../../hljs",{default(n){c=n},register(n){o=n}},1),t.link("./token",{addAsToken(n){s=n}},2);let a=n=>{n.html=n.html.replace(/\`([^`\r\n]+)\`([<_*~]|\B|\b|$)/gm,(l,t,e)=>s(n,'<span class="copyonly">`</span><span><code class="code-colors inline">'.concat(t,'</code></span><span class="copyonly">`</span>').concat(e),"inlinecode",{noHtml:l}))},r=n=>{let l=(n.html.match(/```/gm)||[]).length;if(l){l%2>0&&(n.html="".concat(n.html,"\n```"),n.msg="".concat(n.msg,"\n```"));let t=n.html.split(/(^.*)(```(?:[a-zA-Z]+)?(?:(?:.|\r|\n)*?)```)(.*\n?)$/gm);for(let l=0;l<t.length;l++){let a=t[l],r=a.match(/^```[\r\n]*(.*[\r\n\ ]?)[\r\n]*([\s\S]*?)```+?$/);if(r){let a=-1===r[0].indexOf("\n"),i=!a&&Array.from(c.listLanguages()).includes(r[1].trim())?r[1].trim():"",h=""===i?e(r[1]+r[2]):e(r[2]),m=a?e(r[1]):h,p=(()=>{if(i)try{return o(i),c.highlight(i,m)}catch(n){console.error(n)}return c.highlightAuto(i+m)})(),g=s(n,"<pre><code class='code-colors hljs ".concat(p.language,"'><span class='copyonly'>```<br></span>").concat(p.value,"<span class='copyonly'><br>```</span></code></pre>"),"code",{noHtml:r[0],highlight:!0});t[l]=g}else t[l]=a}n.html=t.join("")}},i=n=>{var l;return null!==(l=n.html)&&void 0!==l&&l.trim()&&(r(n),a(n)),n}}
//# sourceMappingURL=/dynamic/app/markdown/lib/parser/original/612992c41e33d6fcaa4231a16b9a1cac12638b5c.map
