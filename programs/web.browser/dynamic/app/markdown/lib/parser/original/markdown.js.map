)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/markdown/lib/parser/original/markdown.js","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { addAsToken, isToken, validateAllowedTokens } from './token';\n\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nconst endsWithWhitespace = (text) => text.substring(text.length - 1).match(/\\s/);\n\nconst getParseableMarkersCount = (start, end) => {\n\tconst usableMarkers = start.length > 1 ? 2 : 1;\n\treturn end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\n\nconst getTextWrapper = (marker, tagName) => (textPrepend, wrappedText, textAppend) =>\n\t`${textPrepend}<span class=\"copyonly\">${marker}</span><${tagName}>${wrappedText}</${tagName}><span class=\"copyonly\">${marker}</span>${textAppend}`;\n\nconst getRegexReplacer = (replaceFunction, getRegex) => (marker, tagName) => {\n\tconst wrapper = getTextWrapper(marker, tagName);\n\treturn (msg) => msg.replace(getRegex(marker), (...args) => replaceFunction(wrapper, ...args));\n};\n\nconst getParserWithCustomMarker = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3) => {\n\t\tif (endsWithWhitespace(p2)) {\n\t\t\treturn match;\n\t\t}\n\t\tconst finalMarkerCount = getParseableMarkersCount(p1, p3);\n\t\treturn wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n\t},\n\t(marker) => new RegExp(`(\\\\${marker}+(?!\\\\s))([^\\\\${marker}\\\\r\\\\n]+)(\\\\${marker}+)`, 'gm'),\n);\n\nconst parseBold = getParserWithCustomMarker('*', 'strong');\n\nconst parseStrike = getParserWithCustomMarker('~', 'strike');\n\nconst parseItalic = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3, p4, p5) => {\n\t\tif (p1 || p5 || endsWithWhitespace(p3)) {\n\t\t\treturn match;\n\t\t}\n\n\t\tconst finalMarkerCount = getParseableMarkersCount(p2, p4);\n\t\treturn wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n\t},\n\t() => new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm'),\n)('_', 'em');\n\nconst parseNotEscaped = (message, { supportSchemesForLink, headers, rootUrl }) => {\n\tlet msg = message.html;\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\n\tconst schemes = (supportSchemesForLink || '').split(',').join('|');\n\n\tif (headers) {\n\t\t// Support # Text for h1\n\t\tmsg = msg.replace(\n\t\t\t/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h1>$1</h1>',\n\t\t);\n\n\t\t// Support # Text for h2\n\t\tmsg = msg.replace(\n\t\t\t/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h2>$1</h2>',\n\t\t);\n\n\t\t// Support # Text for h3\n\t\tmsg = msg.replace(\n\t\t\t/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h3>$1</h3>',\n\t\t);\n\n\t\t// Support # Text for h4\n\t\tmsg = msg.replace(\n\t\t\t/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h4>$1</h4>',\n\t\t);\n\t}\n\n\t// Support *text* to make bold\n\tmsg = parseBold(msg);\n\n\t// Support _text_ to make italics\n\tmsg = parseItalic(msg);\n\n\t// // Support ~text~ to strike through text\n\tmsg = parseStrike(msg);\n\n\t// Support for block quote\n\t// >>>\n\t// Text\n\t// <<<\n\tmsg = msg.replace(\n\t\t/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>',\n\t);\n\n\t// Support >Text for quote\n\tmsg = msg.replace(\n\t\t/^&gt;(.*)$/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>',\n\t);\n\n\t// Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n\tmsg = msg.replace(\n\t\t/\\s*<blockquote class=\"background-transparent-darker-before\">/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\">',\n\t);\n\tmsg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>');\n\n\t// Remove new-line between blockquotes.\n\tmsg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote');\n\n\t// Support ![alt text](http://image url)\n\tmsg = msg.replace(new RegExp(`!\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${url}\" href=\"${url}\" title=\"${title}\" target=\"${target}\" rel=\"noopener noreferrer\"><div class=\"inline-image\" style=\"background-image: url(${url});\"></div></a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support [Text](http://link)\n\tmsg = msg.replace(new RegExp(`\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\ttitle = title.replace(/&amp;/g, '&');\n\n\t\tconst escapedUrl = encodeURI(url);\n\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${escapedUrl}\" href=\"${escapedUrl}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support <http://link|Text>\n\tmsg = msg.replace(new RegExp(`(?:<|&lt;)((?:${schemes}):\\\\\\/\\\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)`, 'gm'), (match, url, title) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(message, `<a data-title=\"${url}\" href=\"${url}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`, 'link');\n\t});\n\treturn msg;\n};\n\nexport const markdown = (message, options) => {\n\tmessage.html = parseNotEscaped(message, options);\n\treturn message;\n};\n",null],"names":["addAsToken","isToken","validateAllowedTokens","module","export","markdown","link","v","validateUrl","url","message","_message$tokens","tokens","some","token","includes","test","trim","URL","e","endsWithWhitespace","text","substring","length","match","getParseableMarkersCount","start","end","usableMarkers","getTextWrapper","marker","tagName","textPrepend","wrappedText","textAppend","concat","getRegexReplacer","replaceFunction","getRegex","wrapper","msg","replace","_len","arguments","args","Array","_key","getParserWithCustomMarker","p1","p2","p3","finalMarkerCount","RegExp","parseBold","parseStrike","parseItalic","p4","p5","parseNotEscaped","_ref","supportSchemesForLink","headers","rootUrl","html","schemes","split","join","title","encodeURI","target","indexOf","escapedUrl","options"],"mappings":"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"}