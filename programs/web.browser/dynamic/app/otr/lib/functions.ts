function module(e,t,r){r.export({joinEncryptedData:()=>a,encryptAES:()=>y,digest:()=>i,deriveBits:()=>c,importKey:()=>p,importKeyRaw:()=>s,exportKey:()=>o,generateKeyPair:()=>l,decryptAES:()=>d});let{subtle:n}=global.crypto,a=e=>{let{encryptedData:t,iv:r}=e,n=new Uint8Array(t),a=new Uint8Array(r.length+n.length);return a.set(r,0),a.set(n,r.length),a},y=async e=>{let{iv:t,_sessionKey:r,data:a}=e;return n.encrypt({name:"AES-GCM",iv:t},r,a)},i=async e=>n.digest({name:"SHA-256"},e),c=async e=>{let{ecdhObj:t,_keyPair:r}=e;if(!r.privateKey)throw Error("No private key");return n.deriveBits(t,r.privateKey,256)},p=async e=>n.importKey("jwk",e,{name:"ECDH",namedCurve:"P-256"},!1,[]),s=async e=>n.importKey("raw",e,{name:"AES-GCM"},!1,["encrypt","decrypt"]),o=async e=>n.exportKey("jwk",e),l=async()=>n.generateKey({name:"ECDH",namedCurve:"P-256"},!1,["deriveKey","deriveBits"]),d=async(e,t)=>{let r=e.slice(0,12);e=e.slice(12);let a=await n.decrypt({name:"AES-GCM",iv:r},t,e);return a}}
//# sourceMappingURL=/dynamic/app/otr/lib/2311344f8f0b7359e90597dece9029b837f06928.map
