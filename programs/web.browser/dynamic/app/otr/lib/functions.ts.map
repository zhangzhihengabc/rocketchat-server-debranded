)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/otr/lib/functions.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IOTRAlgorithm } from './IOTR';\n\nconst { subtle } = global.crypto;\n\nexport const joinEncryptedData = ({ encryptedData, iv }: { encryptedData: ArrayBuffer; iv: Uint8Array }): Uint8Array => {\n\tconst cipherText = new Uint8Array(encryptedData);\n\tconst output = new Uint8Array(iv.length + cipherText.length);\n\toutput.set(iv, 0);\n\toutput.set(cipherText, iv.length);\n\treturn output;\n};\nexport const encryptAES = async ({\n\tiv,\n\t_sessionKey,\n\tdata,\n}: {\n\tiv: Uint8Array;\n\t_sessionKey: CryptoKey;\n\tdata: Uint8Array;\n}): Promise<ArrayBuffer> =>\n\tsubtle.encrypt(\n\t\t{\n\t\t\tname: 'AES-GCM',\n\t\t\tiv,\n\t\t},\n\t\t_sessionKey,\n\t\tdata,\n\t);\nexport const digest = async (bits: ArrayBuffer): Promise<ArrayBuffer> =>\n\tsubtle.digest(\n\t\t{\n\t\t\tname: 'SHA-256',\n\t\t},\n\t\tbits,\n\t);\nexport const deriveBits = async ({ ecdhObj, _keyPair }: { ecdhObj: IOTRAlgorithm; _keyPair: CryptoKeyPair }): Promise<ArrayBuffer> => {\n\tif (!_keyPair.privateKey) {\n\t\tthrow new Error('No private key');\n\t}\n\n\treturn subtle.deriveBits(ecdhObj, _keyPair.privateKey, 256);\n};\n\nexport const importKey = async (publicKeyObject: JsonWebKey): Promise<CryptoKey> =>\n\tsubtle.importKey(\n\t\t'jwk',\n\t\tpublicKeyObject,\n\t\t{\n\t\t\tname: 'ECDH',\n\t\t\tnamedCurve: 'P-256',\n\t\t},\n\t\tfalse,\n\t\t[],\n\t);\nexport const importKeyRaw = async (sessionKeyData: Uint8Array): Promise<CryptoKey> =>\n\tsubtle.importKey(\n\t\t'raw',\n\t\tsessionKeyData,\n\t\t{\n\t\t\tname: 'AES-GCM',\n\t\t},\n\t\tfalse,\n\t\t['encrypt', 'decrypt'],\n\t);\nexport const exportKey = async (_keyPair: CryptoKey): Promise<JsonWebKey> => subtle.exportKey('jwk', _keyPair);\nexport const generateKeyPair = async (): Promise<CryptoKeyPair> =>\n\tsubtle.generateKey(\n\t\t{\n\t\t\tname: 'ECDH',\n\t\t\tnamedCurve: 'P-256',\n\t\t},\n\t\tfalse,\n\t\t['deriveKey', 'deriveBits'],\n\t);\nexport const decryptAES = async (cipherText: Uint8Array, _sessionKey: CryptoKey): Promise<ArrayBuffer> => {\n\tconst iv = cipherText.slice(0, 12);\n\tcipherText = cipherText.slice(12);\n\tconst data = await subtle.decrypt(\n\t\t{\n\t\t\tname: 'AES-GCM',\n\t\t\tiv,\n\t\t},\n\t\t_sessionKey,\n\t\tcipherText,\n\t);\n\treturn data;\n};\n",null],"names":["module","export","joinEncryptedData","encryptAES","digest","deriveBits","importKey","importKeyRaw","exportKey","generateKeyPair","decryptAES","subtle","global","crypto","_ref","encryptedData","iv","cipherText","Uint8Array","output","length","set","_ref2","_sessionKey","data","encrypt","name","bits","_ref3","ecdhObj","_keyPair","privateKey","Error","publicKeyObject","namedCurve","sessionKeyData","generateKey","slice","decrypt"],"mappings":"uBAEAA,EAAMC,MAAE,CAAM,CAAAC,kBAAmB,IAAAA,EAAAC,WAAAA,IAAAA,EAAAC,OAAAA,IAAAA,EAAAC,WAAAA,IAAAA,EAAAC,UAAAA,IAAAA,EAAAC,aAAAA,IAAAA,EAAAC,UAAAA,IAAAA,EAAAC,gBAAAA,IAAAA,EAAAC,WAAAA,IAAAA,CAAA,GAAjC,GAAM,CAAEC,OAAAA,CAAAA,CAAQ,CAAGC,OAAOC,MAAM,CAEnBX,EAAoBY,IAAsF,GAArF,CAAEC,cAAAA,CAAa,CAAEC,GAAAA,CAAAA,CAAoD,CAAAF,EAChGG,EAAa,IAAIC,WAAWH,GAC5BI,EAAS,IAAID,WAAWF,EAAGI,MAAM,CAAGH,EAAWG,MAAM,EAG3D,OAFAD,EAAOE,GAAG,CAACL,EAAI,GACfG,EAAOE,GAAG,CAACJ,EAAYD,EAAGI,MAAM,EACzBD,CACR,EACahB,EAAa,MAAAmB,IAAA,GAAO,CAChCN,GAAAA,CAAE,CACFO,YAAAA,CAAW,CACXC,KAAAA,CAAAA,CAKA,CAAAF,EAAA,OACAX,EAAOc,OAAO,CACb,CACCC,KAAM,UACNV,GAAAA,GAEDO,EACAC,EACA,EACWpB,EAAS,MAAOuB,GAC5BhB,EAAOP,MAAM,CACZ,CACCsB,KAAM,WAEPC,GAEWtB,EAAa,MAAAuB,IAA2G,GAApG,CAAEC,QAAAA,CAAO,CAAEC,SAAAA,CAAAA,CAA+D,CAAAF,EAC1G,GAAI,CAACE,EAASC,UAAU,CACvB,MAAM,AAAIC,MAAM,kBAGjB,OAAOrB,EAAON,UAAU,CAACwB,EAASC,EAASC,UAAU,CAAE,IACxD,EAEazB,EAAY,MAAO2B,GAC/BtB,EAAOL,SAAS,CACf,MACA2B,EACA,CACCP,KAAM,OACNQ,WAAY,SAEb,CAAA,EACA,EAAE,EAES3B,EAAe,MAAO4B,GAClCxB,EAAOL,SAAS,CACf,MACA6B,EACA,CACCT,KAAM,WAEP,CAAA,EACA,CAAC,UAAW,UAAU,EAEXlB,EAAY,MAAOsB,GAA6CnB,EAAOH,SAAS,CAAC,MAAOsB,GACxFrB,EAAkB,SAC9BE,EAAOyB,WAAW,CACjB,CACCV,KAAM,OACNQ,WAAY,SAEb,CAAA,EACA,CAAC,YAAa,aAAa,EAEhBxB,EAAa,MAAOO,EAAwBM,KACxD,IAAMP,EAAKC,EAAWoB,KAAK,CAAC,EAAG,IAC/BpB,EAAaA,EAAWoB,KAAK,CAAC,IAC9B,IAAMb,EAAO,MAAMb,EAAO2B,OAAO,CAChC,CACCZ,KAAM,UACNV,GAAAA,GAEDO,EACAN,GAED,OAAOO,CACR"}