)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/otr/client/OTRRoom.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, IMessage, IUser } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport EJSON from 'ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport GenericModal from '../../../client/components/GenericModal';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport { Presence } from '../../../client/lib/presence';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { getUidDirectMessage } from '../../../client/lib/utils/getUidDirectMessage';\nimport { goToRoomById } from '../../../client/lib/utils/goToRoomById';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport type { IOnUserStreamData, IOTRAlgorithm, IOTRDecrypt, IOTRRoom } from '../lib/IOTR';\nimport { OtrRoomState } from '../lib/OtrRoomState';\nimport { otrSystemMessages } from '../lib/constants';\nimport {\n\tdecryptAES,\n\tderiveBits,\n\tdigest,\n\tencryptAES,\n\texportKey,\n\tgenerateKeyPair,\n\timportKey,\n\timportKeyRaw,\n\tjoinEncryptedData,\n} from '../lib/functions';\n\nexport class OTRRoom implements IOTRRoom {\n\tprivate _userId: string;\n\n\tprivate _roomId: string;\n\n\tprivate _keyPair: CryptoKeyPair | null;\n\n\tprivate _exportedPublicKey: JsonWebKey;\n\n\tprivate _sessionKey: CryptoKey | null;\n\n\tprivate _userOnlineComputation: Tracker.Computation;\n\n\tprivate peerId: string;\n\n\tprivate state: ReactiveVar<OtrRoomState> = new ReactiveVar(OtrRoomState.NOT_STARTED);\n\n\tprivate isFirstOTR: boolean;\n\n\tprotected constructor(uid: IUser['_id'], rid: IRoom['_id'], peerId: IUser['_id']) {\n\t\tthis._userId = uid;\n\t\tthis._roomId = rid;\n\t\tthis._keyPair = null;\n\t\tthis._sessionKey = null;\n\t\tthis.peerId = peerId;\n\t\tthis.isFirstOTR = true;\n\t}\n\n\tpublic static create(uid: IUser['_id'], rid: IRoom['_id']): OTRRoom | undefined {\n\t\tconst peerId = getUidDirectMessage(rid);\n\n\t\tif (!peerId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new OTRRoom(uid, rid, peerId);\n\t}\n\n\tgetPeerId(): string {\n\t\treturn this.peerId;\n\t}\n\n\tgetState(): OtrRoomState {\n\t\treturn this.state.get();\n\t}\n\n\tsetState(nextState: OtrRoomState): void {\n\t\tif (this.getState() === nextState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.set(nextState);\n\t}\n\n\tasync handshake(refresh?: boolean): Promise<void> {\n\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\n\t\tawait this.generateKeyPair();\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'handshake',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t\trefresh,\n\t\t\t},\n\t\t]);\n\n\t\tif (refresh) {\n\t\t\tconst user = Meteor.user();\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait sdk.call('sendSystemMessages', this._roomId, user.username, otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH);\n\t\t\tthis.isFirstOTR = false;\n\t\t}\n\t}\n\n\tacknowledge(): void {\n\t\tvoid sdk.rest.post('/v1/statistics.telemetry', { params: [{ eventName: 'otrStats', timestamp: Date.now(), rid: this._roomId }] });\n\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'acknowledge',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t},\n\t\t]);\n\t}\n\n\tdeny(): void {\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.DECLINED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'deny',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\tend(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'end',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\treset(): void {\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t}\n\n\tasync generateKeyPair(): Promise<void> {\n\t\tif (this._userOnlineComputation) {\n\t\t\tthis._userOnlineComputation.stop();\n\t\t}\n\n\t\tthis._userOnlineComputation = Tracker.autorun(() => {\n\t\t\tconst $room = document.querySelector(`#chat-window-${this._roomId}`);\n\t\t\tconst $title = $room?.querySelector('.rc-header__title');\n\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\tif ($room && $title && !$title.querySelector('.otr-icon')) {\n\t\t\t\t\t$title.prepend(\"<i class='otr-icon icon-key'></i>\");\n\t\t\t\t}\n\t\t\t} else if ($title) {\n\t\t\t\t$title.querySelector('.otr-icon')?.remove();\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\t// Generate an ephemeral key pair.\n\t\t\tthis._keyPair = await generateKeyPair();\n\n\t\t\tif (!this._keyPair.publicKey) {\n\t\t\t\tthrow new Error('Public key is not generated');\n\t\t\t}\n\n\t\t\tthis._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n\n\t\t\t// Once we have generated new keys, it's safe to delete old messages\n\t\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync importPublicKey(publicKey: string): Promise<void> {\n\t\ttry {\n\t\t\tif (!this._keyPair) throw new Error('No key pair');\n\t\t\tconst publicKeyObject: JsonWebKey = EJSON.parse(publicKey);\n\t\t\tconst peerPublicKey = await importKey(publicKeyObject);\n\t\t\tconst ecdhObj: IOTRAlgorithm = {\n\t\t\t\tname: 'ECDH',\n\t\t\t\tnamedCurve: 'P-256',\n\t\t\t\tpublic: peerPublicKey,\n\t\t\t};\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst hashedBits = await digest(bits);\n\t\t\t// We truncate the hash to 128 bits.\n\t\t\tconst sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n\t\t\t// Session key available.\n\t\t\tthis._sessionKey = await importKeyRaw(sessionKeyData);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync encryptText(data: string | Uint8Array): Promise<string> {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available');\n\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\n\t\t\treturn EJSON.stringify(output);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync encrypt(message: Pick<IMessage, '_id' | 'msg'>): Promise<string> {\n\t\ttry {\n\t\t\tconst data = new TextEncoder().encode(\n\t\t\t\tEJSON.stringify({\n\t\t\t\t\t_id: message._id,\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t\tuserId: this._userId,\n\t\t\t\t\tack: Random.id((Random.fraction() + 1) * 20),\n\t\t\t\t\tts: new Date(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync decrypt(message: string): Promise<IOTRDecrypt | string> {\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available.');\n\n\t\t\tconst cipherText: Uint8Array = EJSON.parse(message);\n\t\t\tconst data = await decryptAES(cipherText, this._sessionKey);\n\t\t\tconst msgDecoded: IOTRDecrypt = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n\t\t\tif (msgDecoded && typeof msgDecoded === 'object') {\n\t\t\t\treturn msgDecoded;\n\t\t\t}\n\t\t\treturn message;\n\t\t} catch (e) {\n\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\treturn message;\n\t\t}\n\t}\n\n\tasync onUserStream(type: string, data: IOnUserStreamData): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase 'handshake':\n\t\t\t\tlet timeout: NodeJS.Timeout;\n\n\t\t\t\tconst establishConnection = async (): Promise<void> => {\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\t\tawait this.generateKeyPair();\n\t\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\t\t\t\t\t\tawait goToRoomById(data.roomId);\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\t\t\t\t\t\t\tthis.acknowledge();\n\n\t\t\t\t\t\t\tif (data.refresh) {\n\t\t\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\t\t\ttype: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t\t\tthrow new Meteor.Error('establish-connection-error', 'Establish connection error.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst closeOrCancelModal = (): void => {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tthis.deny();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(data.userId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* \tWe have to check if there's an in progress handshake request because\n\t\t\t\t\t\t\tNotifications.notifyUser will sometimes dispatch 2 events */\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.REQUESTED) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState(OtrRoomState.REQUESTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n\t\t\t\t\t\t\t\t\tusername: obj.username,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tconfirmText: t('Yes'),\n\t\t\t\t\t\t\t\tcancelText: t('No'),\n\t\t\t\t\t\t\t\tonClose: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonCancel: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonConfirm: async (): Promise<void> => {\n\t\t\t\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.TIMEOUT);\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'acknowledge':\n\t\t\t\ttry {\n\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\n\t\t\t\t\tif (this.isFirstOTR) {\n\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\ttype: otrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.isFirstOTR = false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'deny':\n\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHING) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.setState(OtrRoomState.DECLINED);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(this.peerId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_ended_the_OTR_session', { username: obj.username }),\n\t\t\t\t\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n",null],"names":["Random","EJSON","Meteor","ReactiveVar","Tracker","GenericModal","imperativeModal","Presence","dispatchToastMessage","getUidDirectMessage","goToRoomById","sdk","t","OtrRoomState","otrSystemMessages","decryptAES","deriveBits","digest","encryptAES","exportKey","generateKeyPair","importKey","importKeyRaw","joinEncryptedData","module","export","OTRRoom","default","constructor","uid","rid","peerId","_userId","_roomId","_keyPair","_exportedPublicKey","_sessionKey","_userOnlineComputation","state","NOT_STARTED","isFirstOTR","create","getPeerId","getState","get","setState","nextState","set","handshake","refresh","ESTABLISHING","publish","concat","roomId","userId","publicKey","stringify","user","call","username","USER_REQUESTED_OTR_KEY_REFRESH","acknowledge","rest","post","params","eventName","timestamp","Date","now","deny","reset","DECLINED","end","stop","autorun","$room","document","querySelector","$title","ESTABLISHED","prepend","_$title$querySelector","remove","Error","e","ERROR","importPublicKey","publicKeyObject","parse","peerPublicKey","bits","ecdhObj","name","namedCurve","public","hashedBits","sessionKeyData","Uint8Array","slice","encryptText","data","TextEncoder","encode","text","ack","id","fraction","iv","crypto","getRandomValues","encryptedData","output","encrypt","message","_id","msg","ts","enc","decrypt","cipherText","msgDecoded","TextDecoder","decode","type","onUserStream","timeout","establishConnection","clearTimeout","setTimeout","USER_KEY_REFRESHED_SUCCESSFULLY","closeOrCancelModal","close","obj","REQUESTED","open","component","props","variant","title","children","confirmText","cancelText","onClose","onCancel","onConfirm","TIMEOUT","USER_JOINED_OTR"],"mappings":"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"}