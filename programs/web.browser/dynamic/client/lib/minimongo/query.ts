function module(e,r,t){let n,o,l,i,s,u,a;t.export({compileDocumentSelector:()=>j}),t.link("./bson",{compareBSONValues(e){n=e},getBSONType(e){o=e}},0),t.link("./comparisons",{equals(e){l=e},flatSome(e){i=e},isObject(e){s=e},some(e){u=e}},1),t.link("./lookups",{createLookupFunction(e){a=e}},2);let c=e=>e.every(e=>["number","string","symbol"].includes(typeof e)),y=(e,r)=>{let t=null;if(c(e))for(let r of(t={},e))t[r]=r;return r=>u(r,r=>"string"==typeof r&&null!==t?!!t[r]:e.some(e=>l(e,r)))},$=(e,r)=>e=>!0,p={$in:y,$nin:(e,r)=>{let t=y(e,void 0);return e=>void 0===e||!t(e)},$all:(e,r)=>r=>!!Array.isArray(r)&&e.every(e=>r.some(r=>l(e,r))),$lt:(e,r)=>r=>i(r,r=>0>n(r,e)),$lte:(e,r)=>r=>i(r,r=>0>=n(r,e)),$gt:(e,r)=>r=>i(r,r=>n(r,e)>0),$gte:(e,r)=>r=>i(r,r=>n(r,e)>=0),$ne:(e,r)=>r=>!u(r,r=>l(r,e)),$exists:(e,r)=>r=>e===(void 0!==r),$mod:(e,r)=>{let[t,n]=e;return e=>i(e,e=>Number(e)%t===n)},$size:(e,r)=>r=>Array.isArray(r)&&e===r.length,$type:(e,r)=>r=>void 0!==r&&i(r,r=>o(r)===e),$regex:(e,r)=>{let t;if(void 0!==r){let n=e instanceof RegExp?e.source:e;t=new RegExp(n,r)}else e instanceof RegExp||(t=new RegExp(e));return e=>void 0!==e&&i(e,e=>t.test(String(e)))},$elemMatch:(e,r)=>{let t=j(e);return e=>!!Array.isArray(e)&&e.some(e=>t(e))},$not:(e,r)=>{let t=R(e);return e=>!t(e)},$options:$,$near:$,$geoIntersects:$},m=e=>{let r=e.map(j);return e=>r.every(r=>r(e))},f=e=>{let r=e.map(j);return e=>r.some(r=>r(e))},g=e=>{let r=e.map(j);return e=>r.every(r=>!r(e))},v=e=>{let r=e instanceof Function?e:Function("return ".concat(e));return e=>!!r.call(e)},d={$and:m,$or:f,$nor:g,$where:v},A=e=>e in p,b=e=>e in d,x=e=>Object.keys(e).every(e=>"$"===e.slice(0,1)),k=()=>e=>i(e,e=>null==e),O=e=>r=>i(r,r=>r===e),S=e=>r=>void 0!==r&&i(r,r=>e.test(String(r))),h=e=>r=>!!Array.isArray(r)&&u(r,r=>l(e,r)),E=e=>{let r=[];for(let t of Object.keys(e)){if(!A(t))continue;let n=e[t],o=p[t];r.push(o(n,e.$options))}return e=>r.every(r=>r(e))},R=e=>null==e?k():s(e)?e instanceof RegExp?S(e):Array.isArray(e)?h(e):x(e)?E(e):r=>i(r,r=>l(e,r)):O(e),j=e=>{let r=Object.entries(e).map(e=>{let[r,t]=e;if(void 0===t)return()=>!0;if(b(r))switch(r){case"$and":return m(t);case"$or":return f(t);case"$nor":return g(t);case"$where":return v(t)}let n=a(r),o=R(t);return e=>{let r=n(e);return r.some(o)}});return e=>r.every(r=>r(e))}}
//# sourceMappingURL=/dynamic/client/lib/minimongo/128a18ac87cebcb00c91eddc0e58027fad2dbb0f.map
