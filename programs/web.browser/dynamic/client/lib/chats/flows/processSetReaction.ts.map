)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/chats/flows/processSetReaction.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\n\nimport { emoji } from '../../../../app/emoji/client';\nimport { callWithErrorHandling } from '../../utils/callWithErrorHandling';\nimport type { ChatAPI } from '../ChatAPI';\n\nexport const processSetReaction = async (chat: ChatAPI, { msg }: Pick<IMessage, 'msg'>): Promise<boolean> => {\n\tconst match = msg.trim().match(/^\\+(:.*?:)$/m);\n\tif (!match) {\n\t\treturn false;\n\t}\n\n\tconst [, reaction] = match;\n\tif (!emoji.list[reaction]) {\n\t\treturn false;\n\t}\n\n\tconst lastMessage = await chat.data.findLastMessage();\n\n\tif (!lastMessage) {\n\t\treturn false;\n\t}\n\n\tawait callWithErrorHandling('setReaction', reaction, lastMessage._id);\n\treturn true;\n};\n",null],"names":["emoji","callWithErrorHandling","module","export","processSetReaction","chat","_ref","msg","match","trim","reaction","list","lastMessage","data","findLastMessage","_id"],"mappings":"2BAEqDA,EAAAC,EAArDC,EAAOC,MAAE,CAAK,CAAAC,mBAAQ,IAAAA,CAA+B,GAAAF,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAF,MAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,oCAAAA,CAAAD,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAI9C,IAAMG,EAAqB,MAAOC,EAAaC,KAAsD,GAApD,CAAEC,IAAAA,CAAAA,CAA4B,CAAAD,EAC/EE,EAAQD,EAAIE,IAAI,GAAGD,KAAK,CAAC,gBAC/B,GAAI,CAACA,EACJ,MAAO,CAAA,EAGR,GAAM,EAAGE,EAAS,CAAGF,EACrB,GAAI,CAACR,EAAMW,IAAI,CAACD,EAAS,CACxB,MAAO,CAAA,EAGR,IAAME,EAAc,MAAMP,EAAKQ,IAAI,CAACC,eAAe,SAEnD,EAAKF,IAIL,MAAMX,EAAsB,cAAeS,EAAUE,EAAYG,GAAG,EAC7D,CAAA,EACR"}