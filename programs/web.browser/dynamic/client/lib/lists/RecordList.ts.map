)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/RecordList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { Emitter } from '@rocket.chat/emitter';\n\nimport { AsyncStatePhase } from '../asyncState';\n\nexport type RecordListBatchChanges<T> = {\n\titems?: T[];\n\titemCount?: number;\n};\n\nexport class RecordList<T extends { _id: string; _updatedAt?: Date }> extends Emitter {\n\t#hasChanges = false;\n\n\t#index = new Map<T['_id'], T>();\n\n\t#phase: AsyncStatePhase.LOADING | AsyncStatePhase.UPDATING | AsyncStatePhase.RESOLVED = AsyncStatePhase.LOADING;\n\n\t#items: T[] | undefined = undefined;\n\n\t#itemCount: number | undefined = undefined;\n\n\tprotected filter(_item: T): boolean {\n\t\treturn true;\n\t}\n\n\tprotected compare(a: T, b: T): number {\n\t\tconst aUpdatedAt = typeof a._updatedAt === 'string' ? new Date(a._updatedAt) : a._updatedAt;\n\t\tconst bUpdatedAt = typeof b._updatedAt === 'string' ? new Date(b._updatedAt) : b._updatedAt;\n\t\treturn (bUpdatedAt?.getTime() ?? -1) - (aUpdatedAt?.getTime() ?? -1);\n\t}\n\n\tpublic get phase(): AsyncStatePhase {\n\t\treturn this.#phase;\n\t}\n\n\tpublic get items(): T[] {\n\t\tif (!this.#items) {\n\t\t\tthis.#items = Array.from(this.#index.values()).sort(this.compare);\n\t\t}\n\n\t\treturn this.#items;\n\t}\n\n\tpublic get itemCount(): number {\n\t\treturn this.#itemCount ?? this.#index.size;\n\t}\n\n\tprivate insert(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/inserted`, item);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount++;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate update(item: T): void {\n\t\tthis.#index.set(item._id, item);\n\t\tthis.emit(`${item._id}/updated`, item);\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate delete(_id: T['_id']): void {\n\t\tthis.#index.delete(_id);\n\t\tthis.emit(`${_id}/deleted`);\n\t\tif (typeof this.#itemCount === 'number') {\n\t\t\tthis.#itemCount--;\n\t\t}\n\t\tthis.#hasChanges = true;\n\t}\n\n\tprivate push(item: T): void {\n\t\tconst exists = this.#index.has(item._id);\n\t\tconst valid = this.filter(item);\n\n\t\tif (exists && !valid) {\n\t\t\tthis.delete(item._id);\n\t\t\treturn;\n\t\t}\n\n\t\tif (exists && valid) {\n\t\t\tthis.update(item);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!exists && valid) {\n\t\t\tthis.insert(item);\n\t\t}\n\t}\n\n\t#pedingMutation: Promise<void> = Promise.resolve();\n\n\tprotected async mutate(mutation: () => void | Promise<void>): Promise<void> {\n\t\ttry {\n\t\t\tif (this.#phase === AsyncStatePhase.RESOLVED) {\n\t\t\t\tthis.#phase = AsyncStatePhase.UPDATING;\n\t\t\t\tthis.emit('mutating');\n\t\t\t}\n\n\t\t\tthis.#pedingMutation = this.#pedingMutation.then(mutation);\n\t\t\tawait this.#pedingMutation;\n\t\t} catch (error) {\n\t\t\tthis.emit('errored', error);\n\t\t} finally {\n\t\t\tconst hasChanged = this.#hasChanges;\n\t\t\tthis.#phase = AsyncStatePhase.RESOLVED;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis.#items = undefined;\n\t\t\t\tthis.#hasChanges = false;\n\t\t\t}\n\t\t\tthis.emit('mutated', hasChanged);\n\t\t}\n\t}\n\n\tpublic batchHandle(getInfo: () => Promise<RecordListBatchChanges<T>>): Promise<void> {\n\t\treturn this.mutate(async () => {\n\t\t\tconst info = await getInfo();\n\n\t\t\tif (info.items) {\n\t\t\t\tfor (const item of info.items) {\n\t\t\t\t\tthis.push(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (info.itemCount) {\n\t\t\t\tthis.#itemCount = info.itemCount;\n\t\t\t\tthis.#hasChanges = true;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic prune(matchCriteria: (item: T) => boolean): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tfor (const item of this.#index.values()) {\n\t\t\t\tif (matchCriteria(item)) {\n\t\t\t\t\tthis.delete(item._id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic handle(item: T): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tthis.push(item);\n\t\t});\n\t}\n\n\tpublic remove(_id: T['_id']): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (!this.#index.has(_id)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.delete(_id);\n\t\t});\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn this.mutate(() => {\n\t\t\tif (this.#index.size === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#index.clear();\n\t\t\tthis.#items = undefined;\n\t\t\tthis.#itemCount = undefined;\n\t\t\tthis.#hasChanges = true;\n\t\t\tthis.emit('cleared');\n\t\t});\n\t}\n}\n",null],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","Emitter","AsyncStatePhase","module","default","export","RecordList","_hasChanges","_index","_phase","_items","_itemCount","_pedingMutation","constructor","arguments","Object","defineProperty","writable","value","Map","LOADING","undefined","Promise","resolve","filter","_item","compare","a","b","_bUpdatedAt$getTime","_aUpdatedAt$getTime","aUpdatedAt","_updatedAt","Date","bUpdatedAt","getTime","phase","items","Array","from","values","sort","itemCount","_classPrivateFieldLoo","size","insert","item","set","_id","emit","concat","update","delete","push","exists","has","valid","mutate","mutation","RESOLVED","UPDATING","then","error","hasChanged","batchHandle","getInfo","info","prune","matchCriteria","handle","remove","clear"],"mappings":"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"}