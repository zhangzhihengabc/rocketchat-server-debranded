)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/ThreadsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: 'all';\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n",null],"names":["escapeRegExp","MessageList","module","export","ThreadsList","isThreadMessageInRoom","message","rid","tcount","isThreadFollowedByUser","threadMessage","uid","_threadMessage$replie","_threadMessage$replie2","replies","includes","isThreadUnread","tunread","Boolean","_id","isThreadTextMatching","regex","test","msg","constructor","_options","options","updateFilters","clear","filter","type","text","RegExp","compare","a","b","_b$tlm","_a$tlm","tlm","ts","getTime"],"mappings":"2BAC6BA,EAA8BC,EAA3DC,EAAOC,MAAE,CAAA,CAAAC,YAAc,IAAMA,CAAA,GAA8BF,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAF,aAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,gBAAAA,CAAAD,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAuB3D,IAAMI,EAAwB,CAACC,EAAmBC,IACjDD,EAAQC,GAAG,GAAKA,GAAO,AAA6C,UAA7C,OAAQD,EAA0BE,MAAM,CAE1DC,EAAyB,CAACC,EAA8BC,KAAiB,IAAAC,EAAAC,EAAA,OAAA,AAAkD,OAAlDD,CAAAA,EAAA,AAAmC,OAAnCC,CAAAA,EAAcH,EAAcI,OAAO,AAAPA,GAAOD,AAAA,KAAA,IAAAA,EAAA,KAAA,EAArBA,EAAuBE,QAAQ,CAACJ,EAAG,GAACC,AAAA,KAAA,IAAAA,GAAAA,CAAS,EAEpII,EAAiB,CAACN,EAA8BO,IACrDC,CAAAA,CAAQD,CAAAA,MAAAA,EAAO,KAAA,EAAPA,EAASF,QAAQ,CAACL,EAAcS,GAAG,CAAA,EAEtCC,EAAuB,CAACV,EAA8BW,IAA2BA,EAAMC,IAAI,CAACZ,EAAca,GAAG,CAE7G,OAAOnB,UAAoBH,EAChCuB,YAA2BC,CAA4B,CAAA,CACtD,KAAK,GAAG,IAAA,CADkBA,QAAAA,CAAAA,KAAAA,EAAA,IAAA,CAAAA,QAAQ,CAARA,CAE3B,CAEA,IAAWC,SAAO,CACjB,OAAO,IAAI,CAACD,QAAQ,AACrB,CAEOE,cAAcD,CAA2B,CAAA,CAC/C,IAAI,CAACD,QAAQ,CAAGC,EAChB,IAAI,CAACE,KAAK,EACX,CAEUC,OAAOvB,CAAiB,CAAA,CACjC,GAAM,CAAEC,IAAAA,CAAAA,CAAK,CAAG,IAAI,CAACkB,QAAQ,CAE7B,GAAI,CAACpB,EAAsBC,EAASC,GACnC,MAAO,CAAA,EAGR,GAAI,AAAuB,cAAvB,IAAI,CAACkB,QAAQ,CAACK,IAAI,CAAkB,CACvC,GAAM,CAAEnB,IAAAA,CAAAA,CAAK,CAAG,IAAI,CAACc,QAAQ,CAC7B,GAAI,CAAChB,EAAuBH,EAASK,GACpC,MAAO,CAAA,EAIT,GAAI,AAAuB,WAAvB,IAAI,CAACc,QAAQ,CAACK,IAAI,CAAe,CACpC,GAAM,CAAEb,QAAAA,CAAAA,CAAS,CAAG,IAAI,CAACQ,QAAQ,CACjC,GAAI,CAACT,EAAeV,EAASW,GAC5B,MAAO,CAAA,EAIT,GAAI,IAAI,CAACQ,QAAQ,CAACM,IAAI,CAAE,CACvB,IAAMV,EAAQ,AAAIW,OAAOhC,EAAa,IAAI,CAACyB,QAAQ,CAACM,IAAI,EAAG,KAC3D,GAAI,CAACX,EAAqBd,EAASe,GAClC,MAAO,CAAA,EAIT,MAAO,CAAA,CACR,CAEUY,QAAQC,CAAW,CAAEC,CAAW,CAAA,CAAA,IAAAC,EAAAC,EACzC,MAAO,CAAA,AAAM,OAAND,CAAAA,EAACD,EAAEG,GAAG,AAAHA,GAAGF,AAAA,KAAA,IAAAA,EAAAA,EAAID,EAAEI,EAAE,AAAFA,EAAIC,OAAO,GAAK,CAAA,AAAM,OAANH,CAAAA,EAACH,EAAEI,GAAG,AAAHA,GAAGD,AAAA,KAAA,IAAAA,EAAAA,EAAIH,EAAEK,EAAE,AAAFA,EAAIC,OAAO,EAC3D"}