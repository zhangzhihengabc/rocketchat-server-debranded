function module(e,t,i){let a,n,r,d,l,o,s;let c=["type","id"],u=["ldap","lastLogin","services"],p=["email","cloud","resume","email2fa","emailCode"];i.link("@babel/runtime/helpers/objectWithoutProperties",{default(e){a=e}},0),i.link("@babel/runtime/helpers/objectSpread2",{default(e){n=e}},1),i.export({isSyncReady:()=>m,synchronizeUserData:()=>v,removeLocalUserData:()=>f}),i.link("meteor/reactive-var",{ReactiveVar(e){r=e}},0),i.link("../../app/models/client",{Users(e){d=e}},1),i.link("../../app/notifications/client",{Notifications(e){l=e}},2),i.link("../../app/utils/client/lib/SDKClient",{sdk(e){o=e}},3);let m=new r(!1),w=e=>{let t=d.findOne({_id:e._id});if(!(null!=t&&t._updatedAt)||t._updatedAt.getTime()<e._updatedAt.getTime()){d.upsert({_id:e._id},e);return}Object.keys(t).forEach(t=>{delete e[t]}),d.update({_id:t._id},{$set:n({},e)})},v=async e=>{var t;if(!e)return;d.remove({_id:{$ne:e}}),null===(t=s)||void 0===t||t();let i=l.onUser("userData",t=>{switch(t.type){case"inserted":let{type:i,id:n}=t,r=a(t,c);d.insert(r);break;case"updated":d.upsert({_id:e},{$set:t.diff,$unset:t.unset});break;case"removed":d.remove({_id:e})}});s=i.stop,await i.ready();let r=await o.rest.get("/v1/me"),{ldap:v,lastLogin:f,services:A}=r,h=a(r,u);if(h){let e=A||{},{email:t,cloud:i,resume:r,email2fa:d,emailCode:l}=e,o=a(e,p);w(n(n(n(n({},h),A&&{services:n(n(n(n(n(n({},o?n({},o):{}),r?{resume:n({},r.loginTokens&&{loginTokens:r.loginTokens.map(e=>n(n({},e),{},{when:new Date("when"in e?e.when:""),createdAt:"createdAt"in e?new Date(e.createdAt):void 0,twoFactorAuthorizedUntil:e.twoFactorAuthorizedUntil?new Date(e.twoFactorAuthorizedUntil):void 0}))})}:{}),i?{cloud:n(n({},i),{},{expiresAt:new Date(i.expiresAt)})}:{}),l?n(n({},l),{},{expire:new Date(l.expire)}):{}),d?{email2fa:n(n({},d),{},{changedAt:new Date(d.changedAt)})}:{}),(null==t?void 0:t.verificationTokens)&&{email:{verificationTokens:t.verificationTokens.map(e=>n(n({},e),{},{when:new Date(e.when)}))}})}),f&&{lastLogin:new Date(f)}),{},{ldap:!!v,createdAt:new Date(h.createdAt),_updatedAt:new Date(h._updatedAt)}))}return m.set(!0),h},f=()=>d.remove({})}
//# sourceMappingURL=/dynamic/client/lib/8e5e448f7f3abb1f0a48ee0ef8595ce1e24f6f34.map
