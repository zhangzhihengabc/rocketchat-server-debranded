)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/banners.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { UiKit } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport type { Keys as IconName } from '@rocket.chat/icons';\n\nexport type LegacyBannerPayload = {\n\tid: string;\n\tclosable?: boolean;\n\ttitle?: string | (() => string);\n\ttext?: string | (() => string);\n\thtml?: string | (() => string);\n\ticon?: IconName;\n\tmodifiers?: ('large' | 'danger')[];\n\ttimer?: number;\n\taction?: () => Promise<void> | void;\n\tonClose?: () => Promise<void> | void;\n};\n\ntype BannerPayload = LegacyBannerPayload | UiKit.BannerView;\n\nexport const isLegacyPayload = (payload: BannerPayload): payload is LegacyBannerPayload => !('blocks' in payload);\n\nconst queue: BannerPayload[] = [];\nconst emitter = new Emitter<{\n\t'update': undefined;\n\t'update-first': undefined;\n}>();\n\nexport const firstSubscription = [\n\t(callback: () => void): (() => void) => emitter.on('update-first', callback),\n\t(): BannerPayload | null => queue[0] ?? null,\n] as const;\n\nexport const open = (payload: BannerPayload): void => {\n\tlet index = queue.findIndex((_payload) => {\n\t\tif (isLegacyPayload(_payload) && isLegacyPayload(payload)) {\n\t\t\treturn _payload.id === payload.id;\n\t\t}\n\n\t\tif (!isLegacyPayload(_payload) && !isLegacyPayload(payload)) {\n\t\t\treturn _payload.viewId === payload.viewId;\n\t\t}\n\n\t\treturn false;\n\t});\n\n\tif (index === -1) {\n\t\tindex = queue.length;\n\t}\n\n\tqueue[index] = payload;\n\n\temitter.emit('update');\n\n\tif (index === 0) {\n\t\temitter.emit('update-first');\n\t}\n};\n\nexport const closeById = (id: string): void => {\n\tconst index = queue.findIndex((banner) => {\n\t\tif (!isLegacyPayload(banner)) {\n\t\t\treturn banner.viewId === id;\n\t\t}\n\t\treturn banner.id === id;\n\t});\n\n\tif (index < 0) {\n\t\treturn;\n\t}\n\n\tqueue.splice(index, 1);\n\temitter.emit('update');\n\tindex === 0 && emitter.emit('update-first');\n};\n\nexport const close = (): void => {\n\tqueue.shift();\n\temitter.emit('update');\n\temitter.emit('update-first');\n};\n\nexport const clear = (): void => {\n\tqueue.splice(0, queue.length);\n\temitter.emit('update');\n\temitter.emit('update-first');\n};\n",null],"names":["Emitter","module","export","isLegacyPayload","firstSubscription","open","closeById","close","clear","payload","queue","emitter","callback","on","_queue$","index","findIndex","_payload","id","viewId","length","emit","banner","splice","shift"],"mappings":"2BAC+CA,EAA/CC,EAAOC,MAAE,CAAA,CAAAC,gBAAe,IAAAA,EAAuBC,kBAAAA,IAAAA,EAAAC,KAAAA,IAAAA,EAAAC,UAAAA,IAAAA,EAAAC,MAAAA,IAAAA,EAAAC,MAAAA,IAAAA,CAAA,GAAAP,EAAAA,IAAAA,CAAAA,uBAAAA,CAAAD,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAkBxC,IAAMG,EAAmBM,GAA2D,CAAE,CAAA,WAAYA,CAAAA,EAEnGC,EAAyB,EAAE,CAC3BC,EAAU,IAAIX,EAKPI,EAAoB,CAC/BQ,GAAuCD,EAAQE,EAAE,CAAC,eAAgBD,GACnE,KAAA,IAAAE,EAAA,OAAA,AAAoC,OAApCA,CAAAA,EAA4BJ,CAAK,CAAC,EAAE,AAAD,GAACI,AAAA,KAAA,IAAAA,EAAAA,EAAI,IAAI,EACnC,CAEGT,EAAQI,IACpB,IAAIM,EAAQL,EAAMM,SAAS,CAAEC,GAC5B,AAAId,EAAgBc,IAAad,EAAgBM,GACzCQ,EAASC,EAAE,GAAKT,EAAQS,EAAE,EAG9B,CAAA,AAACf,EAAgBc,IAAcd,EAAgBM,EAAO,GAClDQ,EAASE,MAAM,GAAKV,EAAQU,MAAM,CAM7B,CAAA,KAAVJ,GACHA,CAAAA,EAAQL,EAAMU,MAAM,AAANA,EAGfV,CAAK,CAACK,EAAM,CAAGN,EAEfE,EAAQU,IAAI,CAAC,UAEC,IAAVN,GACHJ,EAAQU,IAAI,CAAC,eAEf,EAEaf,EAAaY,IACzB,IAAMH,EAAQL,EAAMM,SAAS,CAAEM,GAC9B,AAAKnB,EAAgBmB,GAGdA,EAAOJ,EAAE,GAAKA,EAFbI,EAAOH,MAAM,GAAKD,GAKvBH,EAAQ,IAIZL,EAAMa,MAAM,CAACR,EAAO,GACpBJ,EAAQU,IAAI,CAAC,UACbN,AAAU,IAAVA,GAAeJ,EAAQU,IAAI,CAAC,gBAC7B,EAEad,EAAQ,KACpBG,EAAMc,KAAK,GACXb,EAAQU,IAAI,CAAC,UACbV,EAAQU,IAAI,CAAC,eACd,EAEab,EAAQ,KACpBE,EAAMa,MAAM,CAAC,EAAGb,EAAMU,MAAM,EAC5BT,EAAQU,IAAI,CAAC,UACbV,EAAQU,IAAI,CAAC,eACd"}