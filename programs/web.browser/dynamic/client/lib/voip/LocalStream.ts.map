)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/voip/LocalStream.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["/**\n * This class is used for local stream manipulation.\n * @remarks\n * This class does not really store any local stream for the reason\n * that the local stream tracks are stored in the peer connection.\n *\n * This simply provides necessary methods for stream manipulation.\n *\n * Currently it does not use any of its base functionality. Nevertheless\n * there might be a need that we may want to do some stream operations\n * such as closing of tracks, in future. For that purpose, it is written\n * this way.\n *\n */\n\nimport type { Session } from 'sip.js';\nimport type { MediaStreamFactory, SessionDescriptionHandler } from 'sip.js/lib/platform/web';\nimport { defaultMediaStreamFactory } from 'sip.js/lib/platform/web';\n\nimport Stream from './Stream';\n\nexport default class LocalStream extends Stream {\n\tstatic async requestNewStream(constraints: MediaStreamConstraints, session: Session): Promise<MediaStream | undefined> {\n\t\tconst factory: MediaStreamFactory = defaultMediaStreamFactory();\n\t\tif (session?.sessionDescriptionHandler) {\n\t\t\treturn factory(constraints, session.sessionDescriptionHandler as SessionDescriptionHandler);\n\t\t}\n\t}\n\n\tstatic async replaceTrack(peerConnection: RTCPeerConnection, newStream: MediaStream, mediaType?: 'audio' | 'video'): Promise<boolean> {\n\t\tconst senders = peerConnection.getSenders();\n\t\tif (!senders) {\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * This will be called when media device change happens.\n\t\t * This needs to be called externally when the device change occurs.\n\t\t * This function first acquires the new stream based on device selection\n\t\t * and then replaces the track in the sender of existing stream by track acquired\n\t\t * by caputuring new stream.\n\t\t *\n\t\t * Notes:\n\t\t * Each sender represents a track in the RTCPeerConnection.\n\t\t * Peer connection will contain single track for\n\t\t * each, audio, video and data.\n\t\t * Furthermore, We are assuming that\n\t\t * newly captured stream will have a single track for each media type. i.e\n\t\t * audio video and data. But this assumption may not be true atleast in theory. One may see multiple\n\t\t * audio track in the captured stream or multiple senders for same kind in the peer connection\n\t\t * If/When such situation arrives in future, we may need to revisit the track replacement logic.\n\t\t * */\n\n\t\tswitch (mediaType) {\n\t\t\tcase 'audio': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getAudioTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No audio tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'audio') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tcase 'video': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No video tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'video') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < newTracks.length; j++) {\n\t\t\t\t\t\tif (senders[i].track?.kind === newTracks[j].kind) {\n\t\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[j]);\n\t\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t}\n\t}\n}\n",null],"names":["defaultMediaStreamFactory","Stream","module","default","LocalStream","requestNewStream","constraints","session","factory","sessionDescriptionHandler","replaceTrack","peerConnection","newStream","mediaType","_senders$i$track","_senders$i$track2","_senders$i$track3","senders","getSenders","replaced","newTracks","getAudioTracks","console","warn","i","length","track","kind","getVideoTracks","j"],"mappings":"2BAAAA,EAAAC,EAAAC,EAAAA,MAAAA,CAAAA,CAAAC,QAAAA,IAAAA,CAAA,GAAAD,EAAAA,IAAAA,CAAAA,0BAAAA,CAAAF,0BAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,WAAAA,CAAAC,QAAAA,CAAAA,EAAAF,EAAAA,CAAA,CAAA,EAAA,EAqBc,OAAOG,UAAoBH,EACxC,aAAaI,iBAAiBC,CAAmC,CAAEC,CAAgB,CAAA,CAClF,IAAMC,EAA8BR,IACpC,GAAIO,MAAAA,GAAAA,EAASE,yBAAyB,CACrC,OAAOD,EAAQF,EAAaC,EAAQE,yBAAsD,CAE5F,CAEA,aAAaC,aAAaC,CAAiC,CAAEC,CAAsB,CAAEC,CAA6B,CAAA,KA+BrEC,EAgBAC,EAiBEC,EA/D9C,IAAMC,EAAUN,EAAeO,UAAU,GACzC,GAAI,CAACD,EACJ,MAAO,CAAA,EAoBR,OAAQJ,GACP,IAAK,QAAS,CACb,IAAIM,EAAW,CAAA,EACTC,EAAYR,EAAUS,cAAc,GAC1C,GAAI,CAACD,EAEJ,OADAE,QAAQC,IAAI,CAAC,6DACN,CAAA,EAER,IAAK,IAAIC,EAAI,EAAGA,EAAIP,CAAAA,MAAAA,EAAO,KAAA,EAAPA,EAASQ,MAAM,AAANA,EAAQD,IACpC,GAAI,CAAA,AAAgB,OAAhBV,CAAAA,EAAAG,CAAO,CAACO,EAAE,CAACE,KAAK,AAALA,GAAKZ,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAhBA,EAAkBa,IAAI,AAAJA,IAAS,QAAS,CACvCV,CAAO,CAACO,EAAE,CAACd,YAAY,CAACU,CAAS,CAAC,EAAE,EACpCD,EAAW,CAAA,EACX,MAGF,OAAOA,EAER,IAAK,QAAS,CACb,IAAIA,EAAW,CAAA,EACTC,EAAYR,EAAUgB,cAAc,GAC1C,GAAI,CAACR,EAEJ,OADAE,QAAQC,IAAI,CAAC,6DACN,CAAA,EAER,IAAK,IAAIC,EAAI,EAAGA,EAAIP,CAAAA,MAAAA,EAAO,KAAA,EAAPA,EAASQ,MAAM,AAANA,EAAQD,IACpC,GAAI,CAAA,AAAgB,OAAhBT,CAAAA,EAAAE,CAAO,CAACO,EAAE,CAACE,KAAK,AAALA,GAAKX,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAhBA,EAAkBY,IAAI,AAAJA,IAAS,QAAS,CACvCV,CAAO,CAACO,EAAE,CAACd,YAAY,CAACU,CAAS,CAAC,EAAE,EACpCD,EAAW,CAAA,EACX,MAGF,OAAOA,EAER,QAAS,CACR,IAAIA,EAAW,CAAA,EACTC,EAAYR,EAAUgB,cAAc,GAC1C,GAAI,CAACR,EAEJ,OADAE,QAAQC,IAAI,CAAC,uDACN,CAAA,EAER,IAAK,IAAIC,EAAI,EAAGA,EAAIP,CAAAA,MAAAA,EAAO,KAAA,EAAPA,EAASQ,MAAM,AAANA,EAAQD,IACpC,IAAK,IAAIK,EAAI,EAAGA,EAAIT,EAAUK,MAAM,CAAEI,IACrC,GAAI,CAAA,AAAgB,OAAhBb,CAAAA,EAAAC,CAAO,CAACO,EAAE,CAACE,KAAK,AAALA,GAAKV,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAhBA,EAAkBW,IAAI,AAAJA,IAASP,CAAS,CAACS,EAAE,CAACF,IAAI,CAAE,CACjDV,CAAO,CAACO,EAAE,CAACd,YAAY,CAACU,CAAS,CAACS,EAAE,EACpCV,EAAW,CAAA,EACX,MAIH,OAAOA,EACP,CAEH"}