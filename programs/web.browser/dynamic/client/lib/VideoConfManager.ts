function module(e,i,t){let l,n,o,c,a,r,s,d;let h=["timeout","acceptTimeout"];t.link("@babel/runtime/helpers/objectSpread2",{default(e){l=e}},0),t.link("@babel/runtime/helpers/objectWithoutProperties",{default(e){n=e}},1),t.export({VideoConfManager:()=>u}),t.link("@rocket.chat/emitter",{Emitter(e){o=e}},0),t.link("meteor/meteor",{Meteor(e){c=e}},1),t.link("meteor/tracker",{Tracker(e){a=e}},2),t.link("../../app/notifications/client",{Notifications(e){r=e}},3),t.link("../../app/utils/client/lib/SDKClient",{sdk(e){s=e}},4),t.link("./utils/getConfig",{getConfig(e){d=e}},5);let g=!!(d("debug")||d("debug-VideoConf")),u=new class e extends o{get preferences(){return this._preferences}get capabilities(){return this._capabilities}constructor(){super(),this.userId=void 0,this.currentCallHandler=void 0,this.currentCallData=void 0,this.startingNewCall=!1,this.hooks=[],this.incomingDirectCalls=void 0,this.dismissedCalls=void 0,this._preferences=void 0,this._capabilities=void 0,this.incomingDirectCalls=new Map,this.dismissedCalls=new Set,this._preferences={mic:!0,cam:!1},this._capabilities={}}isBusy(){return!!this.startingNewCall||this.isCalling()}isRinging(){return[...this.incomingDirectCalls.values()].some(e=>{let{callId:i}=e;return!this.isCallDismissed(i)})}isCalling(){return!!this.currentCallHandler||!!this.currentCallData&&!this.currentCallData.joined}getIncomingDirectCalls(){return[...this.incomingDirectCalls.values()].filter(e=>!e.acceptTimeout).map(e=>{let{timeout:i,acceptTimeout:t}=e,o=n(e,h);return l(l({},o),{},{dismissed:this.isCallDismissed(o.callId)})})}async startCall(e,i){if(!this.userId||this.isBusy())throw Error("Video manager is busy.");g&&console.log("[VideoConf] Starting new call on room ".concat(e)),this.startingNewCall=!0,this.emit("calling/changed");let{data:t}=await s.rest.post("/v1/video-conference.start",{roomId:e,title:i,allowRinging:!0}).catch(i=>{var t,l;return g&&console.error("[VideoConf] Failed to start new call on room ".concat(e)),this.startingNewCall=!1,this.emit("calling/changed"),this.emit("start/error",{error:(null==i?void 0:null===(t=i.xhr)||void 0===t?void 0:null===(l=t.responseJSON)||void 0===l?void 0:l.error)||"unknown-error"}),Promise.reject(i)});switch(this.startingNewCall=!1,this.emit("calling/changed"),"direct"!==t.type&&this.emit("calling/ended"),t.type){case"direct":return this.callUser({uid:t.calleeId,rid:e,callId:t.callId});case"videoconference":case"livechat":return this.joinCall(t.callId)}}acceptIncomingCall(e){let i=this.incomingDirectCalls.get(e);if(!i)throw Error("Unable to find accepted call information.");if(i.acceptTimeout){g&&console.log("[VideoConf] We're already trying to accept call ".concat(e,"."));return}g&&console.log("[VideoConf] Accepting incoming call ".concat(e,".")),i.timeout&&(clearTimeout(i.timeout),this.setIncomingCallAttribute(e,"timeout",void 0)),this.dismissIncomingCall(e),this.setIncomingCallAttribute(e,"acceptTimeout",setTimeout(()=>{let t=this.incomingDirectCalls.get(e);null!=t&&t.acceptTimeout&&(g&&console.log("[VideoConf] Attempt to accept call has timed out."),this.removeIncomingCall(e),this.emit("direct/failed",{callId:e,uid:i.uid,rid:i.rid}))},5e3)),this.emit("incoming/changed"),g&&console.log("[VideoConf] Notifying user ".concat(i.uid," that we accept their call.")),this.userId&&this.notifyUser(i.uid,"accepted",{callId:e,uid:this.userId,rid:i.rid})}rejectIncomingCall(e){this.dismissIncomingCall(e);let i=this.incomingDirectCalls.get(e);i&&(this.userId&&this.notifyUser(i.uid,"rejected",{callId:e,uid:this.userId,rid:i.rid}),this.loseIncomingCall(e))}dismissedIncomingCalls(){[...this.incomingDirectCalls.keys()].some(e=>this.dismissedIncomingCallHelper(e))&&(this.emit("ringing/changed"),this.emit("incoming/changed"))}async loadCapabilities(){let{capabilities:e}=await s.rest.get("/v1/video-conference.capabilities").catch(e=>(g&&console.error("[VideoConf] Failed to load video conference capabilities"),Promise.reject(e)));this._capabilities=e||{},this.emit("capabilities/changed")}setIncomingCallAttribute(e,i,t){let n=this.incomingDirectCalls.get(e);if(!n){g&&console.error('[VideoConf] Cannot change attribute "'.concat(i,'" of unknown call "').concat(e,'".'));return}let o=l({},n);void 0===t?delete o[i]:o[i]=t,g&&console.log('[VideoConf] Updating attribute "'.concat(i,'" of call "').concat(e,'".')),this.incomingDirectCalls.set(e,o)}dismissedIncomingCallHelper(e){return!this.isCallDismissed(e)&&(g&&console.log("[VideoConf] Dismissing call ".concat(e)),this.dismissedCalls.add(e),setTimeout(()=>this.dismissedCalls.delete(e),2e5),this.incomingDirectCalls.has(e))}dismissIncomingCall(e){return!!this.dismissedIncomingCallHelper(e)&&(this.emit("ringing/changed"),this.emit("incoming/changed"),!0)}updateUser(){let e=c.userId();if(this.userId===e){g&&console.log("[VideoConf] Logged user has not changed, so we're not changing the hooks.");return}g&&console.log("[VideoConf] Logged user has changed."),this.userId&&this.disconnect(),e&&this.connectUser(e)}changePreference(e,i){this._preferences[e]=i,this.emit("preference/changed",{key:e,value:i})}setPreferences(e){for(let i in e)e.hasOwnProperty(i)&&this.changePreference(i,e[i])}async joinCall(e){if(g&&console.log("[VideoConf] Joining call ".concat(e,".")),this.incomingDirectCalls.has(e)){let i=this.incomingDirectCalls.get(e);null!=i&&i.acceptTimeout&&(g&&console.log("[VideoConf] Clearing acceptance timeout"),clearTimeout(i.acceptTimeout)),this.removeIncomingCall(e)}let i={callId:e,state:l(l({},void 0!==this._preferences.mic?{mic:this._preferences.mic}:{}),void 0!==this._preferences.cam?{cam:this._preferences.cam}:{})},{url:t,providerName:n}=await s.rest.post("/v1/video-conference.join",i).catch(i=>{var t,l;return g&&console.error("[VideoConf] Failed to join call ".concat(e)),this.emit("join/error",{error:(null==i?void 0:null===(t=i.xhr)||void 0===t?void 0:null===(l=t.responseJSON)||void 0===l?void 0:l.error)||"unknown-error"}),Promise.reject(i)});if(!t)throw Error("Failed to get video conference URL.");g&&console.log("[VideoConf] Opening ".concat(t,".")),this.emit("call/join",{url:t,callId:e,providerName:n})}abortCall(){this.currentCallData&&this.giveUp(this.currentCallData)}rejectIncomingCallsFromUser(e){for(let[,{callId:i,uid:t}]of this.incomingDirectCalls)e===t&&(g&&console.log("[VideoConf] Rejecting old incoming call from user ".concat(e)),this.rejectIncomingCall(i))}async callUser(e){let{uid:i,rid:t,callId:l}=e;if(this.currentCallHandler||this.currentCallData)throw Error("Video Conference State Error.");let n=1;this.currentCallData={callId:l,rid:t,uid:i},this.currentCallHandler=setInterval(()=>{if(!this.currentCallHandler){g&&console.warn("[VideoConf] Ringing interval was not properly cleared.");return}if(++n>10){this.giveUp({uid:i,rid:t,callId:l});return}g&&console.log("[VideoConf] Ringing user ".concat(i,", attempt number ").concat(n,".")),this.userId&&this.notifyUser(i,"call",{uid:this.userId,rid:t,callId:l})},3e3),this.emit("calling/changed"),g&&console.log("[VideoConf] Ringing user ".concat(i," for the first time.")),this.userId&&this.notifyUser(i,"call",{uid:this.userId,rid:t,callId:l})}async giveUp(e){var i;let{uid:t,rid:l,callId:n}=e,o=null===(i=this.currentCallData)||void 0===i?void 0:i.joined;g&&console.log("[VideoConf] Stop ringing user ".concat(t,".")),this.currentCallHandler&&(clearInterval(this.currentCallHandler),this.currentCallHandler=void 0,this.currentCallData=void 0,this.emit("calling/changed")),g&&console.log("[VideoConf] Notifying user ".concat(t," that we are no longer calling.")),this.userId&&this.notifyUser(t,"canceled",{uid:this.userId,rid:l,callId:n}),this.emit("direct/cancel",{uid:t,rid:l,callId:n}),this.emit("direct/stopped",{uid:t,rid:l,callId:n}),o||s.rest.post("/v1/video-conference.cancel",{callId:n})}disconnect(){for(let e of(g&&console.log("[VideoConf] disconnecting user ".concat(this.userId)),this.hooks))e();this.hooks=[],this.currentCallHandler&&(clearInterval(this.currentCallHandler),this.currentCallHandler=void 0),this.incomingDirectCalls.forEach(e=>{e.timeout&&clearTimeout(e.timeout),e.acceptTimeout&&clearTimeout(e.acceptTimeout)}),this.incomingDirectCalls.clear(),this.dismissedCalls.clear(),this.currentCallData=void 0,this._preferences={},this.emit("incoming/changed"),this.emit("ringing/changed"),this.emit("calling/changed")}async onVideoConfNotification(e){let{action:i,params:t}=e;if(!i||"string"!=typeof i){g&&console.error("[VideoConf] Invalid action received.");return}if(!t||"object"!=typeof t||!t.callId||!t.uid||!t.rid){g&&console.error("[VideoConf] Invalid params received.");return}switch(i){case"call":return this.onDirectCall(t);case"canceled":return this.onDirectCallCanceled(t);case"accepted":return this.onDirectCallAccepted(t);case"rejected":return this.onDirectCallRejected(t);case"confirmed":return this.onDirectCallConfirmed(t);case"join":return this.onDirectCallJoined(t);case"end":return this.onDirectCallEnded(t)}}async notifyUser(e,i,t){return r.notifyUser(e,"video-conference",{action:i,params:t})}async connectUser(e){g&&console.log("[VideoConf] connecting user ".concat(e)),this.userId=e;let{stop:i,ready:t}=r.onUser("video-conference",e=>this.onVideoConfNotification(e));await t(),this.hooks.push(i)}abortIncomingCall(e){var i;null!==(i=this.incomingDirectCalls.get(e))&&void 0!==i&&i.acceptTimeout||(g&&console.log("[VideoConf] Canceling call ".concat(e," due to ringing timeout.")),this.loseIncomingCall(e))}loseIncomingCall(e){let i=this.incomingDirectCalls.get(e);if(!i){g&&console.warn("[VideoConf] Unable to cancel ".concat(e," because we have no information about it."));return}this.removeIncomingCall(e),g&&console.log("[VideoConf] Call ".concat(e," from ").concat(i.uid," was lost.")),this.emit("direct/lost",{callId:e,uid:i.uid,rid:i.rid})}removeIncomingCall(e){if(g&&console.log('[VideoConf] Removing call with id "'.concat(e,'" from Incoming Calls list.')),!this.incomingDirectCalls.has(e))return;let i=this.isRinging(),t=this.incomingDirectCalls.get(e);null!=t&&t.timeout&&clearTimeout(t.timeout),this.incomingDirectCalls.delete(e),this.emit("incoming/changed"),i!==this.isRinging()&&this.emit("ringing/changed")}createAbortTimeout(e){return setTimeout(()=>this.abortIncomingCall(e),1e4)}startNewIncomingCall(e){let{callId:i,uid:t,rid:l}=e;if(this.isCallDismissed(i)){g&&console.log("[VideoConf] Ignoring dismissed call.");return}this.rejectIncomingCallsFromUser(t),g&&console.log("[VideoConf] Storing this new call information."),this.incomingDirectCalls.set(i,{callId:i,uid:t,rid:l,timeout:this.createAbortTimeout(i)}),this.emit("incoming/changed"),this.emit("ringing/changed"),this.emit("direct/ringing",{callId:i,uid:t,rid:l})}refreshExistingIncomingCall(e){let{callId:i,uid:t,rid:l}=e,n=this.incomingDirectCalls.get(i);if(!n)throw Error("Video Conference Manager State Error");g&&console.log("[VideoConf] Resetting call timeout."),n.timeout&&clearTimeout(n.timeout),n.timeout=this.createAbortTimeout(i),this.isCallDismissed(i)||this.emit("direct/ringing",{callId:i,uid:t,rid:l})}onDirectCall(e){var i;let{callId:t,uid:l,rid:n}=e;null!==(i=this.incomingDirectCalls.get(t))&&void 0!==i&&i.acceptTimeout||(g&&console.log("[VideoConf] User ".concat(l," is ringing with call ").concat(t,".")),this.incomingDirectCalls.has(t)?this.refreshExistingIncomingCall({callId:t,uid:l,rid:n}):this.startNewIncomingCall({callId:t,uid:l,rid:n}))}onDirectCallCanceled(e){let{callId:i}=e;g&&console.log("[VideoConf] Call ".concat(i," was canceled by the remote user."));let t=this.incomingDirectCalls.get(i);null!=t&&t.acceptTimeout&&(clearTimeout(t.acceptTimeout),this.setIncomingCallAttribute(i,"acceptTimeout",void 0)),this.loseIncomingCall(i)}onDirectCallAccepted(e){var i;let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e.callId||e.callId!==(null===(i=this.currentCallData)||void 0===i?void 0:i.callId)){g&&console.log("[VideoConf] User ".concat(e.uid," has accepted a call ").concat(e.callId," from us, but we're not calling."));return}g&&console.log("[VideoConf] User ".concat(e.uid," has accepted our call ").concat(e.callId,".")),this.currentCallHandler&&(clearInterval(this.currentCallHandler),this.currentCallHandler=void 0);let l=this.currentCallData;this.emit("direct/accepted",e),this.emit("direct/stopped",e),this.currentCallData=void 0,this.emit("calling/changed"),l.joined||this.joinCall(e.callId),!t&&(g&&console.log("[VideoConf] Notifying user ".concat(l.uid," that they can join the call now.")),this.userId&&this.notifyUser(l.uid,"confirmed",{callId:l.callId,uid:this.userId,rid:l.rid}))}onDirectCallConfirmed(e){var i;if(!e.callId||!(null!==(i=this.incomingDirectCalls.get(e.callId))&&void 0!==i&&i.acceptTimeout)){g&&console.log("[VideoConf] User ".concat(e.uid," confirmed we can join ").concat(e.callId," but we aren't trying to join it."));return}this.joinCall(e.callId)}onDirectCallJoined(e){if(!e.callId){g&&console.log("[VideoConf] Invalid 'video-conference.join' event received: ".concat(e.callId,", ").concat(e.uid,"."));return}if(e.uid===this.userId){var i;if((null===(i=this.currentCallData)||void 0===i?void 0:i.callId)===e.callId){g&&console.log("[VideoConf] We joined our own call (".concat(this.userId,") from somewhere else. Flagging the call appropriatelly.")),this.currentCallData.joined=!0,this.emit("calling/changed");return}this.incomingDirectCalls.has(e.callId)&&(g&&console.log("[VideoConf] We joined the call ".concat(e.callId," from somewhere else. Dismissing it.")),this.dismissIncomingCall(e.callId),this.loseIncomingCall(e.callId));return}g&&console.log("[VideoConf] User ".concat(e.uid," has joined a call we started ").concat(e.callId,".")),this.onDirectCallAccepted(e,!0)}onDirectCallEnded(e){var i;if(!e.callId){g&&console.log("[VideoConf] Invalid 'video-conference.end' event received: ".concat(e.callId,", ").concat(e.uid,"."));return}let t=this.incomingDirectCalls.get(e.callId);if(t){g&&console.log("[VideoConf] Incoming call ended by the server: ".concat(e.callId,".")),t.acceptTimeout&&(clearTimeout(t.acceptTimeout),this.setIncomingCallAttribute(e.callId,"acceptTimeout",void 0)),this.loseIncomingCall(e.callId);return}if((null===(i=this.currentCallData)||void 0===i?void 0:i.callId)!==e.callId){g&&console.log("[VideoConf] Server sent a call ended event for a call we're not aware of: ".concat(e.callId,"."));return}g&&console.log("[VideoConf] Outgoing call ended by the server: ".concat(e.callId,".")),this.currentCallData=void 0,this.currentCallHandler&&(clearInterval(this.currentCallHandler),this.currentCallHandler=void 0,this.emit("calling/changed"),this.emit("direct/stopped",e))}onDirectCallRejected(e){var i;if(!e.callId||e.callId!==(null===(i=this.currentCallData)||void 0===i?void 0:i.callId)){g&&console.log("[VideoConf] User ".concat(e.uid," has rejected a call ").concat(e.callId," from us, but we're not calling."));return}g&&console.log("[VideoConf] User ".concat(e.uid," has rejected our call ").concat(e.callId,".")),this.currentCallHandler&&(clearInterval(this.currentCallHandler),this.currentCallHandler=void 0);let{joined:t}=this.currentCallData;this.emit("direct/cancel",e),this.currentCallData=void 0,this.emit("direct/stopped",e),this.emit("calling/changed"),t||s.rest.post("/v1/video-conference.cancel",{callId:e.callId})}isCallDismissed(e){return this.dismissedCalls.has(e)}};c.startup(()=>a.autorun(()=>u.updateUser()))}
//# sourceMappingURL=/dynamic/client/lib/c94bfab23bb8d6f31ad953a1a5e0018391ac33e5.map
