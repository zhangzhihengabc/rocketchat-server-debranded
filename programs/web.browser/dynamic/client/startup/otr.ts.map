)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/startup/otr.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { isOTRMessage } from '@rocket.chat/core-typings';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport OTR from '../../app/otr/client/OTR';\nimport { OtrRoomState } from '../../app/otr/lib/OtrRoomState';\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\nimport { t } from '../../app/utils/lib/i18n';\nimport { onClientBeforeSendMessage } from '../lib/onClientBeforeSendMessage';\nimport { onClientMessageReceived } from '../lib/onClientMessageReceived';\n\nMeteor.startup(() => {\n\tTracker.autorun(() => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn;\n\t\t}\n\n\t\tsdk.stream('notify-user', [`${uid}/otr`], (type, data) => {\n\t\t\tif (!data.roomId || !data.userId || data.userId === uid) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, data.roomId);\n\t\t\totrRoom?.onUserStream(type, data);\n\t\t});\n\t});\n\n\tonClientBeforeSendMessage.use(async (message) => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst msg = await otrRoom.encrypt(message);\n\t\t\treturn { ...message, msg, t: 'otr' };\n\t\t}\n\t\treturn message;\n\t});\n\n\tonClientMessageReceived.use(async (message) => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!isOTRMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif ('notification' in message) {\n\t\t\treturn { ...message, msg: t('Encrypted_message') };\n\t\t}\n\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst decrypted = await otrRoom.decrypt(message.msg);\n\t\t\tif (typeof decrypted === 'string') {\n\t\t\t\treturn { ...message, msg: decrypted };\n\t\t\t}\n\t\t\tconst { _id, text: msg, ack, ts, userId } = decrypted;\n\n\t\t\tif (ts) message.ts = ts;\n\n\t\t\tif (message.otrAck) {\n\t\t\t\tconst otrAck = await otrRoom.decrypt(message.otrAck);\n\t\t\t\tif (typeof otrAck === 'string') {\n\t\t\t\t\treturn { ...message, msg: otrAck };\n\t\t\t\t}\n\n\t\t\t\tif (ack === otrAck.text) {\n\t\t\t\t\treturn { ...message, _id, t: 'otr-ack', msg };\n\t\t\t\t}\n\t\t\t} else if (userId !== Meteor.userId()) {\n\t\t\t\tconst encryptedAck = await otrRoom.encryptText(ack);\n\n\t\t\t\tvoid sdk.call('updateOTRAck', { message, ack: encryptedAck });\n\t\t\t}\n\n\t\t\treturn { ...message, _id, msg };\n\t\t}\n\t\tif (message.t === 'otr') message.msg = '';\n\n\t\treturn message;\n\t});\n});\n",null],"names":["_objectSpread","isOTRMessage","Meteor","Tracker","OTR","OtrRoomState","sdk","t","onClientBeforeSendMessage","onClientMessageReceived","module","link","default","startup","autorun","uid","userId","stream","concat","type","data","roomId","otrRoom","getInstanceByRoomId","onUserStream","use","message","rid","getState","ESTABLISHED","msg","encrypt","decrypted","decrypt","_id","text","ack","ts","otrAck","encryptedAck","encryptText","call"],"mappings":"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"}