)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/hooks/useTranslationsForApps.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { normalizeLanguage } from '@rocket.chat/tools';\nimport { useEndpoint, useSingleStream, useUserId } from '@rocket.chat/ui-contexts';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { withDebouncing } from '../../lib/utils/highOrderFunctions';\n\nexport const useTranslationsForApps = () => {\n\tconst getAppsLanguages = useEndpoint('GET', '/apps/languages');\n\n\tconst { isSuccess, data } = useQuery({\n\t\tqueryKey: ['apps', 'translations'] as const,\n\t\tqueryFn: () => getAppsLanguages(),\n\t\tstaleTime: Infinity,\n\t});\n\n\tconst { i18n } = useTranslation();\n\n\tuseEffect(() => {\n\t\tif (!isSuccess) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata.apps.forEach(({ id: appId, languages }) => {\n\t\t\tObject.entries(languages).forEach(([language, translations]) => {\n\t\t\t\tconst normalizedLanguage = normalizeLanguage(language);\n\t\t\t\tconst namespace = `app-${appId}`;\n\t\t\t\ti18n.addResourceBundle(normalizedLanguage, namespace, translations);\n\t\t\t});\n\t\t});\n\t}, [i18n, data, isSuccess]);\n\n\tconst queryClient = useQueryClient();\n\tconst subscribeToApps = useSingleStream('apps');\n\tconst uid = useUserId();\n\n\tuseEffect(() => {\n\t\tif (!uid) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst invalidate = withDebouncing({ wait: 100 })(() => {\n\t\t\tqueryClient.invalidateQueries(['apps', 'translations']);\n\t\t});\n\n\t\tconst unsubscribe = subscribeToApps('apps', ([key]) => {\n\t\t\tif (key === 'app/added') {\n\t\t\t\tinvalidate();\n\t\t\t}\n\t\t});\n\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t\tinvalidate.cancel();\n\t\t};\n\t}, [uid, subscribeToApps, queryClient]);\n};\n",null],"names":["normalizeLanguage","useEndpoint","useSingleStream","useUserId","useQuery","useQueryClient","useEffect","useTranslation","withDebouncing","module","export","useTranslationsForApps","getAppsLanguages","isSuccess","data","queryKey","queryFn","staleTime","Infinity","i18n","apps","forEach","_ref","id","appId","languages","Object","entries","_ref2","language","translations","normalizedLanguage","namespace","concat","addResourceBundle","queryClient","subscribeToApps","uid","invalidate","wait","invalidateQueries","unsubscribe","_ref3","key","cancel"],"mappings":"2BAAuDA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAvDC,EAAOC,MAAE,CAAA,CAAAC,uBAAyB,IAAAA,CAAqB,GAAAF,EAAAA,IAAAA,CAAAA,qBAAAA,CAAAT,kBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAR,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAL,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAAH,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,gBAAAA,CAAAF,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,qCAAAA,CAAAD,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAQhD,IAAMG,EAAyB,KACrC,IAAMC,EAAmBX,EAAY,MAAO,mBAEtC,CAAEY,UAAAA,CAAS,CAAEC,KAAAA,CAAAA,CAAM,CAAGV,EAAS,CACpCW,SAAU,CAAC,OAAQ,eAAwB,CAC3CC,QAAS,IAAMJ,IACfK,UAAWC,MAGN,CAAEC,KAAAA,CAAAA,CAAM,CAAGZ,IAEjBD,EAAU,KACJO,GAILC,EAAKM,IAAI,CAACC,OAAO,CAACC,IAA6B,GAA5B,CAAEC,GAAIC,CAAK,CAAEC,UAAAA,CAAAA,CAAW,CAAAH,EAC1CI,OAAOC,OAAO,CAACF,GAAWJ,OAAO,CAACO,IAA6B,GAA5B,CAACC,EAAUC,EAAa,CAAAF,EACpDG,EAAqB/B,EAAkB6B,GACvCG,EAAS,OAAAC,MAAA,CAAUT,GACzBL,EAAKe,iBAAiB,CAACH,EAAoBC,EAAWF,EACvD,EACD,EACD,EAAG,CAACX,EAAML,EAAMD,EAAU,EAE1B,IAAMsB,EAAc9B,IACd+B,EAAkBlC,EAAgB,QAClCmC,EAAMlC,IAEZG,EAAU,KACT,GAAI,CAAC+B,EACJ,OAGD,IAAMC,EAAa9B,EAAe,CAAE+B,KAAM,GAAG,GAAI,KAChDJ,EAAYK,iBAAiB,CAAC,CAAC,OAAQ,eAAe,CACvD,GAEMC,EAAcL,EAAgB,OAAQM,IAAU,GAAT,CAACC,EAAI,CAAAD,CACrC,CAAA,cAARC,GACHL,GAEF,GAEA,MAAO,KACNG,IACAH,EAAWM,MAAM,EAClB,CACD,EAAG,CAACP,EAAKD,EAAiBD,EAAY,CACvC"}