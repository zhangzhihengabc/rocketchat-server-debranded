)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/hooks/lists/useStreamUpdatesForMessageList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { useStream } from '@rocket.chat/ui-contexts';\nimport { useEffect } from 'react';\n\nimport type { MessageList } from '../../lib/lists/MessageList';\nimport type { FieldExpression, Query } from '../../lib/minimongo';\nimport { createFilterFromQuery } from '../../lib/minimongo';\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users?.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nexport const useStreamUpdatesForMessageList = (messageList: MessageList, uid: IUser['_id'] | null, rid: IRoom['_id'] | null): void => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\tuseEffect(() => {\n\t\tif (!uid || !rid) {\n\t\t\tmessageList.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages(rid, (message) => {\n\t\t\tmessageList.handle(message);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom(`${rid}/deleteMessage`, ({ _id: mid }) => {\n\t\t\tmessageList.remove(mid);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(`${rid}/deleteMessageBulk`, (params) => {\n\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\tmessageList.prune(matchDeleteCriteria);\n\t\t});\n\n\t\treturn (): void => {\n\t\t\tunsubscribeFromRoomMessages();\n\t\t\tunsubscribeFromDeleteMessage();\n\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t};\n\t}, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};\n",null],"names":["useStream","useEffect","createFilterFromQuery","module","export","useStreamUpdatesForMessageList","createDeleteCriteria","params","_params$users","query","ts","excludePinned","pinned","$ne","ignoreDiscussion","drid","$exists","users","length","$in","messageList","uid","rid","subscribeToRoomMessages","subscribeToNotifyRoom","clear","unsubscribeFromRoomMessages","message","handle","unsubscribeFromDeleteMessage","concat","_ref","_id","mid","remove","unsubscribeFromDeleteMessageBulk","matchDeleteCriteria","prune"],"mappings":"2BACqDA,EAAAC,EAAAC,EAArDC,EAAOC,MAAE,CAAA,CAAAC,+BAAiB,IAAAA,CAA2B,GAAAF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAH,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,QAAAA,CAAAF,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,sBAAAA,CAAAD,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAerD,IAAMI,EAAwBC,IAAiF,IAAAC,EAC9G,IAAMC,EAAyB,CAAEC,GAAIH,EAAOG,EAAAA,AAAE,EAa9C,OAXIH,EAAOI,aAAa,EACvBF,CAAAA,EAAMG,MAAM,CAAG,CAAEC,IAAK,CAAA,CAAI,CAAA,EAGvBN,EAAOO,gBAAgB,EAC1BL,CAAAA,EAAMM,IAAI,CAAG,CAAEC,QAAS,CAAA,CAAK,CAAA,EAEd,OAAhBR,CAAAA,EAAID,EAAOU,KAAK,AAALA,GAAKT,AAAA,KAAA,IAAAA,GAAZA,EAAcU,MAAM,EACvBT,CAAAA,CAAK,CAAC,aAAa,CAAG,CAAEU,IAAKZ,EAAOU,KAAAA,AAAK,CAAA,EAGnCf,EAAgCO,EACxC,EAEaJ,EAAiC,CAACe,EAA0BC,EAA0BC,KAClG,IAAMC,EAA0BvB,EAAU,iBACpCwB,EAAwBxB,EAAU,eAExCC,EAAU,KACT,GAAI,CAACoB,GAAO,CAACC,EAAK,CACjBF,EAAYK,KAAK,GACjB,OAGD,IAAMC,EAA8BH,EAAwBD,EAAMK,IACjEP,EAAYQ,MAAM,CAACD,EACpB,GAEME,EAA+BL,EAAqB,GAAAM,MAAA,CAAIR,EAAG,kBAAkBS,IAAiB,GAAhB,CAAEC,IAAKC,CAAAA,CAAK,CAAAF,EAC/FX,EAAYc,MAAM,CAACD,EACpB,GAEME,EAAmCX,EAAqB,GAAAM,MAAA,CAAIR,EAAG,sBAAuBf,IAC3F,IAAM6B,EAAsB9B,EAAqBC,GACjDa,EAAYiB,KAAK,CAACD,EACnB,GAEA,MAAO,KACNV,IACAG,IACAM,GACD,CACD,EAAG,CAACZ,EAAyBC,EAAuBH,EAAKC,EAAKF,EAAY,CAC3E"}