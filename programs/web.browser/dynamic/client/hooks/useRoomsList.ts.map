)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/hooks/useRoomsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useState } from 'react';\n\nimport { RecordList } from '../lib/lists/RecordList';\nimport { useScrollableRecordList } from './lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from './useComponentDidUpdate';\n\ntype RoomListOptions = {\n\ttext: string;\n};\n\ntype IRoomClient = Pick<IRoom, '_updatedAt' | '_id'> & {\n\tlabel: string;\n\tvalue: string;\n};\n\nexport const useRoomsList = (\n\toptions: RoomListOptions,\n): {\n\titemsList: RecordList<IRoomClient>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<IRoomClient>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<IRoomClient>()), []);\n\n\tconst getRooms = useEndpoint('GET', '/v1/rooms.autocomplete.channelAndPrivate.withPagination');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { items: rooms, total } = await getRooms({\n\t\t\t\tselector: JSON.stringify({ name: options.text || '' }),\n\t\t\t\toffset: start,\n\t\t\t\tcount: start + end,\n\t\t\t\tsort: JSON.stringify({ name: 1 }),\n\t\t\t});\n\n\t\t\tconst items = rooms.map((room: any) => ({\n\t\t\t\t_id: room._id,\n\t\t\t\t_updatedAt: new Date(room._updatedAt),\n\t\t\t\tlabel: room.name ?? '',\n\t\t\t\tvalue: room.name ?? '',\n\t\t\t}));\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getRooms, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["useEndpoint","useCallback","useState","RecordList","useScrollableRecordList","useComponentDidUpdate","module","export","useRoomsList","options","itemsList","setItemsList","reload","getRooms","fetchData","start","end","items","rooms","total","selector","JSON","stringify","name","text","offset","count","sort","map","room","_room$name","_room$name2","_id","_updatedAt","Date","label","value","itemCount","loadMoreItems","initialItemCount"],"mappings":"2BAC4BA,EAA2BC,EAAAC,EAAAC,EAAAC,EAAAC,EAAvDC,EAAOC,MAAE,CAAA,CAAAC,aAAmB,IAAAA,CAAA,GAA2BF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,QAAAA,CAAAL,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,0BAAAA,CAAAH,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,kCAAAA,CAAAF,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,0BAAAA,CAAAD,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAgBhD,IAAMG,EACZC,IAOA,GAAM,CAACC,EAAWC,EAAa,CAAGT,EAAS,IAAM,IAAIC,GAC/CS,EAASX,EAAY,IAAMU,EAAa,IAAIR,GAA4B,EAAE,EAE1EU,EAAWb,EAAY,MAAO,2DAEpCK,EAAsB,KACrBI,GAAWG,GACZ,EAAG,CAACH,EAASG,EAAO,EAEpB,IAAME,EAAYb,EACjB,MAAOc,EAAOC,KACb,GAAM,CAAEC,MAAOC,CAAK,CAAEC,MAAAA,CAAAA,CAAO,CAAG,MAAMN,EAAS,CAC9CO,SAAUC,KAAKC,SAAS,CAAC,CAAEC,KAAMd,EAAQe,IAAI,EAAI,EAAE,GACnDC,OAAQV,EACRW,MAAOX,EAAQC,EACfW,KAAMN,KAAKC,SAAS,CAAC,CAAEC,KAAM,CAAC,KAGzBN,EAAQC,EAAMU,GAAG,CAAEC,IAAS,IAAAC,EAAAC,EAAA,MAAM,CACvCC,IAAKH,EAAKG,GAAG,CACbC,WAAY,IAAIC,KAAKL,EAAKI,UAAU,EACpCE,MAAK,AAAW,OAAXL,CAAAA,EAAED,EAAKN,IAAI,AAAJA,GAAIO,AAAA,KAAA,IAAAA,EAAAA,EAAI,GACpBM,MAAK,AAAW,OAAXL,CAAAA,EAAEF,EAAKN,IAAI,AAAJA,GAAIQ,AAAA,KAAA,IAAAA,EAAAA,EAAI,GACpB,GAED,MAAO,CACNd,MAAAA,EACAoB,UAAWlB,EAEb,EACA,CAACN,EAAUJ,EAAQe,IAAI,CAAC,EAGnB,CAAEc,cAAAA,CAAa,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGnC,EAAwBM,EAAWI,EAAW,IAE1F,MAAO,CACNF,OAAAA,EACAF,UAAAA,EACA4B,cAAAA,EACAC,iBAAAA,EAEF"}