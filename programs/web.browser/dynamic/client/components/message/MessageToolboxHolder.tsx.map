)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/components/message/MessageToolboxHolder.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport { MessageToolboxWrapper } from '@rocket.chat/fuselage';\nimport { useQuery } from '@tanstack/react-query';\nimport type { ReactElement } from 'react';\nimport React, { Suspense, lazy, memo, useRef, useState } from 'react';\n\nimport type { MessageActionContext } from '../../../app/ui-utils/client/lib/MessageAction';\nimport { useChat } from '../../views/room/contexts/ChatContext';\nimport { useIsVisible } from '../../views/room/hooks/useIsVisible';\n\ntype MessageToolboxHolderProps = {\n\tmessage: IMessage;\n\tcontext?: MessageActionContext;\n};\n\nconst MessageToolbox = lazy(() => import('./toolbox/MessageToolbox'));\n\nconst MessageToolboxHolder = ({ message, context }: MessageToolboxHolderProps): ReactElement => {\n\tconst ref = useRef(null);\n\n\tconst [isVisible] = useIsVisible(ref);\n\tconst [kebabOpen, setKebabOpen] = useState(false);\n\n\tconst showToolbox = isVisible || kebabOpen;\n\n\tconst chat = useChat();\n\n\tconst depsQueryResult = useQuery(['toolbox', message._id, context], async () => {\n\t\tconst room = await chat?.data.findRoom();\n\t\tconst subscription = await chat?.data.findSubscription();\n\t\treturn {\n\t\t\troom,\n\t\t\tsubscription,\n\t\t};\n\t});\n\n\treturn (\n\t\t<MessageToolboxWrapper ref={ref} visible={kebabOpen}>\n\t\t\t{showToolbox && depsQueryResult.isSuccess && depsQueryResult.data.room && (\n\t\t\t\t<Suspense fallback={null}>\n\t\t\t\t\t<MessageToolbox\n\t\t\t\t\t\tonChangeMenuVisibility={setKebabOpen}\n\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\tmessageContext={context}\n\t\t\t\t\t\troom={depsQueryResult.data.room}\n\t\t\t\t\t\tsubscription={depsQueryResult.data.subscription}\n\t\t\t\t\t/>\n\t\t\t\t</Suspense>\n\t\t\t)}\n\t\t</MessageToolboxWrapper>\n\t);\n};\n\nexport default memo(MessageToolboxHolder);\n",null],"names":["MessageToolboxWrapper","useQuery","React","Suspense","lazy","memo","useRef","useState","useChat","useIsVisible","module","link","default","MessageToolbox","dynamicImport","exportDefault","_ref","message","context","ref","isVisible","kebabOpen","setKebabOpen","showToolbox","chat","depsQueryResult","_id","room","data","findRoom","subscription","findSubscription","createElement","visible","isSuccess","fallback","onChangeMenuVisibility","messageContext"],"mappings":"2BACAA,EAA8DC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAArDC,EAAuBC,IAAA,CAAM,wBAAwB,CAAAX,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAU,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAT,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,QAAAA,CAAAE,QAAAA,CAAAA,EAAAV,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,KAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,KAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,OAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,wCAAAA,CAAAF,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,sCAAAA,CAAAD,aAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAc9D,IAAMI,EAAiBT,EAAK,IAAMM,EAAAI,aAAA,CAAO,6BAdzCJ,EAAOK,aAAE,CAoDMV,EApCcW,IAAkE,GAAjE,CAAEC,QAAAA,CAAO,CAAEC,QAAAA,CAAAA,CAAoC,CAAAF,EACtEG,EAAMb,EAAO,MAEb,CAACc,EAAU,CAAGX,EAAaU,GAC3B,CAACE,EAAWC,EAAa,CAAGf,EAAS,CAAA,GAErCgB,EAAcH,GAAaC,EAE3BG,EAAOhB,IAEPiB,EAAkBxB,EAAS,CAAC,UAAWgB,EAAQS,GAAG,CAAER,EAAQ,CAAE,UACnE,IAAMS,EAAO,MAAMH,CAAAA,MAAAA,EAAI,KAAA,EAAJA,EAAMI,IAAI,CAACC,QAAQ,EAAA,EAChCC,EAAe,MAAMN,CAAAA,MAAAA,EAAI,KAAA,EAAJA,EAAMI,IAAI,CAACG,gBAAgB,EAAA,EACtD,MAAO,CACNJ,KAAAA,EACAG,aAAAA,EAEF,GAEA,OACC5B,EAAA8B,aAAA,CAAChC,EAAqB,CAACmB,IAAKA,EAAKc,QAASZ,CAAU,EAClDE,GAAeE,EAAgBS,SAAS,EAAIT,EAAgBG,IAAI,CAACD,IAAI,EACrEzB,EAAA8B,aAAA,CAAC7B,EAAQ,CAACgC,SAAU,IAAK,EACxBjC,EAAA8B,aAAA,CAACnB,EAAc,CACduB,uBAAwBd,EACxBL,QAASA,EACToB,eAAgBnB,EAChBS,KAAMF,EAAgBG,IAAI,CAACD,IAAK,CAChCG,aAAcL,EAAgBG,IAAI,CAACE,YAAAA,AAAa,IAMtD"}