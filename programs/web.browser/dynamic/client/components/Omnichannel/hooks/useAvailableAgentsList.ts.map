)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/components/Omnichannel/hooks/useAvailableAgentsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ILivechatAgent } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../lib/lists/RecordList';\n\ntype AgentsListOptions = {\n\ttext: string;\n\tincludeExtension?: string;\n};\n\nexport const useAvailableAgentsList = (\n\toptions: AgentsListOptions,\n): {\n\titemsList: RecordList<ILivechatAgent>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatAgent>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatAgent>()), []);\n\n\tconst getAgents = useEndpoint('GET', '/v1/omnichannel/agents/available');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { agents, total } = await getAgents({\n\t\t\t\t...(options.text && { text: options.text }),\n\t\t\t\t...(options.includeExtension && { includeExtension: options.includeExtension }),\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t\tsort: `{ \"name\": 1 }`,\n\t\t\t});\n\n\t\t\tconst items = agents.map((agent: any) => {\n\t\t\t\tagent._updatedAt = new Date(agent._updatedAt);\n\t\t\t\tagent.label = agent.username;\n\t\t\t\tagent.value = agent._id;\n\t\t\t\treturn agent;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getAgents, options.includeExtension, options.text],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["_objectSpread","useEndpoint","useCallback","useState","useScrollableRecordList","useComponentDidUpdate","RecordList","module","link","default","export","useAvailableAgentsList","options","itemsList","setItemsList","reload","getAgents","fetchData","start","end","agents","total","text","includeExtension","offset","count","sort","items","map","agent","_updatedAt","Date","label","username","value","_id","itemCount","loadMoreItems","initialItemCount"],"mappings":"2BACAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAA,CAAAA,EAAAT,EAAAA,CAAA,CAAA,EAAA,GAAvDO,EAAOG,MAAE,CAAA,CAAAC,uBAAmB,IAAAA,CAA2B,GAAAJ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,QAAAA,CAAAL,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,+CAAAA,CAAAH,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAF,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,gCAAAA,CAAAD,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAYhD,IAAMK,EACZC,IAOA,GAAM,CAACC,EAAWC,EAAa,CAAGX,EAAS,IAAM,IAAIG,GAC/CS,EAASb,EAAY,IAAMY,EAAa,IAAIR,GAA+B,EAAE,EAE7EU,EAAYf,EAAY,MAAO,oCAErCI,EAAsB,KACrBO,GAAWG,GACZ,EAAG,CAACH,EAASG,EAAO,EAEpB,IAAME,EAAYf,EACjB,MAAOgB,EAAOC,KACb,GAAM,CAAEC,OAAAA,CAAM,CAAEC,MAAAA,CAAAA,CAAO,CAAG,MAAML,EAAShB,EAAAA,EAAAA,EAAA,CAAA,EACpCY,EAAQU,IAAI,EAAI,CAAEA,KAAMV,EAAQU,IAAAA,AAAI,GACpCV,EAAQW,gBAAgB,EAAI,CAAEA,iBAAkBX,EAAQW,gBAAAA,AAAgB,GAAE,CAAA,EAAA,CAC9EC,OAAQN,EACRO,MAAON,EAAMD,EACbQ,KAAI,eAAiB,IAGhBC,EAAQP,EAAOQ,GAAG,CAAEC,IACzBA,EAAMC,UAAU,CAAG,IAAIC,KAAKF,EAAMC,UAAU,EAC5CD,EAAMG,KAAK,CAAGH,EAAMI,QAAQ,CAC5BJ,EAAMK,KAAK,CAAGL,EAAMM,GAAG,CAChBN,IAGR,MAAO,CACNF,MAAAA,EACAS,UAAWf,EAEb,EACA,CAACL,EAAWJ,EAAQW,gBAAgB,CAAEX,EAAQU,IAAI,CAAC,EAG9C,CAAEe,cAAAA,CAAa,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGlC,EAAwBS,EAAWI,EAAW,IAE1F,MAAO,CACNF,OAAAA,EACAF,UAAAA,EACAwB,cAAAA,EACAC,iBAAAA,EAEF"}