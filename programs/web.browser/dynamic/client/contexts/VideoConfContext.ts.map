)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/VideoConfContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { createContext, useContext } from 'react';\nimport type { Subscription } from 'use-subscription';\nimport { useSubscription } from 'use-subscription';\n\nimport type { DirectCallData, ProviderCapabilities, CallPreferences, VideoConfManager } from '../lib/VideoConfManager';\n\nexport type VideoConfPopupPayload = {\n\tid: string;\n\trid: IRoom['_id'];\n\tisReceiving?: boolean;\n};\n\ntype VideoConfContextValue = {\n\tmanager: typeof VideoConfManager;\n\tdispatchOutgoing: (options: Omit<VideoConfPopupPayload, 'id'>) => void;\n\tdismissOutgoing: () => void;\n\tstartCall: (rid: IRoom['_id'], title?: string) => void;\n\tacceptCall: (callId: string) => void;\n\tjoinCall: (callId: string) => void;\n\tdismissCall: (callId: string) => void;\n\trejectIncomingCall: (callId: string) => void;\n\tabortCall: () => void;\n\tsetPreferences: (prefs: { mic?: boolean; cam?: boolean }) => void;\n\tqueryIncomingCalls: Subscription<DirectCallData[]>;\n\tqueryRinging: Subscription<boolean>;\n\tqueryCalling: Subscription<boolean>;\n\tqueryCapabilities: Subscription<ProviderCapabilities>;\n\tqueryPreferences: Subscription<CallPreferences>;\n};\n\nexport const VideoConfContext = createContext<VideoConfContextValue | undefined>(undefined);\nconst useVideoConfContext = (): VideoConfContextValue => {\n\tconst context = useContext(VideoConfContext);\n\tif (!context) {\n\t\tthrow new Error('Must be running in VideoConf Context');\n\t}\n\n\treturn context;\n};\n\nexport const useVideoConfDispatchOutgoing = (): VideoConfContextValue['dispatchOutgoing'] => useVideoConfContext().dispatchOutgoing;\nexport const useVideoConfDismissOutgoing = (): VideoConfContextValue['dismissOutgoing'] => useVideoConfContext().dismissOutgoing;\nexport const useVideoConfStartCall = (): VideoConfContextValue['startCall'] => useVideoConfContext().startCall;\nexport const useVideoConfAcceptCall = (): VideoConfContextValue['acceptCall'] => useVideoConfContext().acceptCall;\nexport const useVideoConfJoinCall = (): VideoConfContextValue['joinCall'] => useVideoConfContext().joinCall;\nexport const useVideoConfDismissCall = (): VideoConfContextValue['dismissCall'] => useVideoConfContext().dismissCall;\nexport const useVideoConfAbortCall = (): VideoConfContextValue['abortCall'] => useVideoConfContext().abortCall;\nexport const useVideoConfRejectIncomingCall = (): VideoConfContextValue['rejectIncomingCall'] => useVideoConfContext().rejectIncomingCall;\nexport const useVideoConfIncomingCalls = (): DirectCallData[] => {\n\tconst { queryIncomingCalls } = useVideoConfContext();\n\treturn useSubscription(queryIncomingCalls);\n};\nexport const useVideoConfSetPreferences = (): VideoConfContextValue['setPreferences'] => useVideoConfContext().setPreferences;\nexport const useVideoConfIsRinging = (): boolean => {\n\tconst { queryRinging } = useVideoConfContext();\n\treturn useSubscription(queryRinging);\n};\nexport const useVideoConfIsCalling = (): boolean => {\n\tconst { queryCalling } = useVideoConfContext();\n\treturn useSubscription(queryCalling);\n};\nexport const useVideoConfCapabilities = (): ProviderCapabilities => {\n\tconst { queryCapabilities } = useVideoConfContext();\n\treturn useSubscription(queryCapabilities);\n};\nexport const useVideoConfPreferences = (): CallPreferences => {\n\tconst { queryPreferences } = useVideoConfContext();\n\treturn useSubscription(queryPreferences);\n};\n\nexport const useVideoConfManager = (): typeof VideoConfManager | undefined => useContext(VideoConfContext)?.manager;\n",null],"names":["createContext","useContext","useSubscription","module","export","VideoConfContext","useVideoConfDispatchOutgoing","useVideoConfDismissOutgoing","useVideoConfStartCall","useVideoConfAcceptCall","useVideoConfJoinCall","useVideoConfDismissCall","useVideoConfAbortCall","useVideoConfRejectIncomingCall","useVideoConfIncomingCalls","useVideoConfSetPreferences","useVideoConfIsRinging","useVideoConfIsCalling","useVideoConfCapabilities","useVideoConfPreferences","useVideoConfManager","undefined","useVideoConfContext","context","Error","dispatchOutgoing","dismissOutgoing","startCall","acceptCall","joinCall","dismissCall","abortCall","rejectIncomingCall","queryIncomingCalls","setPreferences","queryRinging","queryCalling","queryCapabilities","queryPreferences","_useContext","manager"],"mappings":"2BACkDA,EAAAC,EAAAC,EAAlDC,EAAOC,MAAE,CAAA,CAAAC,iBAAe,IAAYA,EAAcC,6BAAAA,IAAAA,EAAAC,4BAAAA,IAAAA,EAAAC,sBAAAA,IAAAA,EAAAC,uBAAAA,IAAAA,EAAAC,qBAAAA,IAAAA,EAAAC,wBAAAA,IAAAA,EAAAC,sBAAAA,IAAAA,EAAAC,+BAAAA,IAAAA,EAAAC,0BAAAA,IAAAA,EAAAC,2BAAAA,IAAAA,EAAAC,sBAAAA,IAAAA,EAAAC,sBAAAA,IAAAA,EAAAC,yBAAAA,IAAAA,EAAAC,wBAAAA,IAAAA,EAAAC,oBAAAA,IAAAA,CAAA,GAAAjB,EAAAA,IAAAA,CAAAA,QAAAA,CAAAH,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,mBAAAA,CAAAD,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GA8B3C,IAAMG,EAAmBL,EAAiDqB,KAAAA,GAC3EC,EAAsB,KAC3B,IAAMC,EAAUtB,EAAWI,GAC3B,GAAI,CAACkB,EACJ,MAAM,AAAIC,MAAM,wCAGjB,OAAOD,CACR,EAEajB,EAA+B,IAAiDgB,IAAsBG,gBAAgB,CACtHlB,EAA8B,IAAgDe,IAAsBI,eAAe,CACnHlB,EAAwB,IAA0Cc,IAAsBK,SAAS,CACjGlB,EAAyB,IAA2Ca,IAAsBM,UAAU,CACpGlB,EAAuB,IAAyCY,IAAsBO,QAAQ,CAC9FlB,EAA0B,IAA4CW,IAAsBQ,WAAW,CACvGlB,EAAwB,IAA0CU,IAAsBS,SAAS,CACjGlB,EAAiC,IAAmDS,IAAsBU,kBAAkB,CAC5HlB,EAA4B,KACxC,GAAM,CAAEmB,mBAAAA,CAAAA,CAAoB,CAAGX,IAC/B,OAAOpB,EAAgB+B,EACxB,EACalB,EAA6B,IAA+CO,IAAsBY,cAAc,CAChHlB,EAAwB,KACpC,GAAM,CAAEmB,aAAAA,CAAAA,CAAc,CAAGb,IACzB,OAAOpB,EAAgBiC,EACxB,EACalB,EAAwB,KACpC,GAAM,CAAEmB,aAAAA,CAAAA,CAAc,CAAGd,IACzB,OAAOpB,EAAgBkC,EACxB,EACalB,EAA2B,KACvC,GAAM,CAAEmB,kBAAAA,CAAAA,CAAmB,CAAGf,IAC9B,OAAOpB,EAAgBmC,EACxB,EACalB,EAA0B,KACtC,GAAM,CAAEmB,iBAAAA,CAAAA,CAAkB,CAAGhB,IAC7B,OAAOpB,EAAgBoC,EACxB,EAEalB,EAAsB,KAAA,IAAAmB,EAAA,OAAA,AAAuE,OAAvEA,CAAAA,EAA2CtC,EAAWI,EAAgB,GAACkC,AAAA,KAAA,IAAAA,EAAA,KAAA,EAA5BA,EAA8BC,OAAO"}