)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/CallContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\nimport type { Device } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useHasLicenseModule } from '../../ee/client/hooks/useHasLicenseModule';\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextReady = {\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\tnetworkStatus: 'online' | 'offline';\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\n\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\n\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\n\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\n\tregister: () => void;\n\tunregister: () => void;\n};\n\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n\terror: Error | unknown;\n};\n\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n\toutBoundCallsAllowed: undefined,\n\toutBoundCallsEnabled: undefined,\n\toutBoundCallsEnabledForUser: undefined,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\tconst { voipClient } = context;\n\n\tconst [subscribe, getSnapshot] = useMemo(() => {\n\t\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\n\n\t\tconst callback = (cb: () => void): (() => void) =>\n\t\t\tvoipClient.on('stateChanged', () => {\n\t\t\t\tcaller = voipClient.callerInfo;\n\t\t\t\tcb();\n\t\t\t});\n\n\t\tconst getSnapshot = (): VoIpCallerInfo => caller;\n\t\treturn [callback, getSnapshot];\n\t}, [voipClient]);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueName only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioOutputDevice;\n};\n\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioInputDevice;\n};\n\nexport const useCallRegisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.register;\n};\n\nexport const useCallUnregisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.unregister;\n};\n\nexport const useVoipOutboundStates = (): {\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n} => {\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst callerInfo = useCallerInfo();\n\n\treturn {\n\t\toutBoundCallsAllowed: isEnterprise,\n\t\toutBoundCallsEnabled: isEnterprise,\n\t\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\n\t};\n};\n\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n\t}\n\n\treturn context.networkStatus;\n};\n",null],"names":["createContext","useContext","useMemo","useSyncExternalStore","useHasLicenseModule","module","export","CallContext","useIsVoipEnterprise","useIsCallEnabled","useIsCallReady","useIsCallError","useCallActions","useCallerInfo","useCallCreateRoom","useCallOpenRoom","useCallClient","useQueueName","useQueueCounter","useOpenedRoomInfo","useChangeAudioOutputDevice","useChangeAudioInputDevice","useCallRegisterClient","useCallUnregisterClient","useVoipOutboundStates","useVoipNetworkStatus","isCallContextReady","context","ready","isCallContextError","undefined","error","enabled","outBoundCallsAllowed","outBoundCallsEnabled","outBoundCallsEnabledForUser","Boolean","Error","actions","voipClient","subscribe","getSnapshot","caller","callerInfo","cb","on","createRoom","openRoom","queueName","queueCounter","openedRoomInfo","changeAudioOutputDevice","changeAudioInputDevice","register","unregister","isEnterprise","includes","state","networkStatus"],"mappings":"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"}