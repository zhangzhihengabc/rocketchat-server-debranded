function module(e,r,l){let n,a,o,t,u;l.export({CallContext:()=>i,useIsVoipEnterprise:()=>C,useIsCallEnabled:()=>f,useIsCallReady:()=>y,useIsCallError:()=>E,useCallActions:()=>c,useCallerInfo:()=>h,useCallCreateRoom:()=>p,useCallOpenRoom:()=>b,useCallClient:()=>I,useQueueName:()=>w,useQueueCounter:()=>m,useOpenedRoomInfo:()=>R,useChangeAudioOutputDevice:()=>g,useChangeAudioInputDevice:()=>v,useCallRegisterClient:()=>A,useCallUnregisterClient:()=>O,useVoipOutboundStates:()=>N,useVoipNetworkStatus:()=>D}),l.link("react",{createContext(e){n=e},useContext(e){a=e},useMemo(e){o=e}},0),l.link("use-sync-external-store/shim",{useSyncExternalStore(e){t=e}},1),l.link("../../ee/client/hooks/useHasLicenseModule",{useHasLicenseModule(e){u=e}},2);let s=e=>e.ready,d=e=>void 0!==e.error,i=n({enabled:!1,ready:!1,outBoundCallsAllowed:void 0,outBoundCallsEnabled:void 0,outBoundCallsEnabledForUser:void 0}),C=()=>!0===u("voip-enterprise"),f=()=>{let{enabled:e}=a(i);return e},y=()=>{let{ready:e}=a(i);return!!e},E=()=>{let e=a(i);return!!d(e)},c=()=>{let e=a(i);if(!s(e))throw Error("useCallActions only if Calls are enabled and ready");return e.actions},h=()=>{let e=a(i);if(!s(e))throw Error("useCallerInfo only if Calls are enabled and ready");let{voipClient:r}=e,[l,n]=o(()=>{let e=r.callerInfo;return[l=>r.on("stateChanged",()=>{e=r.callerInfo,l()}),()=>e]},[r]);return t(l,n)},p=()=>{let e=a(i);if(!s(e))throw Error("useCallCreateRoom only if Calls are enabled and ready");return e.createRoom},b=()=>{let e=a(i);if(!s(e))throw Error("useCallOpenRoom only if Calls are enabled and ready");return e.openRoom},I=()=>{let e=a(i);if(!s(e))throw Error("useCallClient only if Calls are enabled and ready");return e.voipClient},w=()=>{let e=a(i);if(!s(e))throw Error("useQueueName only if Calls are enabled and ready");return e.queueName},m=()=>{let e=a(i);if(!s(e))throw Error("useQueueCounter only if Calls are enabled and ready");return e.queueCounter},R=()=>{let e=a(i);if(!s(e))throw Error("useOpenedRoomInfo only if Calls are enabled and ready");return e.openedRoomInfo},g=()=>{let e=a(i);if(!s(e))throw Error("useChangeAudioOutputDevice only if Calls are enabled and ready");return e.changeAudioOutputDevice},v=()=>{let e=a(i);if(!s(e))throw Error("useChangeAudioInputDevice only if Calls are enabled and ready");return e.changeAudioInputDevice},A=()=>{let e=a(i);if(!s(e))throw Error("useCallRegisterClient only if Calls are enabled and ready");return e.register},O=()=>{let e=a(i);if(!s(e))throw Error("useCallUnregisterClient only if Calls are enabled and ready");return e.unregister},N=()=>{let e=C(),r=h();return{outBoundCallsAllowed:e,outBoundCallsEnabled:e,outBoundCallsEnabledForUser:e&&!["IN_CALL","ON_HOLD","UNREGISTERED","INITIAL"].includes(r.state)}},D=()=>{let e=a(i);if(!s(e))throw Error("useVoipNetworkStatus only if Calls are enabled and ready");return e.networkStatus}}
//# sourceMappingURL=/dynamic/client/contexts/473e3563f835285f567c6db858c5d61f33e9c33f.map
