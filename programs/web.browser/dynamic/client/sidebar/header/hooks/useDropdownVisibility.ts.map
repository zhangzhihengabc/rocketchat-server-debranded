)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/sidebar/header/hooks/useDropdownVisibility.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useToggle, useOutsideClick } from '@rocket.chat/fuselage-hooks';\nimport type { RefObject } from 'react';\nimport { useCallback } from 'react';\n\n/**\n * useDropdownVisibility\n * is used to control the visibility of a dropdown\n * also checks if the user clicked outside the dropdown, but ignores if the click was on the anchor\n * @param {Object} props\n * @param {Object} props.reference - The reference where the dropdown will be attached to\n * @param {Object} props.target - The target, the dropdown itself\n * @returns {Object}\n * @returns {Boolean} isVisible - The visibility of the dropdown\n * @returns {Function} toggle - The function to toggle the dropdown\n */\n\nexport const useDropdownVisibility = <T extends HTMLElement>({\n\treference,\n\ttarget,\n}: {\n\treference: RefObject<T>;\n\ttarget: RefObject<T>;\n}): {\n\tisVisible: boolean;\n\ttoggle: (state?: boolean) => void;\n} => {\n\tconst [isVisible, toggle] = useToggle(false);\n\n\tuseOutsideClick(\n\t\t[target, reference],\n\t\tuseCallback(() => toggle(false), [toggle]),\n\t);\n\n\treturn {\n\t\tisVisible,\n\t\ttoggle,\n\t};\n};\n",null],"names":["useToggle","useOutsideClick","useCallback","module","export","useDropdownVisibility","_ref","reference","target","isVisible","toggle"],"mappings":"2BAA2CA,EAA8BC,EAAAC,EAAzEC,EAAOC,MAAE,CAAA,CAAAC,sBAA4B,IAAAA,CAAM,GAA8BF,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAH,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,QAAAA,CAAAD,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAgBlE,IAAMG,EAAwBC,IASjC,GATyD,CAC5DC,UAAAA,CAAS,CACTC,OAAAA,CAAAA,CAIA,CAAAF,EAIM,CAACG,EAAWC,EAAO,CAAGV,EAAU,CAAA,GAOtC,OALAC,EACC,CAACO,EAAQD,EAAU,CACnBL,EAAY,IAAMQ,EAAO,CAAA,GAAQ,CAACA,EAAO,GAGnC,CACND,UAAAA,EACAC,OAAAA,EAEF"}