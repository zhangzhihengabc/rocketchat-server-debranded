)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/sidebar/footer/voip/hooks/useOmnichannelContactLabel.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ICallerInfo } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\n\nimport { parseOutboundPhoneNumber } from '../../../../../ee/client/lib/voip/parseOutboundPhoneNumber';\n\nexport const useOmnichannelContactLabel = (caller: ICallerInfo): string => {\n\tconst getContactBy = useEndpoint('GET', '/v1/omnichannel/contact.search');\n\tconst phone = parseOutboundPhoneNumber(caller.callerId);\n\n\tconst { data } = useQuery(['getContactsByPhone', phone], async () => getContactBy({ phone }).then(({ contact }) => contact), {\n\t\tenabled: !!phone,\n\t});\n\n\treturn data?.name || caller.callerName || phone;\n};\n",null],"names":["useEndpoint","useQuery","parseOutboundPhoneNumber","module","export","useOmnichannelContactLabel","caller","getContactBy","phone","callerId","data","then","_ref","contact","enabled","name","callerName"],"mappings":"2BACuDA,EAAAC,EAAAC,EAAvDC,EAAOC,MAAE,CAAA,CAAAC,2BAAmB,IAAAA,CAA2B,GAAAF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAH,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAF,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,6DAAAA,CAAAD,yBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAKhD,IAAMG,EAA8BC,IAC1C,IAAMC,EAAeP,EAAY,MAAO,kCAClCQ,EAAQN,EAAyBI,EAAOG,QAAQ,EAEhD,CAAEC,KAAAA,CAAAA,CAAM,CAAGT,EAAS,CAAC,qBAAsBO,EAAM,CAAE,SAAYD,EAAa,CAAEC,MAAAA,CAAK,GAAIG,IAAI,CAACC,IAAA,GAAC,CAAEC,QAAAA,CAAAA,CAAS,CAAAD,EAAA,OAAKC,CAAO,GAAG,CAC5HC,QAAS,CAAC,CAACN,IAGZ,MAAO,AAAAE,CAAAA,MAAAA,EAAI,KAAA,EAAJA,EAAMK,IAAI,AAAJA,GAAQT,EAAOU,UAAU,EAAIR,CAC3C"}