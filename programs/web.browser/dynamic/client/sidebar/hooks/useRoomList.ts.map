)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/sidebar/hooks/useRoomList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ILivechatInquiryRecord, IRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { useDebouncedState } from '@rocket.chat/fuselage-hooks';\nimport { useUserPreference, useUserSubscriptions, useSetting } from '@rocket.chat/ui-contexts';\nimport { useEffect } from 'react';\n\nimport { useVideoConfIncomingCalls } from '../../contexts/VideoConfContext';\nimport { useOmnichannelEnabled } from '../../hooks/omnichannel/useOmnichannelEnabled';\nimport { useQueuedInquiries } from '../../hooks/omnichannel/useQueuedInquiries';\nimport { useQueryOptions } from './useQueryOptions';\n\nconst query = { open: { $ne: false } };\n\nconst emptyQueue: ILivechatInquiryRecord[] = [];\n\nexport const useRoomList = (): Array<ISubscription & IRoom> => {\n\tconst [roomList, setRoomList] = useDebouncedState<(ISubscription & IRoom)[]>([], 150);\n\n\tconst showOmnichannel = useOmnichannelEnabled();\n\tconst sidebarGroupByType = useUserPreference('sidebarGroupByType');\n\tconst favoritesEnabled = useUserPreference('sidebarShowFavorites');\n\tconst isDiscussionEnabled = useSetting('Discussion_enabled');\n\tconst sidebarShowUnread = useUserPreference('sidebarShowUnread');\n\n\tconst options = useQueryOptions();\n\n\tconst rooms = useUserSubscriptions(query, options);\n\n\tconst inquiries = useQueuedInquiries();\n\n\tconst incomingCalls = useVideoConfIncomingCalls();\n\n\tlet queue = emptyQueue;\n\tif (inquiries.enabled) {\n\t\tqueue = inquiries.queue;\n\t}\n\n\tuseEffect(() => {\n\t\tsetRoomList(() => {\n\t\t\tconst incomingCall = new Set();\n\t\t\tconst favorite = new Set();\n\t\t\tconst team = new Set();\n\t\t\tconst omnichannel = new Set();\n\t\t\tconst unread = new Set();\n\t\t\tconst channels = new Set();\n\t\t\tconst direct = new Set();\n\t\t\tconst discussion = new Set();\n\t\t\tconst conversation = new Set();\n\t\t\tconst onHold = new Set();\n\n\t\t\trooms.forEach((room) => {\n\t\t\t\tif (room.archived) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (incomingCalls.find((call) => call.rid === room.rid)) {\n\t\t\t\t\treturn incomingCall.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (sidebarShowUnread && (room.alert || room.unread) && !room.hideUnreadStatus) {\n\t\t\t\t\treturn unread.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (favoritesEnabled && room.f) {\n\t\t\t\t\treturn favorite.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (sidebarGroupByType && room.teamMain) {\n\t\t\t\t\treturn team.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (sidebarGroupByType && isDiscussionEnabled && room.prid) {\n\t\t\t\t\treturn discussion.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (room.t === 'c' || room.t === 'p') {\n\t\t\t\t\tchannels.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (room.t === 'l' && room.onHold) {\n\t\t\t\t\treturn showOmnichannel && onHold.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (room.t === 'l') {\n\t\t\t\t\treturn showOmnichannel && omnichannel.add(room);\n\t\t\t\t}\n\n\t\t\t\tif (room.t === 'd') {\n\t\t\t\t\tdirect.add(room);\n\t\t\t\t}\n\n\t\t\t\tconversation.add(room);\n\t\t\t});\n\n\t\t\tconst groups = new Map();\n\t\t\tincomingCall.size && groups.set('Incoming Calls', incomingCall);\n\t\t\tshowOmnichannel && inquiries.enabled && queue.length && groups.set('Incoming_Livechats', queue);\n\t\t\tshowOmnichannel && omnichannel.size && groups.set('Open_Livechats', omnichannel);\n\t\t\tshowOmnichannel && onHold.size && groups.set('On_Hold_Chats', onHold);\n\t\t\tsidebarShowUnread && unread.size && groups.set('Unread', unread);\n\t\t\tfavoritesEnabled && favorite.size && groups.set('Favorites', favorite);\n\t\t\tsidebarGroupByType && team.size && groups.set('Teams', team);\n\t\t\tsidebarGroupByType && isDiscussionEnabled && discussion.size && groups.set('Discussions', discussion);\n\t\t\tsidebarGroupByType && channels.size && groups.set('Channels', channels);\n\t\t\tsidebarGroupByType && direct.size && groups.set('Direct_Messages', direct);\n\t\t\t!sidebarGroupByType && groups.set('Conversations', conversation);\n\t\t\treturn [...groups.entries()].flatMap(([key, group]) => [key, ...group]);\n\t\t});\n\t}, [\n\t\trooms,\n\t\tshowOmnichannel,\n\t\tincomingCalls,\n\t\tinquiries.enabled,\n\t\tqueue,\n\t\tsidebarShowUnread,\n\t\tfavoritesEnabled,\n\t\tsidebarGroupByType,\n\t\tsetRoomList,\n\t\tisDiscussionEnabled,\n\t]);\n\n\treturn roomList;\n};\n",null],"names":["useDebouncedState","useUserPreference","useUserSubscriptions","useSetting","useEffect","useVideoConfIncomingCalls","useOmnichannelEnabled","useQueuedInquiries","useQueryOptions","module","export","useRoomList","query","open","$ne","emptyQueue","roomList","setRoomList","showOmnichannel","sidebarGroupByType","favoritesEnabled","isDiscussionEnabled","sidebarShowUnread","options","rooms","inquiries","incomingCalls","queue","enabled","incomingCall","Set","favorite","team","omnichannel","unread","channels","direct","discussion","conversation","onHold","forEach","room","archived","find","call","rid","add","alert","hideUnreadStatus","f","teamMain","prid","t","groups","Map","size","set","length","entries","flatMap","_ref","key","group"],"mappings":"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"}