)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/cloud/CloudAnnouncementsRegion.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { BannerPlatform } from '@rocket.chat/core-typings';\nimport { useEndpoint, useStream, useUserId } from '@rocket.chat/ui-contexts';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport React, { useEffect } from 'react';\n\nimport CloudAnnouncementHandler from './CloudAnnouncementHandler';\n\nconst CloudAnnouncementsRegion = () => {\n\tconst uid = useUserId();\n\n\tconst getAnnouncements = useEndpoint('GET', '/v1/banners');\n\n\tconst { isSuccess, data: announcements } = useQuery({\n\t\tqueryKey: ['cloud', 'announcements'],\n\t\tqueryFn: () => getAnnouncements({ platform: BannerPlatform.Web }),\n\t\tselect: (data) => data.banners,\n\t\tenabled: !!uid,\n\t\tstaleTime: 0,\n\t\trefetchInterval: 1000 * 60 * 60 * 24,\n\t});\n\n\tconst subscribeToNotifyLoggedIn = useStream('notify-logged');\n\tconst subscribeToNotifyUser = useStream('notify-user');\n\tconst queryClient = useQueryClient();\n\n\tuseEffect(() => {\n\t\tif (!uid) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromBannerChanged = subscribeToNotifyLoggedIn('banner-changed', async () => {\n\t\t\tqueryClient.invalidateQueries(['cloud', 'announcements']);\n\t\t});\n\n\t\tconst unsubscribeBanners = subscribeToNotifyUser(`${uid}/banners`, async () => {\n\t\t\tqueryClient.invalidateQueries(['cloud', 'announcements']);\n\t\t});\n\n\t\treturn () => {\n\t\t\tunsubscribeFromBannerChanged();\n\t\t\tunsubscribeBanners();\n\t\t};\n\t}, [subscribeToNotifyLoggedIn, uid, subscribeToNotifyUser, queryClient]);\n\n\tif (!isSuccess) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{announcements.map((announcement) => (\n\t\t\t\t<CloudAnnouncementHandler key={announcement._id} {...announcement} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport default CloudAnnouncementsRegion;\n",null],"names":["_extends","BannerPlatform","useEndpoint","useStream","useUserId","useQuery","useQueryClient","React","useEffect","CloudAnnouncementHandler","module","default","link","exportDefault","uid","getAnnouncements","isSuccess","data","announcements","queryKey","queryFn","platform","Web","select","banners","enabled","staleTime","refetchInterval","subscribeToNotifyLoggedIn","subscribeToNotifyUser","queryClient","unsubscribeFromBannerChanged","invalidateQueries","unsubscribeBanners","concat","createElement","Fragment","map","announcement","key","_id"],"mappings":"2BAAAA,EAAAC,EAA2DC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAlDC,EAAAA,IAAc,CAAE,iCAAiC,CAACC,QAAAA,CAAAA,EAAAX,EAAAA,CAAA,CAAA,EAAA,GAAlDU,EAAgBE,IAAA,CAAM,4BAA4B,CAAAX,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAR,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAL,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAAC,QAAAA,CAAAA,EAAAJ,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,6BAAAA,CAAAC,QAAAA,CAAAA,EAAAF,EAAAA,CAAA,CAAA,EAAA,GAA3DC,EAAOG,aAAE,CAOwB,KAChC,IAAMC,EAAMV,IAENW,EAAmBb,EAAY,MAAO,eAEtC,CAAEc,UAAAA,CAAS,CAAEC,KAAMC,CAAAA,CAAe,CAAGb,EAAS,CACnDc,SAAU,CAAC,QAAS,gBAAgB,CACpCC,QAAS,IAAML,EAAiB,CAAEM,SAAUpB,EAAeqB,GAAAA,AAAG,GAC9DC,OAASN,GAASA,EAAKO,OAAO,CAC9BC,QAAS,CAAC,CAACX,EACXY,UAAW,EACXC,gBAAiB,QAGZC,EAA4BzB,EAAU,iBACtC0B,EAAwB1B,EAAU,eAClC2B,EAAcxB,UAqBpB,CAnBAE,EAAU,KACT,GAAI,CAACM,EACJ,OAGD,IAAMiB,EAA+BH,EAA0B,iBAAkB,UAChFE,EAAYE,iBAAiB,CAAC,CAAC,QAAS,gBAAgB,CACzD,GAEMC,EAAqBJ,EAAqB,GAAAK,MAAA,CAAIpB,EAAG,YAAY,UAClEgB,EAAYE,iBAAiB,CAAC,CAAC,QAAS,gBAAgB,CACzD,GAEA,MAAO,KACND,IACAE,GACD,CACD,EAAG,CAACL,EAA2Bd,EAAKe,EAAuBC,EAAY,EAElEd,GAKJT,EAAA4B,aAAA,CAAA5B,EAAA6B,QAAA,CAAA,KACElB,EAAcmB,GAAG,CAAEC,GACnB/B,EAAA4B,aAAA,CAAC1B,EAAwBT,EAAA,CAACuC,IAAKD,EAAaE,GAAAA,AAAI,EAAKF,MANhD,IAUT"}