)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/oauth/hooks/useOAuthAppQuery.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IOAuthApps } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport type { UseQueryOptions } from '@tanstack/react-query';\nimport { useQuery } from '@tanstack/react-query';\n\ntype UseOAuthAppQueryOptions = Omit<\n\tUseQueryOptions<IOAuthApps, unknown, IOAuthApps, readonly ['oauth-app', { readonly clientId: string | undefined }]>,\n\t'queryKey' | 'queryFn'\n>;\n\nexport const useOAuthAppQuery = (clientId: string | undefined, options?: UseOAuthAppQueryOptions) => {\n\tconst getOAuthApp = useEndpoint('GET', '/v1/oauth-apps.get');\n\n\treturn useQuery(\n\t\t['oauth-app', { clientId }] as const,\n\t\tasync () => {\n\t\t\tif (!clientId) {\n\t\t\t\tthrow new Error('Invalid OAuth client');\n\t\t\t}\n\n\t\t\tconst { oauthApp } = await getOAuthApp({ clientId });\n\t\t\treturn {\n\t\t\t\t...oauthApp,\n\t\t\t\t_createdAt: new Date(oauthApp._createdAt),\n\t\t\t\t_updatedAt: new Date(oauthApp._updatedAt),\n\t\t\t};\n\t\t},\n\t\toptions,\n\t);\n};\n",null],"names":["_objectSpread","useEndpoint","useQuery","module","link","default","export","useOAuthAppQuery","clientId","options","getOAuthApp","Error","oauthApp","_createdAt","Date","_updatedAt"],"mappings":"2BACAA,EAAuDC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAA,CAAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAvDG,EAAOG,MAAE,CAAA,CAAAC,iBAAmB,IAAAA,CAAA,GAA2BJ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAF,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAD,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAShD,IAAMK,EAAmB,CAACC,EAA8BC,KAC9D,IAAMC,EAAcT,EAAY,MAAO,sBAEvC,OAAOC,EACN,CAAC,YAAa,CAAEM,SAAAA,CAAQ,EAAY,CACpC,UACC,GAAI,CAACA,EACJ,MAAM,AAAIG,MAAM,wBAGjB,GAAM,CAAEC,SAAAA,CAAAA,CAAU,CAAG,MAAMF,EAAY,CAAEF,SAAAA,CAAQ,GACjD,OAAAR,EAAAA,EAAA,CAAA,EACIY,GAAQ,CAAA,EAAA,CACXC,WAAY,IAAIC,KAAKF,EAASC,UAAU,EACxCE,WAAY,IAAID,KAAKF,EAASG,UAAU,CAAC,EAE3C,EACAN,EAEF"}