function module(e,a,t){let i,r,s,n,l,o,u,c,d,g,m,_,v,k,p,y,S,h,w,b,z,f;t.link("@babel/runtime/helpers/objectSpread2",{default(e){i=e}},0),t.link("@rocket.chat/fuselage-hooks",{useMutableCallback(e){r=e}},0),t.link("@rocket.chat/ui-contexts",{useToastMessageDispatch(e){s=e},useSessionDispatch(e){n=e},useLoginWithPassword(e){l=e},useSettingSetValue(e){o=e},useSettingsDispatch(e){u=e},useMethod(e){c=e},useEndpoint(e){d=e},useTranslation(e){g=e}},1),t.link("meteor/meteor",{Meteor(e){m=e}},2),t.link("react",{default(e){_=e},useCallback(e){v=e},useMemo(e){k=e},useState(e){p=e}},3),t.link("../../../../lib/callbacks",{callbacks(e){y=e}},4),t.link("../../../../lib/emailValidator",{validateEmail(e){S=e}},5),t.link("../../../hooks/useLicense",{useInvalidateLicense(e){h=e}},6),t.link("../../../lib/queryClient",{queryClient(e){w=e}},7),t.link("../contexts/SetupWizardContext",{SetupWizardContext(e){b=e}},8),t.link("../hooks/useParameters",{useParameters(e){z=e}},9),t.link("../hooks/useStepRouting",{useStepRouting(e){f=e}},10);let C={organizationData:{organizationName:"",organizationIndustry:"",organizationSize:"",country:""},serverData:{agreement:!1,email:"",updates:!1},registrationData:{cloudEmail:"",device_code:"",user_code:""}};t.exportDefault(e=>{let{children:a}=e,t=h(),E=g(),[R,D]=p(C),[x,M]=f(),{isSuccess:P,data:A}=z(),I=s(),W=u(),L=o("Show_Setup_Wizard"),T=c("registerUser"),O=c("setUsername"),q=l(),N=n("forceLogin"),U=d("POST","/v1/cloud.createRegistrationIntent"),V=v(()=>M(e=>e-1),[M]),j=v(()=>M(e=>e+1),[M]),Q=v(e=>M(()=>e),[M]),Y=v(e=>!!S(e)||E("Invalid_email"),[E]),B=v(async e=>{let{fullname:a,username:t,email:i,password:r}=e;await T({name:a,username:t,email:i,pass:r}),y.run("userRegistered",{});try{await q(i,r)}catch(e){if(e instanceof m.Error&&"error-invalid-email"===e.error){I({type:"success",message:E("We_have_sent_registration_email")});return}throw(e instanceof Error||"string"==typeof e)&&I({type:"error",message:e}),e}N(!1),await O(t),await W([{_id:"Organization_Email",value:i}]),y.run("usernameSet",{})},[T,N,O,W,q,I,E]),F=v(async e=>{await W([{_id:"Cloud_Service_Agree_PrivacyTerms",value:e}])},[W]),G=v(async()=>{let{serverData:{updates:e,agreement:a}}=R;await W([{_id:"Register_Server",value:!0},{_id:"Allow_Marketing_Emails",value:e}]),await F(a)},[W,F,R]),H=v(async e=>{let{organizationName:a,organizationIndustry:t,organizationSize:i,country:r}=e;await W([{_id:"Country",value:r},{_id:"Industry",value:t},{_id:"Size",value:i},{_id:"Organization_Name",value:a}])},[W]),J=r(async e=>{let{email:a,resend:r=!1}=e;try{let{intentData:e}=await U({resend:r,email:a});t(100),w.invalidateQueries(["getRegistrationStatus"]),D(t=>i(i({},t),{},{registrationData:i(i({},e),{},{cloudEmail:a})})),Q(4),L("in_progress")}catch(e){I({type:"error",message:E("Cloud_register_error")})}}),K=r(async()=>(I({type:"success",message:E("Your_workspace_is_ready")}),L("completed"))),X=k(()=>({setupWizardData:R,setSetupWizardData:D,currentStep:x,loaded:P,settings:A.settings,skipCloudRegistration:A.serverAlreadyRegistered,goToPreviousStep:V,goToNextStep:j,goToStep:Q,registerAdminUser:B,validateEmail:Y,registerServer:J,saveAgreementData:F,saveWorkspaceData:G,saveOrganizationData:H,completeSetupWizard:K,maxSteps:A.serverAlreadyRegistered?2:4}),[R,x,P,A.settings,A.serverAlreadyRegistered,V,j,Q,B,Y,J,F,G,H,K]);return _.createElement(b.Provider,{value:X},a)})}
//# sourceMappingURL=/dynamic/client/views/setupWizard/providers/585e5903d2eb3ef53805902faceb13c7e463c240.map
