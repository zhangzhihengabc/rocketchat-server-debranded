)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/setupWizard/steps/AdminInfoStep.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { AdminInfoPage } from '@rocket.chat/onboarding-ui';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { useSetting, useTranslation } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, ComponentProps } from 'react';\nimport React from 'react';\n\nimport { useSetupWizardContext } from '../contexts/SetupWizardContext';\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\nconst usernameBlackList = ['all', 'here', 'admin'].map(toRegExp);\nconst hasBlockedName = (username: string): boolean =>\n\t!!usernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(escapeRegExp(username).trim()));\n\nconst AdminInfoStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst regexpForUsernameValidation = useSetting('UTF8_User_Names_Validation');\n\tconst usernameRegExp = new RegExp(`^${regexpForUsernameValidation}$`);\n\n\tconst { currentStep, validateEmail, registerAdminUser, maxSteps } = useSetupWizardContext();\n\n\t// TODO: check if username exists\n\tconst validateUsername = (username: string): boolean | string => {\n\t\tif (!usernameRegExp.test(username) || hasBlockedName(username)) {\n\t\t\treturn t('Invalid_username');\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst handleSubmit: ComponentProps<typeof AdminInfoPage>['onSubmit'] = async (data) => {\n\t\tregisterAdminUser(data);\n\t};\n\n\treturn (\n\t\t<AdminInfoPage\n\t\t\tvalidatePassword={(password): boolean => password.length > 0}\n\t\t\tpasswordRulesHint=''\n\t\t\tvalidateUsername={validateUsername}\n\t\t\tvalidateEmail={validateEmail}\n\t\t\tcurrentStep={currentStep}\n\t\t\tstepCount={maxSteps}\n\t\t\tonSubmit={handleSubmit}\n\t\t/>\n\t);\n};\n\nexport default AdminInfoStep;\n",null],"names":["AdminInfoPage","escapeRegExp","useSetting","useTranslation","React","useSetupWizardContext","module","link","default","usernameBlackList","map","username","RegExp","concat","trim","hasBlockedName","length","some","restrictedUsername","test","exportDefault","t","regexpForUsernameValidation","usernameRegExp","currentStep","validateEmail","registerAdminUser","maxSteps","handleSubmit","data","createElement","validatePassword","password","passwordRulesHint","validateUsername","stepCount","onSubmit"],"mappings":"2BAAAA,EAA2DC,EAAAC,EAAAC,EAAAC,EAAAC,EAAlDC,EAAeC,IAAA,CAAM,6BAA6B,CAAAP,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAL,aAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAJ,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,QAAAA,CAAAE,QAAAA,CAAAA,EAAAJ,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,iCAAAA,CAAAD,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAS3D,IAAMI,EAAoB,CAAC,MAAO,OAAQ,QAAQ,CAACC,GAAG,CADpCC,GAA6B,AAAIC,OAAM,IAAAC,MAAA,CAAKZ,EAAaU,GAAUG,IAAI,GAAE,KAAK,MAE1FC,EAAkBJ,GACvB,CAAC,CAACF,EAAkBO,MAAM,EAAIP,EAAkBQ,IAAI,CAAEC,GAAuBA,EAAmBC,IAAI,CAAClB,EAAaU,GAAUG,IAAI,KAXjIR,EAAOc,aAAE,CAaa,KACrB,IAAMC,EAAIlB,IACJmB,EAA8BpB,EAAW,8BACzCqB,EAAiB,IAAIX,OAAM,IAAAC,MAAA,CAAKS,EAA2B,MAE3D,CAAEE,YAAAA,CAAW,CAAEC,cAAAA,CAAa,CAAEC,kBAAAA,CAAiB,CAAEC,SAAAA,CAAAA,CAAU,CAAGtB,IAW9DuB,EAAiE,MAAOC,IAC7EH,EAAkBG,EACnB,EAEA,OACCzB,EAAA0B,aAAA,CAAC9B,EAAa,CACb+B,iBAAmBC,GAAsBA,EAAShB,MAAM,CAAG,EAC3DiB,kBAAkB,GAClBC,iBAhBwBvB,GACzB,CAAI,CAAA,CAACY,EAAeJ,IAAI,CAACR,IAAaI,EAAeJ,EAAQ,GACrDU,EAAE,oBAeTI,cAAeA,EACfD,YAAaA,EACbW,UAAWR,EACXS,SAAUR,CAAa,EAG1B"}