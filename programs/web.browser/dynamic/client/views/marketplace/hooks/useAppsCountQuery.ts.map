)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/marketplace/hooks/useAppsCountQuery.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useCallback } from 'react';\n\ntype Variant = 'success' | 'warning' | 'danger';\n\nconst getProgressBarValues = (numberOfEnabledApps: number, enabledAppsLimit: number): { variant: Variant; percentage: number } => ({\n\tvariant: 'success',\n\t...(numberOfEnabledApps + 1 === enabledAppsLimit && { variant: 'warning' }),\n\t...(numberOfEnabledApps >= enabledAppsLimit && { variant: 'danger' }),\n\tpercentage: Math.round((numberOfEnabledApps / enabledAppsLimit) * 100),\n});\n\nexport type MarketplaceRouteContext = 'private' | 'explore' | 'installed' | 'premium' | 'requested';\n\nexport function isMarketplaceRouteContext(context: string): context is MarketplaceRouteContext {\n\treturn ['private', 'explore', 'installed', 'premium', 'requested'].includes(context);\n}\n\nexport const useAppsCountQuery = (context: MarketplaceRouteContext) => {\n\tconst getAppsCount = useEndpoint('GET', '/apps/count');\n\n\treturn useQuery(\n\t\t['apps/count', context],\n\t\tasync () => {\n\t\t\tconst data = await getAppsCount();\n\n\t\t\tconst numberOfEnabledApps = context === 'private' ? data.totalPrivateEnabled : data.totalMarketplaceEnabled;\n\t\t\tconst enabledAppsLimit = context === 'private' ? data.maxPrivateApps : data.maxMarketplaceApps;\n\t\t\tconst hasUnlimitedApps = enabledAppsLimit === -1;\n\t\t\treturn {\n\t\t\t\thasUnlimitedApps,\n\t\t\t\tenabled: numberOfEnabledApps,\n\t\t\t\tlimit: enabledAppsLimit,\n\t\t\t\t...getProgressBarValues(numberOfEnabledApps, enabledAppsLimit),\n\t\t\t};\n\t\t},\n\t\t{ staleTime: 10_000 },\n\t);\n};\n\nexport const useInvalidateAppsCountQueryCallback = () => {\n\tconst queryClient = useQueryClient();\n\treturn useCallback(() => {\n\t\tqueryClient.invalidateQueries(['apps/count']);\n\t}, [queryClient]);\n};\n",null],"names":["_objectSpread","useEndpoint","useQueryClient","useQuery","useCallback","module","link","default","export","isMarketplaceRouteContext","useAppsCountQuery","useInvalidateAppsCountQueryCallback","getProgressBarValues","numberOfEnabledApps","enabledAppsLimit","variant","percentage","Math","round","context","includes","getAppsCount","data","totalPrivateEnabled","totalMarketplaceEnabled","maxPrivateApps","maxMarketplaceApps","hasUnlimitedApps","enabled","limit","staleTime","queryClient","invalidateQueries"],"mappings":"2BAAAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAA,CAAAA,EAAAP,EAAAA,CAAA,CAAA,EAAA,GAAvDK,EAAOG,MAAE,CAAA,CAAAC,0BAAmB,IAAAA,EAA2BC,kBAAAA,IAAAA,EAAAC,oCAAAA,IAAAA,CAAA,GAAAN,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAJ,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAH,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,QAAAA,CAAAD,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAMvD,IAAMQ,EAAuB,CAACC,EAA6BC,IAAwBd,EAAAA,EAAAA,EAAA,CAClFe,QAAS,SAAS,EACdF,EAAsB,IAAMC,GAAoB,CAAEC,QAAS,SAAS,GACpEF,GAAuBC,GAAoB,CAAEC,QAAS,QAAQ,GAAE,CAAA,EAAA,CACpEC,WAAYC,KAAKC,KAAK,CAAEL,EAAsBC,EAAoB,IAAI,GAKjE,SAAUL,EAA0BU,CAAe,EACxD,MAAO,CAAC,UAAW,UAAW,YAAa,UAAW,YAAY,CAACC,QAAQ,CAACD,EAC7E,CAEO,IAAMT,EAAqBS,IACjC,IAAME,EAAepB,EAAY,MAAO,eAExC,OAAOE,EACN,CAAC,aAAcgB,EAAQ,CACvB,UACC,IAAMG,EAAO,MAAMD,IAEbR,EAAsBM,AAAY,YAAZA,EAAwBG,EAAKC,mBAAmB,CAAGD,EAAKE,uBAAuB,CACrGV,EAAmBK,AAAY,YAAZA,EAAwBG,EAAKG,cAAc,CAAGH,EAAKI,kBAAkB,CACxFC,EAAmBb,AAAqB,KAArBA,EACzB,OAAAd,EAAA,CACC2B,iBAAAA,EACAC,QAASf,EACTgB,MAAOf,CAAgB,EACpBF,EAAqBC,EAAqBC,GAE/C,EACA,CAAEgB,UAAW,GAAM,EAErB,EAEanB,EAAsC,KAClD,IAAMoB,EAAc7B,IACpB,OAAOE,EAAY,KAClB2B,EAAYC,iBAAiB,CAAC,CAAC,aAAa,CAC7C,EAAG,CAACD,EAAY,CACjB"}