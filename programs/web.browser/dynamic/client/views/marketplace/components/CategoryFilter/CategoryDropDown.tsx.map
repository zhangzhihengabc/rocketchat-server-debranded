)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/marketplace/components/CategoryFilter/CategoryDropDown.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { Button } from '@rocket.chat/fuselage';\nimport { useToggle } from '@rocket.chat/fuselage-hooks';\nimport type { ComponentProps, ReactElement } from 'react';\nimport React, { useRef, useCallback } from 'react';\n\nimport type { CategoryDropdownItem, CategoryDropDownListProps } from '../../definitions/CategoryDropdownDefinitions';\nimport { isValidReference } from '../../helpers/isValidReference';\nimport { onMouseEventPreventSideEffects } from '../../helpers/onMouseEventPreventSideEffects';\nimport DropDownListWrapper from '../DropDownListWrapper';\nimport CategoryDropDownAnchor from './CategoryDropDownAnchor';\nimport CategoryDropDownList from './CategoryDropDownList';\n\ntype CategoryDropDownProps = {\n\tcategories: CategoryDropDownListProps['categories'];\n\tonSelected: CategoryDropDownListProps['onSelected'];\n\tselectedCategories: (CategoryDropdownItem & { checked: true })[];\n} & ComponentProps<typeof Button>;\n\nconst CategoryDropDown = ({ categories, onSelected, selectedCategories, ...props }: CategoryDropDownProps): ReactElement => {\n\tconst reference = useRef<HTMLInputElement>(null);\n\tconst [collapsed, toggleCollapsed] = useToggle(false);\n\n\tconst onClose = useCallback(\n\t\t(e) => {\n\t\t\tif (isValidReference(reference, e)) {\n\t\t\t\ttoggleCollapsed(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonMouseEventPreventSideEffects(e);\n\t\t},\n\t\t[toggleCollapsed],\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<CategoryDropDownAnchor\n\t\t\t\tref={reference}\n\t\t\t\tonClick={toggleCollapsed as any}\n\t\t\t\tselectedCategoriesCount={selectedCategories.length}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{collapsed && (\n\t\t\t\t<DropDownListWrapper ref={reference} onClose={onClose}>\n\t\t\t\t\t<CategoryDropDownList categories={categories} onSelected={onSelected} />\n\t\t\t\t</DropDownListWrapper>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default CategoryDropDown;\n",null],"names":["_extends","_objectWithoutProperties","useToggle","React","useRef","useCallback","isValidReference","onMouseEventPreventSideEffects","DropDownListWrapper","CategoryDropDownAnchor","CategoryDropDownList","module","link","default","exportDefault","_ref","categories","onSelected","selectedCategories","props","_excluded","reference","collapsed","toggleCollapsed","onClose","e","createElement","Fragment","ref","onClick","selectedCategoriesCount","length"],"mappings":"2BACAA,EAAwDC,EAAxDC,EAAwDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,yDAA/CC,EAAWC,IAAAA,CAAAA,iCAAoC,CAAAC,QAAAA,CAAAA,EAAAb,EAAAA,CAAA,CAAA,EAAA,GAAAW,EAAAA,IAAAA,CAAAA,iDAAAA,CAAAE,QAAAA,CAAAA,EAAAZ,EAAAA,CAAA,CAAA,EAAA,GAA/CU,EAAWC,IAAA,CAAM,8BAA8B,CAAAV,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,QAAAA,CAAAE,QAAAA,CAAAA,EAAAV,EAAAA,CAAA,EAAAC,OAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,iCAAAA,CAAAL,iBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,+CAAAA,CAAAJ,+BAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,yBAAAA,CAAAE,QAAAA,CAAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAE,QAAAA,CAAAA,EAAAJ,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,yBAAAA,CAAAE,QAAAA,CAAAA,EAAAH,EAAAA,CAAA,CAAA,EAAA,GAAxDC,EAAOG,aAAa,CAiBKC,IAAkG,GAAjG,CAAEC,WAAAA,CAAU,CAAEC,WAAAA,CAAU,CAAEC,mBAAAA,CAAAA,CAAqD,CAAAH,EAA9BI,EAAKlB,EAAAc,EAAAK,GACzEC,EAAYjB,EAAyB,MACrC,CAACkB,EAAWC,EAAgB,CAAGrB,EAAU,CAAA,GAEzCsB,EAAUnB,EACdoB,IACA,GAAInB,EAAiBe,EAAWI,GAAI,CACnCF,EAAgB,CAAA,GAChB,OAGDhB,EAA+BkB,EAChC,EACA,CAACF,EAAgB,EAGlB,OACCpB,EAAAuB,aAAA,CAAAvB,EAAAwB,QAAA,CAAA,KACCxB,EAAAuB,aAAA,CAACjB,EAAsBT,EAAA,CACtB4B,IAAKP,EACLQ,QAASN,EACTO,wBAAyBZ,EAAmBa,MAAAA,AAAO,EAC/CZ,IAEJG,GACAnB,EAAAuB,aAAA,CAAClB,EAAmB,CAACoB,IAAKP,EAAWG,QAASA,CAAQ,EACrDrB,EAAAuB,aAAA,CAAChB,EAAoB,CAACM,WAAYA,EAAYC,WAAYA,CAAW,IAK1E"}