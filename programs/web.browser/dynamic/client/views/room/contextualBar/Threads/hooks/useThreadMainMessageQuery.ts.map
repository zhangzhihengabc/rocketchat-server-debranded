)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/Threads/hooks/useThreadMainMessageQuery.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, IThreadMainMessage } from '@rocket.chat/core-typings';\nimport { useStream } from '@rocket.chat/ui-contexts';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { withDebouncing } from '../../../../../../lib/utils/highOrderFunctions';\nimport type { FieldExpression, Query } from '../../../../../lib/minimongo';\nimport { createFilterFromQuery } from '../../../../../lib/minimongo';\nimport { useRoom } from '../../../contexts/RoomContext';\nimport { useGetMessageByID } from './useGetMessageByID';\n\ntype RoomMessagesRidEvent = IMessage;\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users?.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nconst useSubscribeToMessage = () => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\treturn useCallback(\n\t\t(message: IMessage, { onMutate, onDelete }: { onMutate?: (message: IMessage) => void; onDelete?: () => void }) => {\n\t\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages(message.rid, (event: RoomMessagesRidEvent) => {\n\t\t\t\tif (message._id === event._id) onMutate?.(event);\n\t\t\t});\n\n\t\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom(`${message.rid}/deleteMessage`, (event) => {\n\t\t\t\tif (message._id === event._id) onDelete?.();\n\t\t\t});\n\n\t\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(`${message.rid}/deleteMessageBulk`, (params) => {\n\t\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\t\tif (matchDeleteCriteria(message)) onDelete?.();\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tunsubscribeFromRoomMessages();\n\t\t\t\tunsubscribeFromDeleteMessage();\n\t\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t\t};\n\t\t},\n\t\t[subscribeToNotifyRoom, subscribeToRoomMessages],\n\t);\n};\n\nexport const useThreadMainMessageQuery = (\n\ttmid: IMessage['_id'],\n\t{ onDelete }: { onDelete?: () => void } = {},\n): UseQueryResult<IThreadMainMessage, Error> => {\n\tconst room = useRoom();\n\n\tconst getMessage = useGetMessageByID();\n\tconst subscribeToMessage = useSubscribeToMessage();\n\n\tconst queryClient = useQueryClient();\n\tconst unsubscribeRef = useRef<(() => void) | undefined>();\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tunsubscribeRef.current?.();\n\t\t\tunsubscribeRef.current = undefined;\n\t\t};\n\t}, [tmid]);\n\n\treturn useQuery(['rooms', room._id, 'threads', tmid, 'main-message'] as const, async ({ queryKey }) => {\n\t\tconst mainMessage = await getMessage(tmid);\n\n\t\tif (!mainMessage) {\n\t\t\tthrow new Error('Invalid main message');\n\t\t}\n\n\t\tconst debouncedInvalidate = withDebouncing({ wait: 10000 })(() => {\n\t\t\tqueryClient.invalidateQueries(queryKey, { exact: true });\n\t\t});\n\n\t\tunsubscribeRef.current =\n\t\t\tunsubscribeRef.current ||\n\t\t\tsubscribeToMessage(mainMessage, {\n\t\t\t\tonMutate: (message) => {\n\t\t\t\t\tqueryClient.setQueryData(queryKey, () => message);\n\t\t\t\t\tdebouncedInvalidate();\n\t\t\t\t},\n\t\t\t\tonDelete: () => {\n\t\t\t\t\tonDelete?.();\n\t\t\t\t\tqueryClient.invalidateQueries(queryKey, { exact: true });\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn mainMessage;\n\t});\n};\n",null],"names":["useStream","useQueryClient","useQuery","useCallback","useEffect","useRef","withDebouncing","createFilterFromQuery","useRoom","useGetMessageByID","module","export","useThreadMainMessageQuery","createDeleteCriteria","params","_params$users","query","ts","excludePinned","pinned","$ne","ignoreDiscussion","drid","$exists","users","length","$in","useSubscribeToMessage","subscribeToRoomMessages","subscribeToNotifyRoom","message","_ref","onMutate","onDelete","unsubscribeFromRoomMessages","rid","event","_id","unsubscribeFromDeleteMessage","concat","unsubscribeFromDeleteMessageBulk","matchDeleteCriteria","tmid","arguments","undefined","room","getMessage","subscribeToMessage","queryClient","unsubscribeRef","_unsubscribeRef$curre","current","call","_ref2","queryKey","mainMessage","Error","debouncedInvalidate","wait","invalidateQueries","exact","setQueryData"],"mappings":"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"}