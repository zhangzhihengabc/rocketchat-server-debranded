)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/Threads/hooks/useThreadsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useMemo } from 'react';\n\nimport { useScrollableMessageList } from '../../../../../hooks/lists/useScrollableMessageList';\nimport { useStreamUpdatesForMessageList } from '../../../../../hooks/lists/useStreamUpdatesForMessageList';\nimport type { ThreadsListOptions } from '../../../../../lib/lists/ThreadsList';\nimport { ThreadsList } from '../../../../../lib/lists/ThreadsList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\n\nexport const useThreadsList = (\n\toptions: ThreadsListOptions,\n\tuid: IUser['_id'] | null,\n): {\n\tthreadsList: ThreadsList;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst threadsList = useMemo(() => new ThreadsList(options), [options]);\n\n\tconst getThreadsList = useEndpoint('GET', '/v1/chat.getThreadsList');\n\n\tconst fetchMessages = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { threads, total } = await getThreadsList({\n\t\t\t\trid: options.rid,\n\t\t\t\ttype: options.type,\n\t\t\t\ttext: options.text,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: threads,\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getThreadsList, options.rid, options.text, options.type],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableMessageList(\n\t\tthreadsList,\n\t\tfetchMessages,\n\t\tuseMemo(() => parseInt(`${getConfig('threadsListSize', 10)}`), []),\n\t);\n\tuseStreamUpdatesForMessageList(threadsList, uid, options.rid);\n\n\treturn {\n\t\tthreadsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["useEndpoint","useCallback","useMemo","useScrollableMessageList","useStreamUpdatesForMessageList","ThreadsList","getConfig","module","export","useThreadsList","options","uid","threadsList","getThreadsList","fetchMessages","start","end","threads","total","rid","type","text","offset","count","items","itemCount","loadMoreItems","initialItemCount","parseInt","concat"],"mappings":"2BACuDA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAvDC,EAAOC,MAAE,CAAA,CAAAC,eAAmB,IAAAA,CAAA,GAA2BF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAP,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAO,EAAAA,IAAAA,CAAAA,QAAAA,CAAAN,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,sDAAAA,CAAAJ,yBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,4DAAAA,CAAAH,+BAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAF,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,qCAAAA,CAAAD,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAShD,IAAMG,EAAiB,CAC7BC,EACAC,KAMA,IAAMC,EAAcV,EAAQ,IAAM,IAAIG,EAAYK,GAAU,CAACA,EAAQ,EAE/DG,EAAiBb,EAAY,MAAO,2BAEpCc,EAAgBb,EACrB,MAAOc,EAAOC,KACb,GAAM,CAAEC,QAAAA,CAAO,CAAEC,MAAAA,CAAAA,CAAO,CAAG,MAAML,EAAe,CAC/CM,IAAKT,EAAQS,GAAG,CAChBC,KAAMV,EAAQU,IAAI,CAClBC,KAAMX,EAAQW,IAAI,CAClBC,OAAQP,EACRQ,MAAOP,IAGR,MAAO,CACNQ,MAAOP,EACPQ,UAAWP,EAEb,EACA,CAACL,EAAgBH,EAAQS,GAAG,CAAET,EAAQW,IAAI,CAAEX,EAAQU,IAAI,CAAC,EAGpD,CAAEM,cAAAA,CAAa,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGxB,EAC3CS,EACAE,EACAZ,EAAQ,IAAM0B,SAAQ,GAAAC,MAAA,CAAIvB,EAAU,kBAAmB,MAAQ,EAAE,GAIlE,OAFAF,EAA+BQ,EAAaD,EAAKD,EAAQS,GAAG,EAErD,CACNP,YAAAA,EACAc,cAAAA,EACAC,iBAAAA,EAEF"}