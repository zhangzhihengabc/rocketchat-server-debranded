)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/Info/hooks/actions/useRoomMoveToTeam.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { isRoomFederated } from '@rocket.chat/core-typings';\nimport type { IRoom } from '@rocket.chat/core-typings';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport { useSetModal, useToastMessageDispatch, useTranslation, useEndpoint } from '@rocket.chat/ui-contexts';\nimport React from 'react';\n\nimport ChannelToTeamModal from '../../ChannelToTeamModal';\nimport { useCanEditRoom } from '../useCanEditRoom';\n\nexport const useRoomMoveToTeam = (room: IRoom) => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst canEdit = useCanEditRoom(room);\n\tconst canMoveToTeam = !isRoomFederated(room) && !room.teamId && !room.prid && canEdit;\n\n\tconst moveChannelToTeam = useEndpoint('POST', '/v1/teams.addRooms');\n\n\tconst handleMoveToTeam = useMutableCallback(async () => {\n\t\tconst onConfirm = async (teamId: IRoom['teamId']) => {\n\t\t\tif (!teamId) {\n\t\t\t\tthrow new Error('teamId not provided');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait moveChannelToTeam({ rooms: [room._id], teamId });\n\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Rooms_added_successfully') });\n\t\t\t} catch (error) {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetModal(null);\n\t\t\t}\n\t\t};\n\n\t\tsetModal(<ChannelToTeamModal onCancel={() => setModal(null)} onConfirm={onConfirm} />);\n\t});\n\n\treturn canMoveToTeam ? handleMoveToTeam : null;\n};\n",null],"names":["isRoomFederated","useMutableCallback","useSetModal","useToastMessageDispatch","useTranslation","useEndpoint","React","ChannelToTeamModal","useCanEditRoom","module","export","useRoomMoveToTeam","default","room","t","setModal","dispatchToastMessage","canEdit","canMoveToTeam","teamId","prid","moveChannelToTeam","handleMoveToTeam","onConfirm","Error","rooms","_id","type","message","error","createElement","onCancel"],"mappings":"2BAA4DA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA5DC,EAAOC,MAAE,CAAA,CAAAC,kBAAuB,IAAAA,CAAA,GAA4BF,EAAAA,IAAAA,CAAAA,4BAAAA,CAAAT,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAR,mBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAQ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAP,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAAG,QAAAA,CAAAA,EAAAN,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAG,QAAAA,CAAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,oBAAAA,CAAAD,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GASrD,IAAMG,EAAqBE,IACjC,IAAMC,EAAIV,IACJW,EAAWb,IACXc,EAAuBb,IAEvBc,EAAUT,EAAeK,GACzBK,EAAgB,CAAClB,EAAgBa,IAAS,CAACA,EAAKM,MAAM,EAAI,CAACN,EAAKO,IAAI,EAAIH,EAExEI,EAAoBhB,EAAY,OAAQ,sBAExCiB,EAAmBrB,EAAmB,UAC3C,IAAMsB,EAAY,MAAOJ,IACxB,GAAI,CAACA,EACJ,MAAM,AAAIK,MAAM,uBAGjB,GAAI,CACH,MAAMH,EAAkB,CAAEI,MAAO,CAACZ,EAAKa,GAAG,CAAC,CAAEP,OAAAA,CAAM,GACnDH,EAAqB,CAAEW,KAAM,UAAWC,QAASd,EAAE,2BAA2B,GAC7E,MAAOe,EAAO,CACfb,EAAqB,CAAEW,KAAM,QAASC,QAASC,CAAK,UAC3C,CACTd,EAAS,MAEX,EAEAA,EAAST,EAAAwB,aAAA,CAACvB,EAAkB,CAACwB,SAAU,IAAMhB,EAAS,MAAOQ,UAAWA,CAAU,GACnF,GAEA,OAAOL,EAAgBI,EAAmB,IAC3C"}