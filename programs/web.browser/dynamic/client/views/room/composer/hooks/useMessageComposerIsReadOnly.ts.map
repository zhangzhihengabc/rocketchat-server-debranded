)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/composer/hooks/useMessageComposerIsReadOnly.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { Meteor } from 'meteor/meteor';\nimport { useCallback } from 'react';\n\nimport { useReactiveValue } from '../../../../hooks/useReactiveValue';\nimport { roomCoordinator } from '../../../../lib/rooms/roomCoordinator';\n\nexport const useMessageComposerIsReadOnly = (rid: string, subscription?: ISubscription): boolean => {\n\tconst [isReadOnly, isArchived] = useReactiveValue(\n\t\tuseCallback(\n\t\t\t() => [\n\t\t\t\troomCoordinator.readOnly(rid, Meteor.users.findOne(Meteor.userId() as string, { fields: { username: 1 } }) as IUser),\n\t\t\t\troomCoordinator.archived(rid) || Boolean(subscription && subscription.t === 'd' && subscription.archived),\n\t\t\t],\n\t\t\t[rid, subscription],\n\t\t),\n\t);\n\n\treturn Boolean(isReadOnly || isArchived);\n};\n",null],"names":["Meteor","useCallback","useReactiveValue","roomCoordinator","module","export","useMessageComposerIsReadOnly","rid","subscription","isReadOnly","isArchived","readOnly","users","findOne","userId","fields","username","archived","Boolean","t"],"mappings":"2BACuCA,EAAAC,EAAAC,EAAAC,EAAvCC,EAAOC,MAAE,CAAA,CAAMC,6BAAwB,IAAAA,CAAA,GAAAF,EAAAA,IAAAA,CAAAA,gBAAAA,CAAAJ,OAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAAH,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,qCAAAA,CAAAF,iBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,wCAAAA,CAAAD,gBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAMhC,IAAMG,EAA+B,CAACC,EAAaC,KACzD,GAAM,CAACC,EAAYC,EAAW,CAAGR,EAChCD,EACC,IAAM,CACLE,EAAgBQ,QAAQ,CAACJ,EAAKP,EAAOY,KAAK,CAACC,OAAO,CAACb,EAAOc,MAAM,GAAc,CAAEC,OAAQ,CAAEC,SAAU,CAAC,CAAE,IACvGb,EAAgBc,QAAQ,CAACV,IAAQW,CAAAA,CAAQV,CAAAA,GAAgBA,AAAmB,MAAnBA,EAAaW,CAAC,EAAYX,EAAaS,QAAQ,AAARA,EAChG,CACD,CAACV,EAAKC,EAAa,GAIrB,MAAOU,CAAAA,CAAQT,CAAAA,GAAcC,CAAAA,CAC9B"}