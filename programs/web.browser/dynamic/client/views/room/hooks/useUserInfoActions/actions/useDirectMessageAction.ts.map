)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/hooks/useUserInfoActions/actions/useDirectMessageAction.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, IUser, ISubscription } from '@rocket.chat/core-typings';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport { useTranslation, usePermission, useRoute, useUserSubscription, useUserSubscriptionByName } from '@rocket.chat/ui-contexts';\nimport { useMemo } from 'react';\n\nimport type { UserInfoAction, UserInfoActionType } from '../useUserInfoActions';\n\nconst getShouldOpenDirectMessage = (\n\tcurrentSubscription?: ISubscription,\n\tusernameSubscription?: ISubscription,\n\tcanOpenDirectMessage?: boolean,\n\tusername?: IUser['username'],\n): boolean => {\n\tconst canOpenDm = canOpenDirectMessage || usernameSubscription;\n\tconst directMessageIsNotAlreadyOpen = currentSubscription && currentSubscription.name !== username;\n\treturn (canOpenDm && directMessageIsNotAlreadyOpen) ?? false;\n};\n\nexport const useDirectMessageAction = (user: Pick<IUser, '_id' | 'username'>, rid: IRoom['_id']): UserInfoAction | undefined => {\n\tconst t = useTranslation();\n\tconst usernameSubscription = useUserSubscriptionByName(user.username ?? '');\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst canOpenDirectMessage = usePermission('create-d');\n\tconst directRoute = useRoute('direct');\n\n\tconst shouldOpenDirectMessage = getShouldOpenDirectMessage(\n\t\tcurrentSubscription,\n\t\tusernameSubscription,\n\t\tcanOpenDirectMessage,\n\t\tuser.username,\n\t);\n\n\tconst openDirectMessage = useMutableCallback(\n\t\t() =>\n\t\t\tuser.username &&\n\t\t\tdirectRoute.push({\n\t\t\t\trid: user.username,\n\t\t\t}),\n\t);\n\n\tconst openDirectMessageOption = useMemo(\n\t\t() =>\n\t\t\tshouldOpenDirectMessage\n\t\t\t\t? {\n\t\t\t\t\t\tcontent: t('Direct_Message'),\n\t\t\t\t\t\ticon: 'balloon' as const,\n\t\t\t\t\t\tonClick: openDirectMessage,\n\t\t\t\t\t\ttype: 'communication' as UserInfoActionType,\n\t\t\t\t  }\n\t\t\t\t: undefined,\n\t\t[openDirectMessage, shouldOpenDirectMessage, t],\n\t);\n\n\treturn openDirectMessageOption;\n};\n",null],"names":["useMutableCallback","useTranslation","usePermission","useRoute","useUserSubscription","useUserSubscriptionByName","useMemo","module","export","useDirectMessageAction","getShouldOpenDirectMessage","currentSubscription","usernameSubscription","canOpenDirectMessage","username","_ref","directMessageIsNotAlreadyOpen","name","canOpenDm","user","rid","_user$username","t","directRoute","shouldOpenDirectMessage","openDirectMessage","push","openDirectMessageOption","content","icon","onClick","type","undefined"],"mappings":"2BACiEA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAjEC,EAAOC,MAAE,CAAA,CAAAC,uBAA0B,IAAAA,CAA6B,GAACF,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAP,mBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAO,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,oBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,0BAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,QAAAA,CAAAD,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAMjE,IAAMI,EAA6B,CAClCC,EACAC,EACAC,EACAC,KACY,IAAAC,EAEZ,IAAMC,EAAgCL,GAAuBA,EAAoBM,IAAI,GAAKH,EAC1F,OAAA,AAAkD,OAAlDC,CAAAA,EAAQG,AAFUL,CAAAA,GAAwBD,CAAAA,GAErBI,CAAAA,GAA6BD,AAAA,KAAA,IAAAA,GAAAA,CACnD,EAEaN,EAAyB,CAACU,EAAuCC,KAAiD,IAAAC,EAC9H,IAAMC,EAAIrB,IACJW,EAAuBP,EAAyB,AAAc,OAAdgB,CAAAA,EAACF,EAAKL,QAAQ,AAARA,GAAQO,AAAA,KAAA,IAAAA,EAAAA,EAAI,IAClEV,EAAsBP,EAAoBgB,GAC1CP,EAAuBX,EAAc,YACrCqB,EAAcpB,EAAS,UAEvBqB,EAA0Bd,EAC/BC,EACAC,EACAC,EACAM,EAAKL,QAAQ,EAGRW,EAAoBzB,EACzB,IACCmB,EAAKL,QAAQ,EACbS,EAAYG,IAAI,CAAC,CAChBN,IAAKD,EAAKL,QAAAA,IAIPa,EAA0BrB,EAC/B,IACCkB,EACG,CACAI,QAASN,EAAE,kBACXO,KAAM,UACNC,QAASL,EACTM,KAAM,iBAENC,KAAAA,EACJ,CAACP,EAAmBD,EAAyBF,EAAE,EAGhD,OAAOK,CACR"}