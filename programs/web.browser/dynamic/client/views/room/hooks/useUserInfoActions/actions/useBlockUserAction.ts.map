)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/hooks/useUserInfoActions/actions/useBlockUserAction.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, IUser } from '@rocket.chat/core-typings';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport { useTranslation, useMethod, useToastMessageDispatch, useUserId, useUserSubscription, useUserRoom } from '@rocket.chat/ui-contexts';\nimport { useMemo } from 'react';\n\nimport { getRoomDirectives } from '../../../lib/getRoomDirectives';\nimport type { UserInfoAction } from '../useUserInfoActions';\n\nexport const useBlockUserAction = (user: Pick<IUser, '_id' | 'username'>, rid: IRoom['_id']): UserInfoAction | undefined => {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst currentSubscription = useUserSubscription(rid);\n\tconst ownUserId = useUserId();\n\tconst { _id: uid } = user;\n\tconst room = useUserRoom(rid);\n\n\tif (!room) {\n\t\tthrow Error('Room not provided');\n\t}\n\n\tconst { roomCanBlock } = getRoomDirectives({ room, showingUserId: uid, userSubscription: currentSubscription });\n\n\tconst isUserBlocked = currentSubscription?.blocker;\n\tconst toggleBlock = useMethod(isUserBlocked ? 'unblockUser' : 'blockUser');\n\n\tconst toggleBlockUserAction = useMutableCallback(async () => {\n\t\ttry {\n\t\t\tawait toggleBlock({ rid, blocked: uid });\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'success',\n\t\t\t\tmessage: t(isUserBlocked ? 'User_is_unblocked' : 'User_is_blocked'),\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t});\n\n\tconst toggleBlockUserOption = useMemo(\n\t\t() =>\n\t\t\troomCanBlock && uid !== ownUserId\n\t\t\t\t? {\n\t\t\t\t\t\tcontent: t(isUserBlocked ? 'Unblock' : 'Block'),\n\t\t\t\t\t\ticon: 'ban' as const,\n\t\t\t\t\t\tonClick: toggleBlockUserAction,\n\t\t\t\t  }\n\t\t\t\t: undefined,\n\t\t[isUserBlocked, ownUserId, roomCanBlock, t, toggleBlockUserAction, uid],\n\t);\n\n\treturn toggleBlockUserOption;\n};\n",null],"names":["useMutableCallback","useTranslation","useMethod","useToastMessageDispatch","useUserId","useUserSubscription","useUserRoom","useMemo","getRoomDirectives","module","export","useBlockUserAction","user","rid","t","dispatchToastMessage","currentSubscription","ownUserId","_id","uid","room","Error","roomCanBlock","showingUserId","userSubscription","isUserBlocked","blocker","toggleBlock","toggleBlockUserAction","blocked","type","message","error","toggleBlockUserOption","content","icon","onClick","undefined"],"mappings":"2BACmCA,EAA8BC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAjEC,EAAOC,MAAE,CAAA,CAAAC,mBAAoB,IAAMA,CAAA,GAA8BF,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAT,mBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAR,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,oBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,QAAAA,CAAAF,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,iCAAAA,CAAAD,kBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAO1D,IAAMG,EAAqB,CAACC,EAAuCC,KACzE,IAAMC,EAAIb,IACJc,EAAuBZ,IACvBa,EAAsBX,EAAoBQ,GAC1CI,EAAYb,IACZ,CAAEc,IAAKC,CAAAA,CAAK,CAAGP,EACfQ,EAAOd,EAAYO,GAEzB,GAAI,CAACO,EACJ,MAAMC,MAAM,qBAGb,GAAM,CAAEC,aAAAA,CAAAA,CAAc,CAAGd,EAAkB,CAAEY,KAAAA,EAAMG,cAAeJ,EAAKK,iBAAkBR,CAAmB,GAEtGS,EAAgBT,MAAAA,EAAmB,KAAA,EAAnBA,EAAqBU,OAAO,CAC5CC,EAAczB,EAAUuB,EAAgB,cAAgB,aAExDG,EAAwB5B,EAAmB,UAChD,GAAI,CACH,MAAM2B,EAAY,CAAEd,IAAAA,EAAKgB,QAASV,CAAG,GACrCJ,EAAqB,CACpBe,KAAM,UACNC,QAASjB,EAAEW,EAAgB,oBAAsB,qBAEjD,MAAOO,EAAgB,CACxBjB,EAAqB,CAAEe,KAAM,QAASC,QAASC,CAAK,GAEtD,GAEMC,EAAwB1B,EAC7B,IACCe,GAAgBH,IAAQF,EACrB,CACAiB,QAASpB,EAAEW,EAAgB,UAAY,SACvCU,KAAM,MACNC,QAASR,GAETS,KAAAA,EACJ,CAACZ,EAAeR,EAAWK,EAAcR,EAAGc,EAAuBT,EAAI,EAGxE,OAAOc,CACR"}