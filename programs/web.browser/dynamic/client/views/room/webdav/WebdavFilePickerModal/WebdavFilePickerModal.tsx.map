)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IWebdavNode, IWebdavAccountIntegration } from '@rocket.chat/core-typings';\nimport type { SelectOption } from '@rocket.chat/fuselage';\nimport { Modal, Box, IconButton, Select } from '@rocket.chat/fuselage';\nimport { useMutableCallback, useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport { useMethod, useToastMessageDispatch, useTranslation, useSetModal } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, MouseEvent } from 'react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { fileUploadIsValidContentType } from '../../../../../app/utils/client';\nimport FilterByText from '../../../../components/FilterByText';\nimport { useSort } from '../../../../components/GenericTable/hooks/useSort';\nimport FileUploadModal from '../../modals/FileUploadModal';\nimport FilePickerBreadcrumbs from './FilePickerBreadcrumbs';\nimport WebdavFilePickerGrid from './WebdavFilePickerGrid';\nimport WebdavFilePickerTable from './WebdavFilePickerTable';\nimport { sortWebdavNodes } from './lib/sortWebdavNodes';\n\nexport type WebdavSortOptions = 'name' | 'size' | 'dataModified';\n\ntype WebdavFilePickerModalProps = {\n\tonUpload: (file: File, description?: string) => Promise<void>;\n\tonClose: () => void;\n\taccount: IWebdavAccountIntegration;\n};\n\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst [currentFolder, setCurrentFolder] = useState('/');\n\tconst [parentFolders, setParentFolders] = useState<string[]>([]);\n\tconst [webdavNodes, setWebdavNodes] = useState<IWebdavNode[]>([]);\n\tconst [filterText, setFilterText] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filterText, 500);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n\t\tif (!Array.isArray(nodes) || !nodes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst promises = nodes\n\t\t\t.map((node, index) => {\n\t\t\t\tif (node.type !== 'file') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn getWebdavFilePreview(accountId, node.filename)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res?.data) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst imgURL = URL.createObjectURL(blob);\n\t\t\t\t\t\tnodes[index].preview = imgURL;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => e);\n\t\t\t})\n\t\t\t.filter(Boolean);\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => nodes)\n\t\t\t.catch((e) => e);\n\t});\n\n\tconst handleFilterNodes = useCallback(\n\t\t(webdavNodes: IWebdavNode[]): void => {\n\t\t\tconst regex = new RegExp(`\\\\b${debouncedFilter}`, 'i');\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\treturn setWebdavNodes(filteredNodes);\n\t\t},\n\t\t[debouncedFilter],\n\t);\n\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\tonClose();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst parentFolders = currentFolder.split('/').filter((s) => s);\n\n\t\t// determine parent directory to go to\n\t\tlet targetFolder = '/';\n\t\tfor (let i = 0; i <= Number(index); i++) {\n\t\t\ttargetFolder += parentFolders[i];\n\t\t\ttargetFolder += '/';\n\t\t}\n\t\tsetCurrentFolder(targetFolder);\n\t};\n\n\tconst handleBack = (): void => {\n\t\tlet newCurrentFolder = currentFolder;\n\t\t// determine parent directory to go back\n\t\tlet parentFolder = '/';\n\t\tif (newCurrentFolder && newCurrentFolder !== '/') {\n\t\t\tif (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n\t\t\t\tnewCurrentFolder = newCurrentFolder.slice(0, -1);\n\t\t\t}\n\t\t\tparentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n\t\t}\n\t\tsetCurrentFolder(parentFolder);\n\t};\n\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {\n\t\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tonClose();\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await getFileFromWebdav(account._id, webdavNode);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\n\t\t\tsetModal(\n\t\t\t\t<FileUploadModal\n\t\t\t\t\tfileName={webdavNode.basename}\n\t\t\t\t\tonSubmit={(_, description): Promise<void> => uploadFile(file, description)}\n\t\t\t\t\tfile={file}\n\t\t\t\t\tonClose={(): void => setModal(null)}\n\t\t\t\t\tinvalidContentType={Boolean(file.type && !fileUploadIsValidContentType(file.type))}\n\t\t\t\t/>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\thandleGetWebdavFileList();\n\t}, [handleGetWebdavFileList]);\n\n\tuseEffect(() => {\n\t\tsetParentFolders(currentFolder?.split('/').filter((s) => s) || []);\n\t}, [currentFolder]);\n\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>\n\t\t\t\t<Modal.Close title={t('Close')} onClick={onClose} />\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Box display='flex' justifyContent='space-between'>\n\t\t\t\t\t<FilePickerBreadcrumbs parentFolders={parentFolders} handleBreadcrumb={handleBreadcrumb} handleBack={handleBack} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{typeView === 'list' && <IconButton icon='squares' small title={t('Grid_view')} onClick={(): void => setTypeView('grid')} />}\n\t\t\t\t\t\t{typeView === 'grid' && <IconButton icon='th-list' small title={t('List_view')} onClick={(): void => setTypeView('list')} />}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t\t<FilterByText onChange={({ text }): void => setFilterText(text)}>\n\t\t\t\t\t\t{typeView === 'grid' && (\n\t\t\t\t\t\t\t<Select value={sortBy} onChange={(value): void => handleSort(value as WebdavSortOptions)} options={options} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FilterByText>\n\t\t\t\t</Box>\n\t\t\t\t{typeView === 'list' && (\n\t\t\t\t\t<WebdavFilePickerTable\n\t\t\t\t\t\twebdavNodes={webdavNodes}\n\t\t\t\t\t\tsortBy={sortBy}\n\t\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\t\tonSort={handleSort}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{typeView === 'grid' && <WebdavFilePickerGrid webdavNodes={webdavNodes} onNodeClick={handleNodeClick} isLoading={isLoading} />}\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Footer />\n\t\t</Modal>\n\t);\n};\n\nexport default WebdavFilePickerModal;\n",null],"names":["Modal","Box","IconButton","Select","useMutableCallback","useDebouncedValue","useMethod","useToastMessageDispatch","useTranslation","useSetModal","React","useState","useEffect","useCallback","fileUploadIsValidContentType","FilterByText","useSort","FileUploadModal","FilePickerBreadcrumbs","WebdavFilePickerGrid","WebdavFilePickerTable","sortWebdavNodes","module","link","v","default","exportDefault","_ref","onUpload","onClose","account","t","setModal","getWebdavFilePreview","getWebdavFileList","getFileFromWebdav","dispatchToastMessage","typeView","setTypeView","sortBy","sortDirection","setSort","currentFolder","setCurrentFolder","parentFolders","setParentFolders","webdavNodes","setWebdavNodes","filterText","setFilterText","debouncedFilter","isLoading","setIsLoading","showFilePreviews","accountId","nodes","Array","isArray","length","promises","map","node","index","type","filename","then","res","data","blob","Blob","imgURL","URL","createObjectURL","preview","catch","e","filter","Boolean","Promise","all","handleFilterNodes","regex","RegExp","concat","filteredNodes","_ref2","basename","match","handleGetWebdavFileList","result","_id","error","message","_result","nodesWithPreviews","handleNodeClick","webdavNode","handleUpload","uploadFile","file","description","File","mime","createElement","fileName","onSubmit","_","invalidContentType","split","s","handleSort","sortedNodes","Header","Title","name","Close","title","onClick","Content","display","justifyContent","handleBreadcrumb","currentTarget","dataset","targetFolder","i","Number","handleBack","newCurrentFolder","parentFolder","slice","substr","lastIndexOf","icon","small","flexDirection","onChange","_ref3","text","value","options","onSort","onNodeClick","Footer"],"mappings":"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"}