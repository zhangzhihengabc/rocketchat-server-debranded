)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/providers/RoomProvider.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useRouter } from '@rocket.chat/ui-contexts';\nimport type { ReactNode, ContextType, ReactElement } from 'react';\nimport React, { useMemo, memo, useEffect, useCallback } from 'react';\n\nimport { ChatSubscription } from '../../../../app/models/client';\nimport { RoomHistoryManager } from '../../../../app/ui-utils/client';\nimport { UserAction } from '../../../../app/ui/client/lib/UserAction';\nimport { useReactiveQuery } from '../../../hooks/useReactiveQuery';\nimport { useReactiveValue } from '../../../hooks/useReactiveValue';\nimport { RoomManager } from '../../../lib/RoomManager';\nimport { roomCoordinator } from '../../../lib/rooms/roomCoordinator';\nimport RoomNotFound from '../RoomNotFound';\nimport RoomSkeleton from '../RoomSkeleton';\nimport { useRoomRolesManagement } from '../body/hooks/useRoomRolesManagement';\nimport { RoomContext } from '../contexts/RoomContext';\nimport ComposerPopupProvider from './ComposerPopupProvider';\nimport RoomToolboxProvider from './RoomToolboxProvider';\nimport { useRoomQuery } from './hooks/useRoomQuery';\n\ntype RoomProviderProps = {\n\tchildren: ReactNode;\n\trid: IRoom['_id'];\n};\n\nconst RoomProvider = ({ rid, children }: RoomProviderProps): ReactElement => {\n\tuseRoomRolesManagement(rid);\n\n\tconst { data: room, isSuccess } = useRoomQuery(rid);\n\n\t// TODO: the following effect is a workaround while we don't have a general and definitive solution for it\n\tconst router = useRouter();\n\tuseEffect(() => {\n\t\tif (isSuccess && !room) {\n\t\t\trouter.navigate('/home');\n\t\t}\n\t}, [isSuccess, room, router]);\n\n\tconst subscriptionQuery = useReactiveQuery(['subscriptions', { rid }], () => ChatSubscription.findOne({ rid }) ?? null);\n\n\tconst pseudoRoom = useMemo(() => {\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...subscriptionQuery.data,\n\t\t\t...room,\n\t\t\tname: roomCoordinator.getRoomName(room.t, room),\n\t\t\tfederationOriginalName: room.name,\n\t\t};\n\t}, [room, subscriptionQuery.data]);\n\n\tconst { hasMorePreviousMessages, hasMoreNextMessages, isLoadingMoreMessages } = useReactiveValue(\n\t\tuseCallback(() => {\n\t\t\tconst { hasMore, hasMoreNext, isLoading } = RoomHistoryManager.getRoom(rid);\n\n\t\t\treturn {\n\t\t\t\thasMorePreviousMessages: hasMore.get(),\n\t\t\t\thasMoreNextMessages: hasMoreNext.get(),\n\t\t\t\tisLoadingMoreMessages: isLoading.get(),\n\t\t\t};\n\t\t}, [rid]),\n\t);\n\n\tconst context = useMemo((): ContextType<typeof RoomContext> => {\n\t\tif (!pseudoRoom) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\trid,\n\t\t\troom: pseudoRoom,\n\t\t\tsubscription: subscriptionQuery.data ?? undefined,\n\t\t\thasMorePreviousMessages,\n\t\t\thasMoreNextMessages,\n\t\t\tisLoadingMoreMessages,\n\t\t};\n\t}, [hasMoreNextMessages, hasMorePreviousMessages, isLoadingMoreMessages, pseudoRoom, rid, subscriptionQuery.data]);\n\n\tuseEffect(() => {\n\t\tRoomManager.open(rid);\n\t\treturn (): void => {\n\t\t\tRoomManager.back(rid);\n\t\t};\n\t}, [rid]);\n\n\tconst subscribed = !!subscriptionQuery.data;\n\n\tuseEffect(() => {\n\t\tif (!subscribed) {\n\t\t\treturn;\n\t\t}\n\n\t\tUserAction.addStream(rid);\n\t\treturn (): void => {\n\t\t\ttry {\n\t\t\t\tUserAction.cancel(rid);\n\t\t\t} catch (error) {\n\t\t\t\t// Do nothing\n\t\t\t}\n\t\t};\n\t}, [rid, subscribed]);\n\n\tif (!pseudoRoom) {\n\t\treturn isSuccess && !room ? <RoomNotFound /> : <RoomSkeleton />;\n\t}\n\n\treturn (\n\t\t<RoomContext.Provider value={context}>\n\t\t\t<RoomToolboxProvider>\n\t\t\t\t<ComposerPopupProvider room={pseudoRoom}>{children}</ComposerPopupProvider>\n\t\t\t</RoomToolboxProvider>\n\t\t</RoomContext.Provider>\n\t);\n};\n\nexport default memo(RoomProvider);\n",null],"names":["_objectSpread","useRouter","React","useMemo","memo","useEffect","useCallback","ChatSubscription","RoomHistoryManager","UserAction","useReactiveQuery","useReactiveValue","RoomManager","roomCoordinator","RoomNotFound","RoomSkeleton","useRoomRolesManagement","RoomContext","ComposerPopupProvider","RoomToolboxProvider","useRoomQuery","module","link","default","exportDefault","_ref","rid","children","data","room","isSuccess","router","navigate","subscriptionQuery","_ChatSubscription$fin","findOne","pseudoRoom","name","getRoomName","t","federationOriginalName","hasMorePreviousMessages","hasMoreNextMessages","isLoadingMoreMessages","hasMore","hasMoreNext","isLoading","getRoom","get","context","_subscriptionQuery$da","subscription","undefined","open","back","subscribed","addStream","cancel","error","createElement","Provider","value"],"mappings":"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"}