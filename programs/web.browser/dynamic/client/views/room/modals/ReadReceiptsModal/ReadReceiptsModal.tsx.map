)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/modals/ReadReceiptsModal/ReadReceiptsModal.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, ReadReceipt } from '@rocket.chat/core-typings';\nimport { Skeleton } from '@rocket.chat/fuselage';\nimport { useMethod, useToastMessageDispatch, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport type { ReactElement } from 'react';\nimport React, { useEffect } from 'react';\n\nimport GenericModal from '../../../../components/GenericModal';\nimport ReadReceiptRow from './ReadReceiptRow';\n\ntype ReadReceiptsModalProps = {\n\tmessageId: IMessage['_id'];\n\tonClose: () => void;\n};\n\nconst ReadReceiptsModal = ({ messageId, onClose }: ReadReceiptsModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst getReadReceipts = useMethod('getReadReceipts');\n\n\tconst readReceiptsResult = useQuery<ReadReceipt[], Error>(['read-receipts', messageId], () => getReadReceipts({ messageId }));\n\n\tuseEffect(() => {\n\t\tif (readReceiptsResult.isError) {\n\t\t\tdispatchToastMessage({ type: 'error', message: readReceiptsResult.error });\n\t\t\tonClose();\n\t\t}\n\t}, [dispatchToastMessage, t, onClose, readReceiptsResult.isError, readReceiptsResult.error]);\n\n\tif (readReceiptsResult.isLoading || readReceiptsResult.isError) {\n\t\treturn (\n\t\t\t<GenericModal title={t('Read_by')} onConfirm={onClose} onClose={onClose}>\n\t\t\t\t<Skeleton type='rect' w='full' h='x120' />\n\t\t\t</GenericModal>\n\t\t);\n\t}\n\n\tconst readReceipts = readReceiptsResult.data;\n\n\treturn (\n\t\t<GenericModal title={t('Read_by')} onConfirm={onClose} onClose={onClose}>\n\t\t\t{readReceipts.length < 1 && t('No_results_found')}\n\t\t\t{readReceipts.map((receipt) => (\n\t\t\t\t<ReadReceiptRow {...receipt} key={receipt._id} />\n\t\t\t))}\n\t\t</GenericModal>\n\t);\n};\n\nexport default ReadReceiptsModal;\n",null],"names":["_extends","Skeleton","useMethod","useToastMessageDispatch","useTranslation","useQuery","React","useEffect","GenericModal","ReadReceiptRow","module","link","default","exportDefault","_ref","messageId","onClose","t","dispatchToastMessage","getReadReceipts","readReceiptsResult","isError","type","message","error","isLoading","createElement","title","onConfirm","w","h","readReceipts","data","length","map","receipt","key","_id"],"mappings":"2BACAA,EAAAC,EAAiDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAxCC,EAAUC,IAAA,CAAM,iCAAwB,CAAAC,QAAAA,CAAAA,EAAAZ,EAAAA,CAAA,CAAA,EAAA,GAAxCU,EAAUC,IAAA,CAAM,wBAAwB,CAAAV,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAR,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAL,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,QAAAA,CAAAE,QAAAA,CAAAA,EAAAN,EAAAA,CAAA,EAAAC,UAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,sCAAAA,CAAAE,QAAAA,CAAAA,EAAAJ,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,mBAAAA,CAAAE,QAAAA,CAAAA,EAAAH,EAAAA,CAAA,CAAA,EAAA,GAAjDC,EAAOG,aAAY,CAcOC,IAAiE,GAAhE,CAAEC,UAAAA,CAAS,CAAEC,QAAAA,CAAAA,CAAiC,CAAAF,EAClEG,EAAIb,IACJc,EAAuBf,IAEvBgB,EAAkBjB,EAAU,mBAE5BkB,EAAqBf,EAA+B,CAAC,gBAAiBU,EAAU,CAAE,IAAMI,EAAgB,CAAEJ,UAAAA,CAAS,IASzH,GAPAR,EAAU,KACLa,EAAmBC,OAAO,GAC7BH,EAAqB,CAAEI,KAAM,QAASC,QAASH,EAAmBI,KAAAA,AAAK,GACvER,IAEF,EAAG,CAACE,EAAsBD,EAAGD,EAASI,EAAmBC,OAAO,CAAED,EAAmBI,KAAK,CAAC,EAEvFJ,EAAmBK,SAAS,EAAIL,EAAmBC,OAAO,CAC7D,OACCf,EAAAoB,aAAA,CAAClB,EAAY,CAACmB,MAAOV,EAAE,WAAYW,UAAWZ,EAASA,QAASA,CAAQ,EACvEV,EAAAoB,aAAA,CAACzB,EAAQ,CAACqB,KAAK,OAAOO,EAAE,OAAOC,EAAE,MAAM,IAK1C,IAAMC,EAAeX,EAAmBY,IAAI,CAE5C,OACC1B,EAAAoB,aAAA,CAAClB,EAAY,CAACmB,MAAOV,EAAE,WAAYW,UAAWZ,EAASA,QAASA,CAAQ,EACtEe,EAAaE,MAAM,CAAG,GAAKhB,EAAE,oBAC7Bc,EAAaG,GAAG,CAAEC,GAClB7B,EAAAoB,aAAA,CAACjB,EAAcT,EAAA,CAAA,EAAKmC,EAAO,CAAEC,IAAKD,EAAQE,GAAAA,AAAI,KAIlD"}