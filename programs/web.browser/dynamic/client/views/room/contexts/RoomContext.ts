function module(o,e,s){let r,i,n,t;s.export({RoomContext:()=>u,useUserIsSubscribed:()=>m,useRoom:()=>l,useRoomSubscription:()=>a,useRoomMessages:()=>d,useOmnichannelRoom:()=>p,useVoipRoom:()=>h}),s.link("@rocket.chat/core-typings",{isOmnichannelRoom(o){r=o},isVoipRoom(o){i=o}},0),s.link("react",{createContext(o){n=o},useContext(o){t=o}},1);let u=n(null),m=()=>{let o=t(u);if(!o)throw Error("use useRoom only inside opened rooms");return!!o.subscription},l=()=>{let o=t(u);if(!o)throw Error("use useRoom only inside opened rooms");return o.room},a=()=>{let o=t(u);if(!o)throw Error("use useRoomSubscription only inside opened rooms");return o.subscription},d=()=>{let o=t(u);if(!o)throw Error("use useRoomMessages only inside opened rooms");return{hasMorePreviousMessages:o.hasMorePreviousMessages,hasMoreNextMessages:o.hasMoreNextMessages,isLoadingMoreMessages:o.isLoadingMoreMessages}},p=()=>{let{room:o}=t(u)||{};if(!o)throw Error("use useRoom only inside opened rooms");if(!r(o))throw Error("invalid room type");return o},h=()=>{let{room:o}=t(u)||{};if(!o)throw Error("use useRoom only inside opened rooms");if(!i(o))throw Error("invalid room type");return o}}
//# sourceMappingURL=/dynamic/client/views/room/contexts/ac7a0d1f44e62820860f8c0a20d4004c9a3ca572.map
