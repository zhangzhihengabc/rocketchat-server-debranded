)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/MessageList/MessageList.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { isThreadMessage } from '@rocket.chat/core-typings';\nimport { MessageDivider } from '@rocket.chat/fuselage';\nimport { useSetting, useTranslation, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, ComponentProps } from 'react';\nimport React, { Fragment, memo } from 'react';\n\nimport { MessageTypes } from '../../../../app/ui-utils/client';\nimport RoomMessage from '../../../components/message/variants/RoomMessage';\nimport SystemMessage from '../../../components/message/variants/SystemMessage';\nimport ThreadMessagePreview from '../../../components/message/variants/ThreadMessagePreview';\nimport { useFormatDate } from '../../../hooks/useFormatDate';\nimport { useRoomSubscription } from '../contexts/RoomContext';\nimport { useFirstUnreadMessageId } from '../hooks/useFirstUnreadMessageId';\nimport { SelectedMessagesProvider } from '../providers/SelectedMessagesProvider';\nimport { useMessages } from './hooks/useMessages';\nimport { isMessageNewDay } from './lib/isMessageNewDay';\nimport { isMessageSequential } from './lib/isMessageSequential';\nimport MessageListProvider from './providers/MessageListProvider';\n\ntype MessageListProps = {\n\trid: IRoom['_id'];\n\tscrollMessageList: ComponentProps<typeof MessageListProvider>['scrollMessageList'];\n};\n\nexport const MessageList = ({ rid, scrollMessageList }: MessageListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst messages = useMessages({ rid });\n\tconst subscription = useRoomSubscription();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst formatDate = useFormatDate();\n\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider scrollMessageList={scrollMessageList}>\n\t\t\t<SelectedMessagesProvider>\n\t\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\t\tconst sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n\n\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\n\t\t\t\t\tconst showUnreadDivider = firstUnreadMessageId === message._id;\n\n\t\t\t\t\tconst showDivider = newDay || showUnreadDivider;\n\n\t\t\t\t\tconst shouldShowAsSequential = sequential && !newDay;\n\n\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\tconst visible = !isThreadMessage(message) && !system;\n\n\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t\t{showDivider && (\n\t\t\t\t\t\t\t\t<MessageDivider unreadLabel={showUnreadDivider ? t('Unread_Messages').toLowerCase() : undefined}>\n\t\t\t\t\t\t\t\t\t{newDay && formatDate(message.ts)}\n\t\t\t\t\t\t\t\t</MessageDivider>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{visible && (\n\t\t\t\t\t\t\t\t<RoomMessage\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\t\tsequential={shouldShowAsSequential}\n\t\t\t\t\t\t\t\t\tunread={unread}\n\t\t\t\t\t\t\t\t\tmention={mention}\n\t\t\t\t\t\t\t\t\tall={all}\n\t\t\t\t\t\t\t\t\tignoredUser={ignoredUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{isThreadMessage(message) && (\n\t\t\t\t\t\t\t\t<ThreadMessagePreview\n\t\t\t\t\t\t\t\t\tdata-mid={message._id}\n\t\t\t\t\t\t\t\t\tdata-tmid={message.tmid}\n\t\t\t\t\t\t\t\t\tdata-unread={showUnreadDivider}\n\t\t\t\t\t\t\t\t\tdata-sequential={sequential}\n\t\t\t\t\t\t\t\t\tsequential={shouldShowAsSequential}\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{system && <SystemMessage showUserAvatar={showUserAvatar} message={message} />}\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</SelectedMessagesProvider>\n\t\t</MessageListProvider>\n\t);\n};\n\nexport default memo(MessageList);\n",null],"names":["isThreadMessage","MessageDivider","useSetting","useTranslation","useUserPreference","React","Fragment","memo","MessageTypes","RoomMessage","SystemMessage","ThreadMessagePreview","useFormatDate","useRoomSubscription","useFirstUnreadMessageId","SelectedMessagesProvider","useMessages","isMessageNewDay","isMessageSequential","MessageListProvider","module","export","MessageList","default","_ref","rid","scrollMessageList","t","messages","subscription","showUserAvatar","messageGroupingPeriod","Number","formatDate","firstUnreadMessageId","createElement","map","message","index","_ref2","_subscription$tunread","_subscription$tunread2","_subscription$tunread3","_subscription$ignored","previous","sequential","newDay","showUnreadDivider","_id","showDivider","shouldShowAsSequential","system","isSystemMessage","visible","unread","Boolean","tunread","includes","mention","tunreadUser","all","tunreadGroup","ignoredUser","ignored","u","key","unreadLabel","toLowerCase","undefined","ts","tmid","exportDefault"],"mappings":"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"}