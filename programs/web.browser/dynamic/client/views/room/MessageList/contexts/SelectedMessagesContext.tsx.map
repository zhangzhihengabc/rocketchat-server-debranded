)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/MessageList/contexts/SelectedMessagesContext.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { createContext, useCallback, useContext } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { selectedMessageStore } from '../../providers/SelectedMessagesProvider';\n\ntype SelectMessageContextValue = {\n\tselectedMessageStore: typeof selectedMessageStore;\n};\n\nexport const SelectedMessageContext = createContext({\n\tselectedMessageStore,\n} as SelectMessageContextValue);\n\nexport const useIsSelectedMessage = (mid: string): boolean => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on(mid, callback),\n\t\t[selectedMessageStore, mid],\n\t);\n\n\tconst getSnapshot = (): boolean => selectedMessageStore.isSelected(mid);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useIsSelecting = (): boolean => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on('toggleIsSelecting', callback),\n\t\t[selectedMessageStore],\n\t);\n\n\tconst getSnapshot = (): boolean => selectedMessageStore.getIsSelecting();\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useToggleSelect = (mid: string): (() => void) => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\treturn useCallback(() => {\n\t\tselectedMessageStore.toggle(mid);\n\t}, [mid, selectedMessageStore]);\n};\n\nexport const useCountSelected = (): number => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on('change', callback),\n\t\t[selectedMessageStore],\n\t);\n\n\tconst getSnapshot = (): number => selectedMessageStore.count();\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n",null],"names":["createContext","useCallback","useContext","useSyncExternalStore","selectedMessageStore","module","export","SelectedMessageContext","useIsSelectedMessage","useIsSelecting","useToggleSelect","useCountSelected","mid","subscribe","callback","on","isSelected","getIsSelecting","toggle","count"],"mappings":"2BAA+DA,EAAAC,EAAAC,EAAAC,EAAAC,EAA/DC,EAAOC,MAAE,CAAA,CAAAC,uBAA4B,IAAAA,EAA0BC,qBAAAA,IAAAA,EAAAC,eAAAA,IAAAA,EAAAC,gBAAAA,IAAAA,EAAAC,iBAAAA,IAAAA,CAAA,GAAAN,EAAAA,IAAAA,CAAAA,QAAAA,CAAAL,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAF,qBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAD,qBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GASxD,IAAMG,EAAyBP,EAAc,CACnDI,qBAAAA,IAGYI,EAAwBI,IACpC,GAAM,CAAER,qBAAAA,CAAAA,CAAsB,CAAGF,EAAWK,GAEtCM,EAAYZ,EAChBa,GAAuCV,EAAqBW,EAAE,CAACH,EAAKE,GACrE,CAACV,EAAsBQ,EAAI,EAK5B,OAAOT,EAAqBU,EAFR,IAAeT,EAAqBY,UAAU,CAACJ,GAGpE,EAEaH,EAAiB,KAC7B,GAAM,CAAEL,qBAAAA,CAAAA,CAAsB,CAAGF,EAAWK,GAEtCM,EAAYZ,EAChBa,GAAuCV,EAAqBW,EAAE,CAAC,oBAAqBD,GACrF,CAACV,EAAqB,EAKvB,OAAOD,EAAqBU,EAFR,IAAeT,EAAqBa,cAAc,GAGvE,EAEaP,EAAmBE,IAC/B,GAAM,CAAER,qBAAAA,CAAAA,CAAsB,CAAGF,EAAWK,GAC5C,OAAON,EAAY,KAClBG,EAAqBc,MAAM,CAACN,EAC7B,EAAG,CAACA,EAAKR,EAAqB,CAC/B,EAEaO,EAAmB,KAC/B,GAAM,CAAEP,qBAAAA,CAAAA,CAAsB,CAAGF,EAAWK,GAEtCM,EAAYZ,EAChBa,GAAuCV,EAAqBW,EAAE,CAAC,SAAUD,GAC1E,CAACV,EAAqB,EAKvB,OAAOD,EAAqBU,EAFR,IAAcT,EAAqBe,KAAK,GAG7D"}