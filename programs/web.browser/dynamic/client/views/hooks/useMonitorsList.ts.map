)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/hooks/useMonitorsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ILivechatMonitorRecord } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../lib/lists/RecordList';\n\ntype MonitorsListOptions = {\n\tfilter: string;\n};\n\nexport const useMonitorsList = (\n\toptions: MonitorsListOptions,\n): {\n\titemsList: RecordList<ILivechatMonitorRecord>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<ILivechatMonitorRecord>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<ILivechatMonitorRecord>()), []);\n\n\tconst getMonitors = useEndpoint('GET', '/v1/livechat/monitors');\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { monitors, total } = await getMonitors({\n\t\t\t\ttext: options.filter,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t\tsort: JSON.stringify({ username: 1 }),\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: monitors.map((members: any) => ({\n\t\t\t\t\t...members,\n\t\t\t\t\tlabel: members.username,\n\t\t\t\t\tvalue: members._id,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getMonitors, options.filter],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\treturn {\n\t\treload,\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["_objectSpread","useEndpoint","useCallback","useState","useScrollableRecordList","useComponentDidUpdate","RecordList","module","link","default","export","useMonitorsList","options","itemsList","setItemsList","reload","getMonitors","fetchData","start","end","monitors","total","text","filter","offset","count","sort","JSON","stringify","username","items","map","members","label","value","_id","itemCount","loadMoreItems","initialItemCount"],"mappings":"2BACAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAA,CAAAA,EAAAT,EAAAA,CAAA,CAAA,EAAA,GAAvDO,EAAOG,MAAE,CAAA,CAAAC,gBAAmB,IAAAA,CAAA,GAA2BJ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,QAAAA,CAAAL,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,4CAAAA,CAAAH,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,oCAAAA,CAAAF,sBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,6BAAAA,CAAAD,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAWhD,IAAMK,EACZC,IAOA,GAAM,CAACC,EAAWC,EAAa,CAAGX,EAAS,IAAM,IAAIG,GAC/CS,EAASb,EAAY,IAAMY,EAAa,IAAIR,GAAuC,EAAE,EAErFU,EAAcf,EAAY,MAAO,yBAEvCI,EAAsB,KACrBO,GAAWG,GACZ,EAAG,CAACH,EAASG,EAAO,EAEpB,IAAME,EAAYf,EACjB,MAAOgB,EAAOC,KACb,GAAM,CAAEC,SAAAA,CAAQ,CAAEC,MAAAA,CAAAA,CAAO,CAAG,MAAML,EAAY,CAC7CM,KAAMV,EAAQW,MAAM,CACpBC,OAAQN,EACRO,MAAON,EAAMD,EACbQ,KAAMC,KAAKC,SAAS,CAAC,CAAEC,SAAU,CAAC,KAGnC,MAAO,CACNC,MAAOV,EAASW,GAAG,CAAEC,GAAYhC,EAAAA,EAAA,CAAA,EAC7BgC,GAAO,CAAA,EAAA,CACVC,MAAOD,EAAQH,QAAQ,CACvBK,MAAOF,EAAQG,GAAAA,AAAG,IAEnBC,UAAWf,EAEb,EACA,CAACL,EAAaJ,EAAQW,MAAM,CAAC,EAGxB,CAAEc,cAAAA,CAAa,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGlC,EAAwBS,EAAWI,EAAW,IAC1F,MAAO,CACNF,OAAAA,EACAF,UAAAA,EACAwB,cAAAA,EACAC,iBAAAA,EAEF"}