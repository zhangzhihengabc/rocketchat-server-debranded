)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/omnichannel/directory/components/AgentField.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport React from 'react';\n\nimport { UserStatus } from '../../../../components/UserStatus';\nimport UserAvatar from '../../../../components/avatar/UserAvatar';\nimport AgentInfoDetails from '../../components/AgentInfoDetails';\nimport Field from '../../components/Field';\nimport Info from '../../components/Info';\nimport Label from '../../components/Label';\nimport { FormSkeleton } from './FormSkeleton';\n\ntype AgentFieldProps = {\n\tagent: IOmnichannelRoom['servedBy'];\n\tisSmall?: boolean;\n};\n\nconst AgentField = ({ agent, isSmall = false }: AgentFieldProps) => {\n\tconst t = useTranslation();\n\tconst { username = '' } = agent ?? {};\n\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\n\tconst { data, isLoading } = useQuery(['/v1/users.info', username], () => getUserInfo({ username }));\n\n\tif (isLoading) {\n\t\treturn <FormSkeleton />;\n\t}\n\n\tconst {\n\t\tuser: { name, status },\n\t} = data ?? { user: {} };\n\n\tconst displayName = name || username;\n\n\treturn (\n\t\t<Field>\n\t\t\t<Label>{t('Agent')}</Label>\n\t\t\t<Info style={{ display: 'flex' }}>\n\t\t\t\t<UserAvatar size={isSmall ? 'x28' : 'x40'} title={username} username={username || ''} />\n\t\t\t\t<AgentInfoDetails mis={isSmall ? 'x8' : 'x10'} name={displayName} shortName={username} status={<UserStatus status={status} />} />\n\t\t\t</Info>\n\t\t</Field>\n\t);\n};\n\nexport default AgentField;\n",null],"names":["useEndpoint","useTranslation","useQuery","React","UserStatus","UserAvatar","AgentInfoDetails","Field","Info","Label","FormSkeleton","module","link","default","exportDefault","_ref","agent","isSmall","t","username","getUserInfo","data","isLoading","createElement","user","name","status","displayName","style","display","size","title","mis","shortName"],"mappings":"2BACAA,EAASC,EAA8DC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAjDC,EAAgBC,IAAAA,CAAAA,2BAAgC,CAACZ,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAU,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAT,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,QAAAA,CAAAE,QAAAA,CAAAA,EAAAV,EAAAA,CAAA,CAAA,EAAA,GAAAQ,EAAAA,IAAAA,CAAAA,oCAAAA,CAAAP,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAO,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAE,QAAAA,CAAAA,EAAAR,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,oCAAAA,CAAAE,QAAAA,CAAAA,EAAAP,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,yBAAAA,CAAAE,QAAAA,CAAAA,EAAAN,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAE,QAAAA,CAAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,yBAAAA,CAAAE,QAAAA,CAAAA,EAAAJ,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,iBAAAA,CAAAD,aAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAvEC,EAAOG,aAAa,CAiBDC,IAAgD,GAA/C,CAAEC,MAAAA,CAAK,CAAEC,QAAAA,EAAU,CAAA,CAAA,CAAwB,CAAAF,EACxDG,EAAIjB,IACJ,CAAEkB,SAAAA,EAAW,EAAA,CAAI,CAAGH,MAAAA,EAAAA,EAAS,CAAA,EAC7BI,EAAcpB,EAAY,MAAO,kBACjC,CAAEqB,KAAAA,CAAI,CAAEC,UAAAA,CAAAA,CAAW,CAAGpB,EAAS,CAAC,iBAAkBiB,EAAS,CAAE,IAAMC,EAAY,CAAED,SAAAA,CAAQ,IAE/F,GAAIG,EACH,OAAOnB,EAAAoB,aAAA,CAACb,EAAY,MAGrB,GAAM,CACLc,KAAM,CAAEC,KAAAA,CAAI,CAAEC,OAAAA,CAAAA,CAAM,CACpB,CAAGL,MAAAA,EAAAA,EAAQ,CAAEG,KAAM,CAAA,CAAE,EAEhBG,EAAcF,GAAQN,EAE5B,OACChB,EAAAoB,aAAA,CAAChB,EAAK,KACLJ,EAAAoB,aAAA,CAACd,EAAK,KAAES,EAAE,UACVf,EAAAoB,aAAA,CAACf,EAAI,CAACoB,MAAO,CAAEC,QAAS,MAAM,CAAG,EAChC1B,EAAAoB,aAAA,CAAClB,EAAU,CAACyB,KAAMb,EAAU,MAAQ,MAAOc,MAAOZ,EAAUA,SAAUA,GAAY,EAAG,GACrFhB,EAAAoB,aAAA,CAACjB,EAAgB,CAAC0B,IAAKf,EAAU,KAAO,MAAOQ,KAAME,EAAaM,UAAWd,EAAUO,OAAQvB,EAAAoB,aAAA,CAACnB,EAAU,CAACsB,OAAQA,CAAO,EAAI,IAIlI"}