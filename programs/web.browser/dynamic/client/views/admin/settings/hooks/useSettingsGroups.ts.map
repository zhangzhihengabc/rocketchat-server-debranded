)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/settings/hooks/useSettingsGroups.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ISetting } from '@rocket.chat/core-typings';\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\nimport { useSettings, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useMemo } from 'react';\n\nexport const useSettingsGroups = (filter: string): ISetting[] => {\n\tconst settings = useSettings();\n\tconst t = useTranslation();\n\n\tconst filterPredicate = useMemo(() => {\n\t\tif (!filter) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\t\t[setting.i18nLabel && t(setting.i18nLabel as TranslationKey), t(setting._id as TranslationKey), setting._id].filter(Boolean);\n\n\t\ttry {\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => filterRegex.test(text));\n\t\t} catch (e) {\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => text.slice(0, filter.length) === filter);\n\t\t}\n\t}, [filter, t]);\n\n\treturn useMemo(() => {\n\t\tconst groupIds = Array.from(\n\t\t\tnew Set(\n\t\t\t\tsettings.filter(filterPredicate).map((setting) => {\n\t\t\t\t\tif (setting.type === 'group') {\n\t\t\t\t\t\treturn setting._id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn setting.group;\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\treturn settings\n\t\t\t.filter(({ type, group, _id }) => type === 'group' && groupIds.includes(group || _id))\n\t\t\t.sort((a, b) => t((a.i18nLabel || a._id) as TranslationKey).localeCompare(t((b.i18nLabel || b._id) as TranslationKey)));\n\t}, [settings, filterPredicate, t]);\n};\n",null],"names":["useSettings","useTranslation","useMemo","module","export","useSettingsGroups","filter","settings","t","filterPredicate","getMatchableStrings","setting","i18nLabel","_id","Boolean","filterRegex","RegExp","some","text","test","e","slice","length","groupIds","Array","from","Set","map","type","group","_ref","includes","sort","a","b","localeCompare"],"mappings":"2BAE4CA,EAA2BC,EAAAC,EAAvEC,EAAOC,MAAE,CAAA,CAAAC,kBAAa,IAAcA,CAAQ,GAA2BF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAH,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,QAAAA,CAAAD,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAGhE,IAAMG,EAAqBC,IACjC,IAAMC,EAAWP,IACXQ,EAAIP,IAEJQ,EAAkBP,EAAQ,KAC/B,GAAI,CAACI,EACJ,MAAO,IAAe,CAAA,EAGvB,IAAMI,EAAuBC,GAC5B,CAACA,EAAQC,SAAS,EAAIJ,EAAEG,EAAQC,SAA2B,EAAGJ,EAAEG,EAAQE,GAAqB,EAAGF,EAAQE,GAAG,CAAC,CAACP,MAAM,CAACQ,SAErH,GAAI,CACH,IAAMC,EAAc,AAAIC,OAAOV,EAAQ,KACvC,OAAQK,GAA+BD,EAAoBC,GAASM,IAAI,CAAEC,GAASH,EAAYI,IAAI,CAACD,IACnG,MAAOE,EAAG,CACX,OAAQT,GAA+BD,EAAoBC,GAASM,IAAI,CAAEC,GAASA,EAAKG,KAAK,CAAC,EAAGf,EAAOgB,MAAM,IAAMhB,GAEtH,EAAG,CAACA,EAAQE,EAAE,EAEd,OAAON,EAAQ,KACd,IAAMqB,EAAWC,MAAMC,IAAI,CAC1B,IAAIC,IACHnB,EAASD,MAAM,CAACG,GAAiBkB,GAAG,CAAEhB,GACrC,AAAIA,AAAiB,UAAjBA,EAAQiB,IAAI,CACRjB,EAAQE,GAAG,CAGZF,EAAQkB,KAAK,IAKvB,OAAOtB,EACLD,MAAM,CAACwB,IAAA,GAAC,CAAEF,KAAAA,CAAI,CAAEC,MAAAA,CAAK,CAAEhB,IAAAA,CAAAA,CAAK,CAAAiB,EAAA,MAAKF,AAAS,UAATA,GAAoBL,EAASQ,QAAQ,CAACF,GAAShB,EAAI,GACpFmB,IAAI,CAAC,CAACC,EAAGC,IAAM1B,EAAGyB,EAAErB,SAAS,EAAIqB,EAAEpB,GAAG,EAAqBsB,aAAa,CAAC3B,EAAG0B,EAAEtB,SAAS,EAAIsB,EAAErB,GAAG,GACnG,EAAG,CAACN,EAAUE,EAAiBD,EAAE,CAClC"}