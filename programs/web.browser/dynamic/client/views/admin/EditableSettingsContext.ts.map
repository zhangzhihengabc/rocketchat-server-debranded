)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/EditableSettingsContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ISettingBase, SectionName, SettingId, GroupId, TabId, ISettingColor } from '@rocket.chat/core-typings';\nimport type { SettingsContextQuery } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nexport type EditableSetting = (ISettingBase | ISettingColor) & {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n};\n\ntype EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (\n\t\t_id: SettingId,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => EditableSetting | undefined];\n\treadonly queryEditableSettings: (\n\t\tquery: EditableSettingsContextQuery,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => EditableSetting[]];\n\treadonly queryGroupSections: (\n\t\t_id: GroupId,\n\t\ttab?: TabId,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => SectionName[]];\n\treadonly queryGroupTabs: (_id: GroupId) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => TabId[]];\n\treadonly dispatch: (changes: Partial<EditableSetting>[]) => void;\n\treadonly isEnterprise: boolean;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => [(): (() => void) => (): void => undefined, (): undefined => undefined],\n\tqueryEditableSettings: () => [(): (() => void) => (): void => undefined, (): EditableSetting[] => []],\n\tqueryGroupSections: () => [(): (() => void) => (): void => undefined, (): SectionName[] => []],\n\tqueryGroupTabs: () => [(): (() => void) => (): void => undefined, (): TabId[] => []],\n\tdispatch: () => undefined,\n\tisEnterprise: false,\n});\n\nexport const useIsEnterprise = (): boolean => useContext(EditableSettingsContext).isEnterprise;\n\nexport const useEditableSetting = (_id: SettingId): EditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): EditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst [subscribe, getSnapshot] = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<EditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n",null],"names":["createContext","useContext","useMemo","useSyncExternalStore","module","export","EditableSettingsContext","useIsEnterprise","useEditableSetting","useEditableSettings","useEditableSettingsGroupSections","useEditableSettingsGroupTabs","useEditableSettingsDispatch","queryEditableSetting","undefined","queryEditableSettings","queryGroupSections","queryGroupTabs","dispatch","isEnterprise","_id","subscribe","getSnapshot","query","tab"],"mappings":"2BAE2DA,EAAAC,EAAAC,EAAAC,EAA3DC,EAAOC,MAAE,CAAA,CAAAC,wBAA2B,IAAOA,EAAgBC,gBAAAA,IAAAA,EAAAC,mBAAAA,IAAAA,EAAAC,oBAAAA,IAAAA,EAAAC,iCAAAA,IAAAA,EAAAC,6BAAAA,IAAAA,EAAAC,4BAAAA,IAAAA,CAAA,GAAAR,EAAAA,IAAAA,CAAAA,QAAAA,CAAAJ,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAD,qBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GA6BpD,IAAMG,EAA0BN,EAA4C,CAClFa,qBAAsB,IAAM,CAAC,IAAoB,IAAYC,KAAAA,EAAW,IAAiBA,KAAAA,EAAU,CACnGC,sBAAuB,IAAM,CAAC,IAAoB,IAAYD,KAAAA,EAAW,IAAyB,EAAE,CAAC,CACrGE,mBAAoB,IAAM,CAAC,IAAoB,IAAYF,KAAAA,EAAW,IAAqB,EAAE,CAAC,CAC9FG,eAAgB,IAAM,CAAC,IAAoB,IAAYH,KAAAA,EAAW,IAAe,EAAE,CAAC,CACpFI,SAAU,IAAMJ,KAAAA,EAChBK,aAAc,CAAA,IAGFZ,EAAkB,IAAeN,EAAWK,GAAyBa,YAAY,CAEjFX,EAAsBY,IAClC,GAAM,CAAEP,qBAAAA,CAAAA,CAAsB,CAAGZ,EAAWK,GAEtC,CAACe,EAAWC,EAAY,CAAGpB,EAAQ,IAAMW,EAAqBO,GAAM,CAACP,EAAsBO,EAAI,EACrG,OAAOjB,EAAqBkB,EAAWC,EACxC,EAEab,EAAuBc,IACnC,GAAM,CAAER,sBAAAA,CAAAA,CAAuB,CAAGd,EAAWK,GACvC,CAACe,EAAWC,EAAY,CAAGpB,EAAQ,IAAMa,EAAsBQ,MAAAA,EAAAA,EAAS,CAAA,GAAK,CAACR,EAAuBQ,EAAM,EACjH,OAAOpB,EAAqBkB,EAAWC,EACxC,EAEaZ,EAAmC,CAACU,EAAgBI,KAChE,GAAM,CAAER,mBAAAA,CAAAA,CAAoB,CAAGf,EAAWK,GAEpC,CAACe,EAAWC,EAAY,CAAGpB,EAAQ,IAAMc,EAAmBI,EAAKI,GAAM,CAACR,EAAoBI,EAAKI,EAAI,EAC3G,OAAOrB,EAAqBkB,EAAWC,EACxC,EAEaX,EAAgCS,IAC5C,GAAM,CAAEH,eAAAA,CAAAA,CAAgB,CAAGhB,EAAWK,GAEhC,CAACe,EAAWC,EAAY,CAAGpB,EAAQ,IAAMe,EAAeG,GAAM,CAACH,EAAgBG,EAAI,EACzF,OAAOjB,EAAqBkB,EAAWC,EACxC,EAEaV,EAA8B,IAC1CX,EAAWK,GAAyBY,QAAQ"}