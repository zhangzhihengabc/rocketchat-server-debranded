)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/users/hooks/useSendInvitationEmailMutation.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useEndpoint, useToastMessageDispatch, useTranslation } from '@rocket.chat/ui-contexts';\nimport type { UseMutationResult } from '@tanstack/react-query';\nimport { useMutation } from '@tanstack/react-query';\n\ntype UseSendInvitationEmailMutationVariables = {\n\temails: string[];\n};\n\nexport const useSendInvitationEmailMutation = (): UseMutationResult<\n\t{ success: boolean },\n\tError,\n\tUseSendInvitationEmailMutationVariables\n> => {\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\n\tconst sendInvites = useEndpoint('POST', '/v1/sendInvitationEmail');\n\n\treturn useMutation(\n\t\tasync ({ emails }) => {\n\t\t\tconst result = await sendInvites({ emails });\n\t\t\treturn result;\n\t\t},\n\t\t{\n\t\t\tonSuccess: () => dispatchToastMessage({ type: 'success', message: t('Sending_Invitations') }),\n\t\t\tonError: (error) => dispatchToastMessage({ type: 'error', message: error }),\n\t\t},\n\t);\n};\n",null],"names":["useEndpoint","useToastMessageDispatch","useTranslation","useMutation","module","export","useSendInvitationEmailMutation","t","dispatchToastMessage","sendInvites","_ref","emails","result","onSuccess","type","message","onError","error"],"mappings":"2BAAqEA,EAA2BC,EAAAC,EAAAC,EAAhGC,EAAOC,MAAE,CAAA,CAAAC,+BAAoC,IAAEA,CAAsB,GAA2BF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAJ,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAD,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAQzF,IAAMG,EAAiC,KAK7C,IAAMC,EAAIL,IACJM,EAAuBP,IAEvBQ,EAAcT,EAAY,OAAQ,2BAExC,OAAOG,EACN,MAAAO,IAAqB,GAAd,CAAEC,OAAAA,CAAAA,CAAQ,CAAAD,EACVE,EAAS,MAAMH,EAAY,CAAEE,OAAAA,CAAM,GACzC,OAAOC,CACR,EACA,CACCC,UAAW,IAAML,EAAqB,CAAEM,KAAM,UAAWC,QAASR,EAAE,sBAAsB,GAC1FS,QAAUC,GAAUT,EAAqB,CAAEM,KAAM,QAASC,QAASE,CAAK,IAG3E"}