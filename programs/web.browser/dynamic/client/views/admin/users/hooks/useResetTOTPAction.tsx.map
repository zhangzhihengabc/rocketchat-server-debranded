)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/users/hooks/useResetTOTPAction.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { useSetModal, usePermission, useSetting, useEndpoint, useTranslation, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\nimport React, { useCallback } from 'react';\n\nimport GenericModal from '../../../../components/GenericModal';\nimport type { Action } from '../../../hooks/useActionSpread';\n\nexport const useResetTOTPAction = (userId: IUser['_id']): Action | undefined => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst canResetTOTP = usePermission('edit-other-user-totp');\n\tconst twoFactorEnabled = useSetting('Accounts_TwoFactorAuthentication_Enabled');\n\tconst resetTOTPRequest = useEndpoint('POST', '/v1/users.resetTOTP');\n\n\tconst resetTOTP = useCallback(async () => {\n\t\ttry {\n\t\t\tawait resetTOTPRequest({ userId });\n\t\t\tdispatchToastMessage({ type: 'success', message: t('Users_TOTP_has_been_reset') });\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t} finally {\n\t\t\tsetModal();\n\t\t}\n\t}, [resetTOTPRequest, setModal, t, userId, dispatchToastMessage]);\n\n\tconst confirmResetTOTP = useCallback(() => {\n\t\tsetModal(\n\t\t\t<GenericModal variant='danger' onConfirm={resetTOTP} onCancel={(): void => setModal()} confirmText={t('Reset')}>\n\t\t\t\t{t('TOTP_Reset_Other_Key_Warning')}\n\t\t\t</GenericModal>,\n\t\t);\n\t}, [resetTOTP, t, setModal]);\n\n\treturn canResetTOTP && twoFactorEnabled\n\t\t? {\n\t\t\t\ticon: 'key',\n\t\t\t\tlabel: t('Reset_TOTP'),\n\t\t\t\taction: confirmResetTOTP,\n\t\t  }\n\t\t: undefined;\n};\n",null],"names":["useSetModal","useSetting","useEndpoint","useTranslation","useToastMessageDispatch","React","useCallback","GenericModal","module","export","useResetTOTPAction","usePermission","default","userId","t","setModal","dispatchToastMessage","canResetTOTP","twoFactorEnabled","resetTOTPRequest","resetTOTP","type","message","error","confirmResetTOTP","createElement","variant","onConfirm","onCancel","confirmText","icon","label","action","undefined"],"mappings":"2BAC8DA,EAAAA,EAAgBC,EAAAC,EAA+BC,EAAAC,EAA2BC,EAAAC,EAAAC,EAAxIC,EAAOC,MAAE,CAAA,CAAAC,mBAAa,IAAeA,CAAY,GAAuFF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAR,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAW,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAV,WAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAAI,QAAAA,CAAAA,EAAAP,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,sCAAAA,CAAAI,QAAAA,CAAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAMjI,IAAMG,EAAsBG,IAClC,IAAMC,EAAIX,IACJY,EAAWf,IACXgB,EAAuBZ,IACvBa,EAAeN,EAAc,wBAC7BO,EAAmBjB,EAAW,4CAC9BkB,EAAmBjB,EAAY,OAAQ,uBAEvCkB,EAAYd,EAAY,UAC7B,GAAI,CACH,MAAMa,EAAiB,CAAEN,OAAAA,CAAM,GAC/BG,EAAqB,CAAEK,KAAM,UAAWC,QAASR,EAAE,4BAA4B,GAC9E,MAAOS,EAAO,CACfP,EAAqB,CAAEK,KAAM,QAASC,QAASC,CAAK,UAC3C,CACTR,IAEF,EAAG,CAACI,EAAkBJ,EAAUD,EAAGD,EAAQG,EAAqB,EAE1DQ,EAAmBlB,EAAY,KACpCS,EACCV,EAAAoB,aAAA,CAAClB,EAAY,CAACmB,QAAQ,SAASC,UAAWP,EAAWQ,SAAU,IAAYb,IAAYc,YAAaf,EAAE,QAAS,EAC7GA,EAAE,iCAGN,EAAG,CAACM,EAAWN,EAAGC,EAAS,EAE3B,OAAOE,GAAgBC,EACpB,CACAY,KAAM,MACNC,MAAOjB,EAAE,cACTkB,OAAQR,GAERS,KAAAA,CACJ"}