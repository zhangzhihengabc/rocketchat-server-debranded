)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/users/hooks/useChangeUserStatusAction.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { useToastMessageDispatch, useTranslation, useEndpoint, usePermission } from '@rocket.chat/ui-contexts';\nimport { useMemo } from 'react';\n\nimport type { Action } from '../../../hooks/useActionSpread';\nimport { useConfirmOwnerChanges } from './useConfirmOwnerChanges';\n\nexport const useChangeUserStatusAction = (userId: IUser['_id'], isActive: boolean, onChange: () => void): Action | undefined => {\n\tconst t = useTranslation();\n\tconst confirmOwnerChanges = useConfirmOwnerChanges();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst changeActiveStatusRequest = useEndpoint('POST', '/v1/users.setActiveStatus');\n\tconst canEditOtherUserActiveStatus = usePermission('edit-other-user-active-status');\n\tconst changeActiveStatusMessage = isActive ? 'User_has_been_deactivated' : 'User_has_been_activated';\n\n\tconst activeStatusQuery = useMemo(\n\t\t() => ({\n\t\t\tuserId,\n\t\t\tactiveStatus: !isActive,\n\t\t\tconfirmRelinquish: false,\n\t\t}),\n\t\t[userId, isActive],\n\t);\n\n\tconst changeActiveStatus = (): Promise<void> =>\n\t\tconfirmOwnerChanges(\n\t\t\tasync (confirm = false) => {\n\t\t\t\tif (confirm) {\n\t\t\t\t\tactiveStatusQuery.confirmRelinquish = confirm;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait changeActiveStatusRequest(activeStatusQuery);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t(changeActiveStatusMessage) });\n\t\t\t\t\tonChange();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tconfirmText: t('Yes_deactivate_it'),\n\t\t\t},\n\t\t\tonChange,\n\t\t);\n\n\treturn canEditOtherUserActiveStatus\n\t\t? {\n\t\t\t\ticon: 'user',\n\t\t\t\tlabel: isActive ? t('Deactivate') : t('Activate'),\n\t\t\t\taction: changeActiveStatus,\n\t\t  }\n\t\t: undefined;\n};\n",null],"names":["useToastMessageDispatch","useTranslation","useEndpoint","usePermission","useMemo","useConfirmOwnerChanges","module","export","useChangeUserStatusAction","userId","isActive","onChange","t","confirmOwnerChanges","dispatchToastMessage","changeActiveStatusRequest","canEditOtherUserActiveStatus","changeActiveStatusMessage","activeStatusQuery","activeStatus","confirmRelinquish","icon","label","action","confirm","arguments","length","undefined","type","message","error","confirmText"],"mappings":"2BAC4EA,EAAQC,EAA2BC,EAAAC,EAAAC,EAAAC,EAA/GC,EAAOC,MAAE,CAAA,CAAAC,0BAAyB,IAAAA,CAA6B,GAAgDF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAN,wBAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,cAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,QAAAA,CAAAF,QAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAD,uBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAMxG,IAAMG,EAA4B,CAACC,EAAsBC,EAAmBC,KAClF,IAAMC,EAAIX,IACJY,EAAsBR,IACtBS,EAAuBd,IACvBe,EAA4Bb,EAAY,OAAQ,6BAChDc,EAA+Bb,EAAc,iCAC7Cc,EAA4BP,EAAW,4BAA8B,0BAErEQ,EAAoBd,EACzB,IAAO,CAAA,CACNK,OAAAA,EACAU,aAAc,CAACT,EACfU,kBAAmB,CAAA,IAEpB,CAACX,EAAQC,EAAS,EAwBnB,OAAOM,EACJ,CACAK,KAAM,OACNC,MAAOZ,EAAWE,EAAE,cAAgBA,EAAE,YACtCW,OAzBwB,IAC1BV,EACC,iBAA0B,IAAnBW,EAAOC,UAAAC,MAAA,CAAA,GAAAD,AAAAE,KAAAA,IAAAF,SAAA,CAAA,EAAA,EAAAA,SAAA,CAAA,EAAA,CACTD,GACHN,CAAAA,EAAkBE,iBAAiB,CAAGI,CAAAA,EAGvC,GAAI,CACH,MAAMT,EAA0BG,GAChCJ,EAAqB,CAAEc,KAAM,UAAWC,QAASjB,EAAEK,EAA0B,GAC7EN,IACC,MAAOmB,EAAO,CACf,MAAMA,EAER,EACA,CACCC,YAAanB,EAAE,sBAEhBD,IASCgB,KAAAA,CACJ"}