)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/import/ImportProgressPage.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ProgressStep } from '@rocket.chat/core-typings';\nimport { Box, Margins, ProgressBar, Throbber } from '@rocket.chat/fuselage';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport { useToastMessageDispatch, useEndpoint, useTranslation, useStream, useRouter } from '@rocket.chat/ui-contexts';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport React, { useEffect } from 'react';\n\nimport { ImportingStartedStates } from '../../../../app/importer/lib/ImporterProgressStep';\nimport { numberFormat } from '../../../../lib/utils/stringUtils';\nimport Page from '../../../components/Page';\nimport { useErrorHandler } from './useErrorHandler';\n\nconst ImportProgressPage = function ImportProgressPage() {\n\tconst queryClient = useQueryClient();\n\tconst streamer = useStream('importers');\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst handleError = useErrorHandler();\n\n\tconst router = useRouter();\n\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getImportProgress = useEndpoint('GET', '/v1/getImportProgress');\n\n\tconst mutation = useMutation({\n\t\tmutationFn: async (props: { step: ProgressStep; completed: number; total: number }) => {\n\t\t\tqueryClient.setQueryData<{\n\t\t\t\tstep: ProgressStep;\n\t\t\t\tcompleted: number;\n\t\t\t\ttotal: number;\n\t\t\t}>(['importers', 'progress'], props);\n\t\t},\n\t});\n\n\tconst currentOperation = useQuery(\n\t\t['ImportProgressPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation } = await getCurrentImportOperation();\n\t\t\treturn operation;\n\t\t},\n\t\t{\n\t\t\trefetchInterval: 1000,\n\t\t\tonSuccess: ({ valid, status }) => {\n\t\t\t\tif (!valid) {\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (status === 'importer_done') {\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Importer_done') });\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!(ImportingStartedStates as string[]).includes(status)) {\n\t\t\t\t\trouter.navigate('/admin/import/prepare');\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: (error) => {\n\t\t\t\thandleError(error, t('Failed_To_Load_Import_Data'));\n\t\t\t\trouter.navigate('/admin/import');\n\t\t\t},\n\t\t},\n\t);\n\n\tconst handleProgressUpdated = useMutableCallback(\n\t\t({ key, step, completed, total }: { key: string; step: ProgressStep; completed: number; total: number }) => {\n\t\t\tif (!currentOperation.isSuccess) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (key.toLowerCase() !== currentOperation.data.importerKey.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = step[0].toUpperCase() + step.slice(1);\n\n\t\t\tswitch (step) {\n\t\t\t\tcase 'importer_done':\n\t\t\t\t\tt.has(message) &&\n\t\t\t\t\t\tdispatchToastMessage({\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tmessage: t(message),\n\t\t\t\t\t\t});\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'importer_import_failed':\n\t\t\t\tcase 'importer_import_cancelled':\n\t\t\t\t\tt.has(message) && handleError(message);\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmutation.mutate({ step, completed, total });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t);\n\n\tconst progress = useQuery(\n\t\t['importers', 'progress'],\n\t\tasync () => {\n\t\t\tconst { key, step, count: { completed = 0, total = 0 } = {} } = await getImportProgress();\n\t\t\treturn {\n\t\t\t\tkey,\n\t\t\t\tstep,\n\t\t\t\tcompleted,\n\t\t\t\ttotal,\n\t\t\t};\n\t\t},\n\t\t{\n\t\t\tenabled: !!currentOperation.isSuccess,\n\t\t\tonSuccess: (progress) => {\n\t\t\t\tif (!progress) {\n\t\t\t\t\tdispatchToastMessage({ type: 'warning', message: t('Importer_not_in_progress') });\n\t\t\t\t\trouter.navigate('/admin/import/prepare');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// do not use the endpoint data to update the completed progress, leave it to the streamer\n\t\t\t\tif (!(ImportingStartedStates as string[]).includes(progress.step)) {\n\t\t\t\t\thandleProgressUpdated({\n\t\t\t\t\t\tkey: progress.key,\n\t\t\t\t\t\tstep: progress.step,\n\t\t\t\t\t\ttotal: progress.total,\n\t\t\t\t\t\tcompleted: progress.completed,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: (error) => {\n\t\t\t\thandleError(error, t('Failed_To_Load_Import_Data'));\n\t\t\t\trouter.navigate('/admin/import');\n\t\t\t},\n\t\t},\n\t);\n\n\tuseEffect(() => {\n\t\treturn streamer('progress', (progress) => {\n\t\t\t// There shouldn't be any progress update sending only the rate at this point of the process\n\t\t\tif (!('rate' in progress)) {\n\t\t\t\thandleProgressUpdated({\n\t\t\t\t\tkey: progress.key,\n\t\t\t\t\tstep: progress.step,\n\t\t\t\t\tcompleted: progress.count.completed,\n\t\t\t\t\ttotal: progress.count.total,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}, [handleProgressUpdated, streamer]);\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Importing_Data')} />\n\n\t\t\t<Page.ScrollableContentWithShadow>\n\t\t\t\t<Box marginInline='auto' marginBlock='neg-x24' width='full' maxWidth='x580'>\n\t\t\t\t\t<Margins block={24}>\n\t\t\t\t\t\t{currentOperation.isLoading && <Throbber justifyContent='center' />}\n\t\t\t\t\t\t{progress.fetchStatus !== 'idle' && progress.isLoading && <Throbber justifyContent='center' />}\n\n\t\t\t\t\t\t{(currentOperation.isError || progress.isError) && <Box is='p'>{t('Failed_To_Load_Import_Data')}</Box>}\n\t\t\t\t\t\t{progress.isSuccess && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Box is='p' fontScale='p2'>\n\t\t\t\t\t\t\t\t\t{t((progress.data.step[0].toUpperCase() + progress.data.step.slice(1)) as any)}\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<Box display='flex' justifyContent='center'>\n\t\t\t\t\t\t\t\t\t<ProgressBar percentage={(progress.data.completed / progress.data.total) * 100} />\n\t\t\t\t\t\t\t\t\t<Box is='span' fontScale='p2' mis={24}>\n\t\t\t\t\t\t\t\t\t\t{numberFormat((progress.data.completed / progress.data.total) * 100, 0)}%\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Margins>\n\t\t\t\t</Box>\n\t\t\t</Page.ScrollableContentWithShadow>\n\t\t</Page>\n\t);\n};\n\nexport default ImportProgressPage;\n",null],"names":["Box","Margins","ProgressBar","Throbber","useMutableCallback","useToastMessageDispatch","useEndpoint","useTranslation","useStream","useRouter","useQuery","useMutation","useQueryClient","React","useEffect","ImportingStartedStates","numberFormat","Page","useErrorHandler","module","link","v","default","exportDefault","ImportProgressPage","queryClient","streamer","t","dispatchToastMessage","handleError","router","getCurrentImportOperation","getImportProgress","mutation","mutationFn","props","setQueryData","currentOperation","operation","refetchInterval","onSuccess","_ref","valid","status","navigate","type","message","includes","onError","error","handleProgressUpdated","_ref2","key","step","completed","total","isSuccess","toLowerCase","data","importerKey","toUpperCase","slice","has","mutate","progress","count","enabled","createElement","Header","title","ScrollableContentWithShadow","marginInline","marginBlock","width","maxWidth","block","isLoading","justifyContent","fetchStatus","isError","is","Fragment","fontScale","display","percentage","mis"],"mappings":"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"}