)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/providers/UserProvider/UserProvider.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { useLocalStorage } from '@rocket.chat/fuselage-hooks';\nimport type { LoginService, SubscriptionWithRoom } from '@rocket.chat/ui-contexts';\nimport { UserContext, useEndpoint, useSetting } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\nimport type { ContextType, ReactElement, ReactNode } from 'react';\nimport React, { useEffect, useMemo } from 'react';\n\nimport { Subscriptions, ChatRoom } from '../../../app/models/client';\nimport { getUserPreference } from '../../../app/utils/client';\nimport { sdk } from '../../../app/utils/client/lib/SDKClient';\nimport { afterLogoutCleanUpCallback } from '../../../lib/callbacks/afterLogoutCleanUpCallback';\nimport { useReactiveValue } from '../../hooks/useReactiveValue';\nimport { createReactiveSubscriptionFactory } from '../../lib/createReactiveSubscriptionFactory';\nimport { useCreateFontStyleElement } from '../../views/account/accessibility/hooks/useCreateFontStyleElement';\nimport { useEmailVerificationWarning } from './hooks/useEmailVerificationWarning';\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\n\nconst getUserId = (): string | null => Meteor.userId();\n\nconst getUser = (): IUser | null => Meteor.user() as IUser | null;\n\nconst capitalize = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst config: Record<string, Partial<LoginService>> = {\n\t'apple': { title: 'Apple', icon: 'apple' },\n\t'facebook': { title: 'Facebook', icon: 'facebook' },\n\t'twitter': { title: 'Twitter', icon: 'twitter' },\n\t'google': { title: 'Google', icon: 'google' },\n\t'github': { title: 'Github', icon: 'github' },\n\t'github_enterprise': { title: 'Github Enterprise', icon: 'github' },\n\t'gitlab': { title: 'Gitlab', icon: 'gitlab' },\n\t'dolphin': { title: 'Dolphin', icon: 'dophin' },\n\t'drupal': { title: 'Drupal', icon: 'drupal' },\n\t'nextcloud': { title: 'Nextcloud', icon: 'nextcloud' },\n\t'tokenpass': { title: 'Tokenpass', icon: 'tokenpass' },\n\t'meteor-developer': { title: 'Meteor', icon: 'meteor' },\n\t'wordpress': { title: 'WordPress', icon: 'wordpress' },\n\t'linkedin': { title: 'Linkedin', icon: 'linkedin' },\n};\n\nconst logout = (): Promise<void> =>\n\tnew Promise((resolve, reject) => {\n\t\tconst user = getUser();\n\n\t\tif (!user) {\n\t\t\treturn resolve();\n\t\t}\n\n\t\tMeteor.logout(async () => {\n\t\t\tawait afterLogoutCleanUpCallback.run(user);\n\t\t\tsdk.call('logoutCleanUp', user).then(resolve, reject);\n\t\t});\n\t});\n\nexport type LoginMethods = keyof typeof Meteor;\n\ntype UserProviderProps = {\n\tchildren: ReactNode;\n};\n\nconst UserProvider = ({ children }: UserProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\n\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\n\n\tconst userId = useReactiveValue(getUserId);\n\tconst user = useReactiveValue(getUser);\n\tconst [userLanguage, setUserLanguage] = useLocalStorage('userLanguage', '');\n\tconst [preferedLanguage, setPreferedLanguage] = useLocalStorage('preferedLanguage', '');\n\n\tconst setUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst createFontStyleElement = useCreateFontStyleElement();\n\tcreateFontStyleElement(user?.settings?.preferences?.fontSize);\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\tuseEmailVerificationWarning(user ?? undefined);\n\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof UserContext> => ({\n\t\t\tuserId,\n\t\t\tuser,\n\t\t\tqueryPreference: createReactiveSubscriptionFactory(\n\t\t\t\t<T,>(key: string, defaultValue?: T) => getUserPreference(userId, key, defaultValue) as T,\n\t\t\t),\n\t\t\tquerySubscription: createReactiveSubscriptionFactory<ISubscription | undefined>((query, fields, sort) =>\n\t\t\t\tSubscriptions.findOne(query, { fields, sort }),\n\t\t\t),\n\t\t\tqueryRoom: createReactiveSubscriptionFactory<IRoom | undefined>((query, fields) => ChatRoom.findOne(query, { fields })),\n\t\t\tquerySubscriptions: createReactiveSubscriptionFactory<SubscriptionWithRoom[]>((query, options) => {\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn Subscriptions.find(query, options).fetch();\n\t\t\t\t}\n\n\t\t\t\treturn ChatRoom.find(query, options).fetch();\n\t\t\t}),\n\t\t\tloginWithToken: (token: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) =>\n\t\t\t\t\tMeteor.loginWithToken(token, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tMeteor[loginMethod](user, password, (error: Error | Meteor.Error | Meteor.TypedError | undefined) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\tlogout,\n\t\t\tloginWithService: <T extends LoginService>({ service, clientConfig = {} }: T): (() => Promise<true>) => {\n\t\t\t\tconst loginMethods = {\n\t\t\t\t\t'meteor-developer': 'MeteorDeveloperAccount',\n\t\t\t\t};\n\n\t\t\t\tconst loginWithService = `loginWith${(loginMethods as any)[service] || capitalize(String(service || ''))}`;\n\n\t\t\t\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\n\n\t\t\t\tif (!method) {\n\t\t\t\t\treturn () => Promise.reject(new Error('Login method not found'));\n\t\t\t\t}\n\n\t\t\t\treturn () =>\n\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\tmethod(clientConfig, (error: any): void => {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tqueryAllServices: createReactiveSubscriptionFactory(() =>\n\t\t\t\tServiceConfiguration.configurations\n\t\t\t\t\t.find(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshowButton: { $ne: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tservice: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t)\n\t\t\t\t\t.fetch()\n\t\t\t\t\t.map(\n\t\t\t\t\t\t({ appId: _, ...service }) =>\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\ttitle: capitalize(String((service as any).service || '')),\n\t\t\t\t\t\t\t\t...service,\n\t\t\t\t\t\t\t\t...(config[(service as any).service] ?? {}),\n\t\t\t\t\t\t\t} as any),\n\t\t\t\t\t),\n\t\t\t),\n\t\t}),\n\t\t[userId, user, loginMethod],\n\t);\n\n\tuseEffect(() => {\n\t\tif (!!userId && preferedLanguage !== userLanguage) {\n\t\t\tsetUserPreferences({ data: { language: preferedLanguage } });\n\t\t\tsetUserLanguage(preferedLanguage);\n\t\t}\n\n\t\tif (user?.language !== undefined && user.language !== userLanguage) {\n\t\t\tsetUserLanguage(user.language);\n\t\t\tsetPreferedLanguage(user.language);\n\t\t}\n\t}, [preferedLanguage, setPreferedLanguage, setUserLanguage, user?.language, userLanguage, userId, setUserPreferences]);\n\n\treturn <UserContext.Provider children={children} value={contextValue} />;\n};\n\nexport default UserProvider;\n",null],"names":["_objectSpread","_objectWithoutProperties","useLocalStorage","UserContext","useEndpoint","useSetting","Meteor","React","useEffect","useMemo","Subscriptions","ChatRoom","getUserPreference","sdk","afterLogoutCleanUpCallback","useReactiveValue","createReactiveSubscriptionFactory","useCreateFontStyleElement","useEmailVerificationWarning","useLDAPAndCrowdCollisionWarning","module","link","default","getUserId","userId","getUser","user","capitalize","str","charAt","toUpperCase","slice","config","title","icon","logout","Promise","resolve","reject","run","call","then","exportDefault","_ref","_user$settings","_user$settings$prefer","children","isLdapEnabled","isCrowdEnabled","userLanguage","setUserLanguage","preferedLanguage","setPreferedLanguage","setUserPreferences","createFontStyleElement","settings","preferences","fontSize","loginMethod","undefined","contextValue","queryPreference","key","defaultValue","querySubscription","query","fields","sort","findOne","queryRoom","querySubscriptions","options","find","fetch","loginWithToken","token","err","loginWithPassword","password","error","loginWithService","_ref2","service","clientConfig","concat","loginMethods","String","method","Error","queryAllServices","ServiceConfiguration","configurations","showButton","$ne","map","_ref3","_config$service$servi","appId","_","_excluded","data","language","createElement","Provider","value"],"mappings":"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"}