)]}'
{"version":3,"sources":["meteor://ðŸ’»app/node_modules/@rocket.chat/ui-theming/src/hooks/useThemeMode.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useDarkMode } from '@rocket.chat/fuselage-hooks';\nimport { useEndpoint, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ThemePreference as ThemeMode, Themes } from '@rocket.chat/ui-theming/src/types/themes';\nimport { useCallback, useState } from 'react';\n\n/**\n * Returns the current option set by the user, the theme mode resolved given the user configuration and OS (if applies) and a function to set it.\n * @param defaultThemeMode The default theme mode to use if the user has not set any.\n * @returns [currentThemeMode, setThemeMode, resolvedThemeMode]\n */\n\nexport const useThemeMode = (): [ThemeMode, (value: ThemeMode) => () => void, Themes] => {\n\tconst themeMode = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst [updaters] = useState(\n\t\t(): Record<ThemeMode, () => void> => ({\n\t\t\t'light': () => saveUserPreferences({ data: { themeAppearence: 'light' } }),\n\t\t\t'dark': () => saveUserPreferences({ data: { themeAppearence: 'dark' } }),\n\t\t\t'auto': () => saveUserPreferences({ data: { themeAppearence: 'auto' } }),\n\t\t\t'high-contrast': () => saveUserPreferences({ data: { themeAppearence: 'high-contrast' } }),\n\t\t}),\n\t);\n\n\tconst setTheme = useCallback((value: ThemeMode): (() => void) => updaters[value], [updaters]);\n\n\tconst useTheme = () => {\n\t\tif (useDarkMode(themeMode === 'auto' ? undefined : themeMode === 'dark')) {\n\t\t\treturn 'dark';\n\t\t}\n\t\tif (themeMode === 'high-contrast') {\n\t\t\treturn 'high-contrast';\n\t\t}\n\t\treturn 'light';\n\t};\n\treturn [themeMode, setTheme, useTheme()];\n};\n",null],"names":["useDarkMode","useEndpoint","useUserPreference","useCallback","useState","module","export","useThemeMode","themeMode","saveUserPreferences","updaters","data","themeAppearence","setTheme","value","undefined"],"mappings":"2BAA4BA,EAA8BC,EAAAC,EAAAC,EAAAC,EAA1DC,EAAOC,MAAE,CAAA,CAAAC,aAAmB,IAAAA,CAAA,GAA8BF,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAL,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAJ,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,kBAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,QAAAA,CAAAF,YAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAWnD,IAAMG,EAAe,KAC3B,IAAMC,EAAYN,EAA6B,oBAAsB,OAE/DO,EAAsBR,EAAY,OAAQ,4BAE1C,CAACS,EAAS,CAAGN,EAClB,IAAsC,CAAA,CACrC,MAAS,IAAMK,EAAoB,CAAEE,KAAM,CAAEC,gBAAiB,OAAO,CAAE,GACvE,KAAQ,IAAMH,EAAoB,CAAEE,KAAM,CAAEC,gBAAiB,MAAM,CAAE,GACrE,KAAQ,IAAMH,EAAoB,CAAEE,KAAM,CAAEC,gBAAiB,MAAM,CAAE,GACrE,gBAAiB,IAAMH,EAAoB,CAAEE,KAAM,CAAEC,gBAAiB,eAAe,CAAE,MAInFC,EAAWV,EAAaW,GAAmCJ,CAAQ,CAACI,EAAM,CAAE,CAACJ,EAAS,EAW5F,MAAO,CAACF,EAAWK,EARlB,AAAIb,EAAYQ,AAAc,SAAdA,EAAuBO,KAAAA,EAAYP,AAAc,SAAdA,GAC3C,OAEJA,AAAc,kBAAdA,EACI,gBAED,QAEgC,AACzC"}