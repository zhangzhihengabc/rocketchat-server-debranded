function module(e,r){"use strict";var t,n;Object.defineProperty(r,"__esModule",{value:!0}),r.reportTypeError=r.checkDataTypes=r.checkDataType=r.coerceAndCheckDataType=r.getJSONTypes=r.getSchemaTypes=r.DataType=void 0;let a=e("../rules"),l=e("./applicability"),s=e("../errors"),o=e("../codegen"),i=e("../util");function u(e){let r=Array.isArray(e)?e:e?[e]:[];if(r.every(a.isJSONType))return r;throw Error("type must be JSONType or JSONType[]: "+r.join(","))}(n=t=r.DataType||(r.DataType={}))[n.Correct=0]="Correct",n[n.Wrong=1]="Wrong",r.getSchemaTypes=function(e){let r=u(e.type),t=r.includes("null");if(t){if(!1===e.nullable)throw Error("type: null contradicts nullable: false")}else{if(!r.length&&void 0!==e.nullable)throw Error('"nullable" cannot be used without "type"');!0===e.nullable&&r.push("null")}return r},r.getJSONTypes=u,r.coerceAndCheckDataType=function(e,r){var n,a;let{gen:s,data:i,opts:u}=e,$=(a=u.coerceTypes)?r.filter(e=>c.has(e)||"array"===a&&"array"===e):[],f=r.length>0&&!(0===$.length&&1===r.length&&(0,l.schemaHasRulesForType)(e,r[0]));if(f){let n=y(r,i,u.strictNumbers,t.Wrong);s.if(n,()=>{$.length?function(e,r,t){let{gen:n,data:a,opts:l}=e,s=n.let("dataType",(0,o._)`typeof ${a}`),i=n.let("coerced",(0,o._)`undefined`);for(let e of("array"===l.coerceTypes&&n.if((0,o._)`${s} == 'object' && Array.isArray(${a}) && ${a}.length == 1`,()=>n.assign(a,(0,o._)`${a}[0]`).assign(s,(0,o._)`typeof ${a}`).if(y(r,a,l.strictNumbers),()=>n.assign(i,a))),n.if((0,o._)`${i} !== undefined`),t))(c.has(e)||"array"===e&&"array"===l.coerceTypes)&&function(e){switch(e){case"string":n.elseIf((0,o._)`${s} == "number" || ${s} == "boolean"`).assign(i,(0,o._)`"" + ${a}`).elseIf((0,o._)`${a} === null`).assign(i,(0,o._)`""`);return;case"number":n.elseIf((0,o._)`${s} == "boolean" || ${a} === null
              || (${s} == "string" && ${a} && ${a} == +${a})`).assign(i,(0,o._)`+${a}`);return;case"integer":n.elseIf((0,o._)`${s} === "boolean" || ${a} === null
              || (${s} === "string" && ${a} && ${a} == +${a} && !(${a} % 1))`).assign(i,(0,o._)`+${a}`);return;case"boolean":n.elseIf((0,o._)`${a} === "false" || ${a} === 0 || ${a} === null`).assign(i,!1).elseIf((0,o._)`${a} === "true" || ${a} === 1`).assign(i,!0);return;case"null":n.elseIf((0,o._)`${a} === "" || ${a} === 0 || ${a} === false`),n.assign(i,null);return;case"array":n.elseIf((0,o._)`${s} === "string" || ${s} === "number"
              || ${s} === "boolean" || ${a} === null`).assign(i,(0,o._)`[${a}]`)}}(e);n.else(),p(e),n.endIf(),n.if((0,o._)`${i} !== undefined`,()=>{n.assign(a,i),function({gen:e,parentData:r,parentDataProperty:t},n){e.if((0,o._)`${r} !== undefined`,()=>e.assign((0,o._)`${r}[${t}]`,n))}(e,i)})}(e,r,$):p(e)})}return f};let c=new Set(["string","number","integer","boolean","null"]);function $(e,r,n,a=t.Correct){let l;let s=a===t.Correct?o.operators.EQ:o.operators.NEQ;switch(e){case"null":return(0,o._)`${r} ${s} null`;case"array":l=(0,o._)`Array.isArray(${r})`;break;case"object":l=(0,o._)`${r} && typeof ${r} == "object" && !Array.isArray(${r})`;break;case"integer":l=i((0,o._)`!(${r} % 1) && !isNaN(${r})`);break;case"number":l=i();break;default:return(0,o._)`typeof ${r} ${s} ${e}`}return a===t.Correct?l:(0,o.not)(l);function i(e=o.nil){return(0,o.and)((0,o._)`typeof ${r} == "number"`,e,n?(0,o._)`isFinite(${r})`:o.nil)}}function y(e,r,t,n){let a;if(1===e.length)return $(e[0],r,t,n);let l=(0,i.toHash)(e);if(l.array&&l.object){let e=(0,o._)`typeof ${r} != "object"`;a=l.null?e:(0,o._)`!${r} || ${e}`,delete l.null,delete l.array,delete l.object}else a=o.nil;for(let e in l.number&&delete l.integer,l)a=(0,o.and)(a,$(e,r,t,n));return a}r.checkDataType=$,r.checkDataTypes=y;let f={message:({schema:e})=>`must be ${e}`,params:({schema:e,schemaValue:r})=>"string"==typeof e?(0,o._)`{type: ${e}}`:(0,o._)`{type: ${r}}`};function p(e){let r=function(e){let{gen:r,data:t,schema:n}=e,a=(0,i.schemaRefOrVal)(e,n,"type");return{gen:r,keyword:"type",data:t,schema:n.type,schemaCode:a,schemaValue:a,parentSchema:n,params:{},it:e}}(e);(0,s.reportError)(r,f)}r.reportTypeError=p}
//# sourceMappingURL=/dynamic/node_modules/ajv/dist/compile/validate/3121f5a949cab9253967979e7645eb4d7f83a0c1.map
