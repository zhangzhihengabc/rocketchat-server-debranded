function module(e,a){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.callRef=a.getValidate=void 0;let t=e("../../compile/ref_error"),r=e("../code"),l=e("../../compile/codegen"),s=e("../../compile/names"),o=e("../../compile"),i=e("../../compile/util");function n(e,a){let{gen:t}=e;return a.validate?t.scopeValue("validate",{ref:a.validate}):(0,l._)`${t.scopeValue("wrapper",{ref:a})}.validate`}function c(e,a,t,o){let{gen:n,it:c}=e,{allErrors:d,schemaEnv:u,opts:f}=c,m=f.passContext?s.default.this:l.nil;function p(e){let a=(0,l._)`${e}.errors`;n.assign(s.default.vErrors,(0,l._)`${s.default.vErrors} === null ? ${a} : ${s.default.vErrors}.concat(${a})`),n.assign(s.default.errors,(0,l._)`${s.default.vErrors}.length`)}function v(e){var a;if(!c.opts.unevaluated)return;let r=null===(a=null==t?void 0:t.validate)||void 0===a?void 0:a.evaluated;if(!0!==c.props){if(r&&!r.dynamicProps)void 0!==r.props&&(c.props=i.mergeEvaluated.props(n,r.props,c.props));else{let a=n.var("props",(0,l._)`${e}.evaluated.props`);c.props=i.mergeEvaluated.props(n,a,c.props,l.Name)}}if(!0!==c.items){if(r&&!r.dynamicItems)void 0!==r.items&&(c.items=i.mergeEvaluated.items(n,r.items,c.items));else{let a=n.var("items",(0,l._)`${e}.evaluated.items`);c.items=i.mergeEvaluated.items(n,a,c.items,l.Name)}}}o?function(){if(!u.$async)throw Error("async schema referenced by sync schema");let t=n.let("valid");n.try(()=>{n.code((0,l._)`await ${(0,r.callValidateCode)(e,a,m)}`),v(a),d||n.assign(t,!0)},e=>{n.if((0,l._)`!(${e} instanceof ${c.ValidationError})`,()=>n.throw(e)),p(e),d||n.assign(t,!1)}),e.ok(t)}():e.result((0,r.callValidateCode)(e,a,m),()=>v(a),()=>p(a))}a.getValidate=n,a.callRef=c,a.default={keyword:"$ref",schemaType:"string",code(e){let{gen:a,schema:r,it:s}=e,{baseId:i,schemaEnv:d,validateName:u,opts:f,self:m}=s,{root:p}=d;if(("#"===r||"#/"===r)&&i===p.baseId)return function(){if(d===p)return c(e,u,d,d.$async);let t=a.scopeValue("root",{ref:p});return c(e,(0,l._)`${t}.validate`,p,p.$async)}();let v=o.resolveRef.call(m,p,i,r);if(void 0===v)throw new t.default(s.opts.uriResolver,i,r);return v instanceof o.SchemaEnv?function(a){let t=n(e,a);c(e,t,a,a.$async)}(v):function(t){let s=a.scopeValue("schema",!0===f.code.source?{ref:t,code:(0,l.stringify)(t)}:{ref:t}),o=a.name("valid"),i=e.subschema({schema:t,dataTypes:[],schemaPath:l.nil,topSchemaRef:s,errSchemaPath:r},o);e.mergeEvaluated(i),e.ok(o)}(v)}}}
//# sourceMappingURL=/dynamic/node_modules/ajv/dist/vocabularies/core/ef6d06f3c2c59ec750d2151d42d5ecb42b1958fe.map
