function module(e,t){"use strict";t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find(e=>e.type===t),t.exceedsLimit=(e,r,n=1,s)=>!!(!1!==s&&t.isInteger(e)&&t.isInteger(r))&&(Number(r)-Number(e))/Number(n)>=s,t.escapeNode=(e,t=0,r)=>{let n=e.nodes[t];n&&(r&&n.type===r||"open"===n.type||"close"===n.type)&&!0!==n.escaped&&(n.value="\\"+n.value,n.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0),t.isInvalidBrace=e=>"brace"===e.type&&(!0===e.invalid||!!e.dollar||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||!0===e.open||!0===e.close,t.reduce=e=>e.reduce((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e),[]),t.flatten=(...e)=>{let t=[],r=e=>{for(let n=0;n<e.length;n++){let s=e[n];Array.isArray(s)?r(s,t):void 0!==s&&t.push(s)}return t};return r(e),t}}
//# sourceMappingURL=/dynamic/node_modules/braces/lib/1ac16e0957b69fa0b80ad406605d637cc41be55d.map
