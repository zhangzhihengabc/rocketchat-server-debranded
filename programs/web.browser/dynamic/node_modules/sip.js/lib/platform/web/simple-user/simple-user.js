function module(e,t,i){let s,r,n,o,a,l,d,h,g,c,u;i.export({SimpleUser:()=>p}),i.link("../../../api",{Invitation(e){s=e},Inviter(e){r=e},Messager(e){n=e},Registerer(e){o=e},RegistererState(e){a=e},RequestPendingError(e){l=e},SessionState(e){d=e},UserAgent(e){h=e},UserAgentState(e){g=e}},0),i.link("../session-description-handler",{SessionDescriptionHandler(e){c=e}},1),i.link("../transport",{Transport(e){u=e}},2);class p{constructor(e,t={}){this.attemptingReconnection=!1,this.connectRequested=!1,this.held=!1,this.muted=!1,this.registerer=void 0,this.registerRequested=!1,this.session=void 0,this.delegate=t.delegate,this.options=Object.assign({},t);let i=Object.assign({},t.userAgentOptions);if(i.transportConstructor||(i.transportConstructor=u),i.transportOptions||(i.transportOptions={server:e}),!i.uri&&t.aor){let e=h.makeURI(t.aor);if(!e)throw Error(`Failed to create valid URI from ${t.aor}`);i.uri=e}this.userAgent=new h(i),this.userAgent.delegate={onConnect:()=>{this.logger.log(`[${this.id}] Connected`),this.delegate&&this.delegate.onServerConnect&&this.delegate.onServerConnect(),this.registerer&&this.registerRequested&&(this.logger.log(`[${this.id}] Registering...`),this.registerer.register().catch(e=>{this.logger.error(`[${this.id}] Error occurred registering after connection with server was obtained.`),this.logger.error(e.toString())}))},onDisconnect:e=>{this.logger.log(`[${this.id}] Disconnected`),this.delegate&&this.delegate.onServerDisconnect&&this.delegate.onServerDisconnect(e),this.session&&(this.logger.log(`[${this.id}] Hanging up...`),this.hangup().catch(e=>{this.logger.error(`[${this.id}] Error occurred hanging up call after connection with server was lost.`),this.logger.error(e.toString())})),this.registerer&&(this.logger.log(`[${this.id}] Unregistering...`),this.registerer.unregister().catch(e=>{this.logger.error(`[${this.id}] Error occurred unregistering after connection with server was lost.`),this.logger.error(e.toString())})),e&&this.attemptReconnection()},onInvite:e=>{if(this.logger.log(`[${this.id}] Received INVITE`),this.session){this.logger.warn(`[${this.id}] Session already in progress, rejecting INVITE...`),e.reject().then(()=>{this.logger.log(`[${this.id}] Rejected INVITE`)}).catch(e=>{this.logger.error(`[${this.id}] Failed to reject INVITE`),this.logger.error(e.toString())});return}let t={sessionDescriptionHandlerOptions:{constraints:this.constraints}};this.initSession(e,t),this.delegate&&this.delegate.onCallReceived?this.delegate.onCallReceived():(this.logger.warn(`[${this.id}] No handler available, rejecting INVITE...`),e.reject().then(()=>{this.logger.log(`[${this.id}] Rejected INVITE`)}).catch(e=>{this.logger.error(`[${this.id}] Failed to reject INVITE`),this.logger.error(e.toString())}))},onMessage:e=>{e.accept().then(()=>{this.delegate&&this.delegate.onMessageReceived&&this.delegate.onMessageReceived(e.request.body)})}},this.logger=this.userAgent.getLogger("sip.SimpleUser"),window.addEventListener("online",()=>{this.logger.log(`[${this.id}] Online`),this.attemptReconnection()})}get id(){return this.options.userAgentOptions&&this.options.userAgentOptions.displayName||"Anonymous"}get localMediaStream(){var e;let t=null===(e=this.session)||void 0===e?void 0:e.sessionDescriptionHandler;if(t){if(!(t instanceof c))throw Error("Session description handler not instance of web SessionDescriptionHandler");return t.localMediaStream}}get remoteMediaStream(){var e;let t=null===(e=this.session)||void 0===e?void 0:e.sessionDescriptionHandler;if(t){if(!(t instanceof c))throw Error("Session description handler not instance of web SessionDescriptionHandler");return t.remoteMediaStream}}get localAudioTrack(){var e;return null===(e=this.localMediaStream)||void 0===e?void 0:e.getTracks().find(e=>"audio"===e.kind)}get localVideoTrack(){var e;return null===(e=this.localMediaStream)||void 0===e?void 0:e.getTracks().find(e=>"video"===e.kind)}get remoteAudioTrack(){var e;return null===(e=this.remoteMediaStream)||void 0===e?void 0:e.getTracks().find(e=>"audio"===e.kind)}get remoteVideoTrack(){var e;return null===(e=this.remoteMediaStream)||void 0===e?void 0:e.getTracks().find(e=>"video"===e.kind)}connect(){return(this.logger.log(`[${this.id}] Connecting UserAgent...`),this.connectRequested=!0,this.userAgent.state!==g.Started)?this.userAgent.start():this.userAgent.reconnect()}disconnect(){return this.logger.log(`[${this.id}] Disconnecting UserAgent...`),this.connectRequested=!1,this.userAgent.stop()}isConnected(){return this.userAgent.isConnected()}register(e,t){return this.logger.log(`[${this.id}] Registering UserAgent...`),this.registerRequested=!0,this.registerer||(this.registerer=new o(this.userAgent,e),this.registerer.stateChange.addListener(e=>{switch(e){case a.Initial:break;case a.Registered:this.delegate&&this.delegate.onRegistered&&this.delegate.onRegistered();break;case a.Unregistered:this.delegate&&this.delegate.onUnregistered&&this.delegate.onUnregistered();break;case a.Terminated:this.registerer=void 0;break;default:throw Error("Unknown registerer state.")}})),this.registerer.register(t).then(()=>{})}unregister(e){return(this.logger.log(`[${this.id}] Unregistering UserAgent...`),this.registerRequested=!1,this.registerer)?this.registerer.unregister(e).then(()=>{}):Promise.resolve()}call(e,t,i){if(this.logger.log(`[${this.id}] Beginning Session...`),this.session)return Promise.reject(Error("Session already exists."));let s=h.makeURI(e);if(!s)return Promise.reject(Error(`Failed to create a valid URI from "${e}"`));t||(t={}),t.sessionDescriptionHandlerOptions||(t.sessionDescriptionHandlerOptions={}),t.sessionDescriptionHandlerOptions.constraints||(t.sessionDescriptionHandlerOptions.constraints=this.constraints);let n=new r(this.userAgent,s,t);return this.sendInvite(n,t,i).then(()=>{})}hangup(){return this.logger.log(`[${this.id}] Hangup...`),this.terminate()}answer(e){return(this.logger.log(`[${this.id}] Accepting Invitation...`),this.session)?this.session instanceof s?(e||(e={}),e.sessionDescriptionHandlerOptions||(e.sessionDescriptionHandlerOptions={}),e.sessionDescriptionHandlerOptions.constraints||(e.sessionDescriptionHandlerOptions.constraints=this.constraints),this.session.accept(e)):Promise.reject(Error("Session not instance of Invitation.")):Promise.reject(Error("Session does not exist."))}decline(){return(this.logger.log(`[${this.id}] rejecting Invitation...`),this.session)?this.session instanceof s?this.session.reject():Promise.reject(Error("Session not instance of Invitation.")):Promise.reject(Error("Session does not exist."))}hold(){return this.logger.log(`[${this.id}] holding session...`),this.setHold(!0)}unhold(){return this.logger.log(`[${this.id}] unholding session...`),this.setHold(!1)}isHeld(){return this.held}mute(){this.logger.log(`[${this.id}] disabling media tracks...`),this.setMute(!0)}unmute(){this.logger.log(`[${this.id}] enabling media tracks...`),this.setMute(!1)}isMuted(){return this.muted}sendDTMF(e){return(this.logger.log(`[${this.id}] sending DTMF...`),/^[0-9A-D#*,]$/.exec(e))?this.session?(this.logger.log(`[${this.id}] Sending DTMF tone: ${e}`),this.session.info({requestOptions:{body:{contentDisposition:"render",contentType:"application/dtmf-relay",content:"Signal="+e+"\r\nDuration=2000"}}}).then(()=>{})):Promise.reject(Error("Session does not exist.")):Promise.reject(Error("Invalid DTMF tone."))}message(e,t){this.logger.log(`[${this.id}] sending message...`);let i=h.makeURI(e);return i?new n(this.userAgent,i,t).message():Promise.reject(Error(`Failed to create a valid URI from "${e}"`))}get constraints(){var e;let t={audio:!0,video:!1};return(null===(e=this.options.media)||void 0===e?void 0:e.constraints)&&(t=Object.assign({},this.options.media.constraints)),t}attemptReconnection(e=1){let t=this.options.reconnectionAttempts||3,i=this.options.reconnectionDelay||4;if(!this.connectRequested){this.logger.log(`[${this.id}] Reconnection not currently desired`);return}if(this.attemptingReconnection&&this.logger.log(`[${this.id}] Reconnection attempt already in progress`),e>t){this.logger.log(`[${this.id}] Reconnection maximum attempts reached`);return}1===e?this.logger.log(`[${this.id}] Reconnection attempt ${e} of ${t} - trying`):this.logger.log(`[${this.id}] Reconnection attempt ${e} of ${t} - trying in ${i} seconds`),this.attemptingReconnection=!0,setTimeout(()=>{if(!this.connectRequested){this.logger.log(`[${this.id}] Reconnection attempt ${e} of ${t} - aborted`),this.attemptingReconnection=!1;return}this.userAgent.reconnect().then(()=>{this.logger.log(`[${this.id}] Reconnection attempt ${e} of ${t} - succeeded`),this.attemptingReconnection=!1}).catch(i=>{this.logger.log(`[${this.id}] Reconnection attempt ${e} of ${t} - failed`),this.logger.error(i.message),this.attemptingReconnection=!1,this.attemptReconnection(++e)})},1===e?0:1e3*i)}cleanupMedia(){this.options.media&&(this.options.media.local&&this.options.media.local.video&&(this.options.media.local.video.srcObject=null,this.options.media.local.video.pause()),this.options.media.remote&&(this.options.media.remote.audio&&(this.options.media.remote.audio.srcObject=null,this.options.media.remote.audio.pause()),this.options.media.remote.video&&(this.options.media.remote.video.srcObject=null,this.options.media.remote.video.pause())))}enableReceiverTracks(e){if(!this.session)throw Error("Session does not exist.");let t=this.session.sessionDescriptionHandler;if(!(t instanceof c))throw Error("Session's session description handler not instance of SessionDescriptionHandler.");let i=t.peerConnection;if(!i)throw Error("Peer connection closed.");i.getReceivers().forEach(t=>{t.track&&(t.track.enabled=e)})}enableSenderTracks(e){if(!this.session)throw Error("Session does not exist.");let t=this.session.sessionDescriptionHandler;if(!(t instanceof c))throw Error("Session's session description handler not instance of SessionDescriptionHandler.");let i=t.peerConnection;if(!i)throw Error("Peer connection closed.");i.getSenders().forEach(t=>{t.track&&(t.track.enabled=e)})}initSession(e,t){this.session=e,this.delegate&&this.delegate.onCallCreated&&this.delegate.onCallCreated(),this.session.stateChange.addListener(t=>{if(this.session===e)switch(this.logger.log(`[${this.id}] session state changed to ${t}`),t){case d.Initial:case d.Establishing:break;case d.Established:this.setupLocalMedia(),this.setupRemoteMedia(),this.delegate&&this.delegate.onCallAnswered&&this.delegate.onCallAnswered();break;case d.Terminating:case d.Terminated:this.session=void 0,this.cleanupMedia(),this.delegate&&this.delegate.onCallHangup&&this.delegate.onCallHangup();break;default:throw Error("Unknown session state.")}}),this.session.delegate={onInfo:e=>{var t;let i,s;if((null===(t=this.delegate)||void 0===t?void 0:t.onCallDTMFReceived)===void 0){e.reject();return}let r=e.request.getHeader("content-type");if(!r||!/^application\/dtmf-relay/i.exec(r)){e.reject();return}let n=e.request.body.split("\r\n",2);if(2!==n.length){e.reject();return}let o=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/;if(o.test(n[0])&&(i=n[0].replace(o,"$2")),!i){e.reject();return}let a=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(a.test(n[1])&&(s=parseInt(n[1].replace(a,"$2"),10)),!s){e.reject();return}e.accept().then(()=>{if(this.delegate&&this.delegate.onCallDTMFReceived){if(!i||!s)throw Error("Tone or duration undefined.");this.delegate.onCallDTMFReceived(i,s)}}).catch(e=>{this.logger.error(e.message)})},onRefer:e=>{e.accept().then(()=>this.sendInvite(e.makeInviter(t),t)).catch(e=>{this.logger.error(e.message)})}}}sendInvite(e,t,i){return this.initSession(e,t),e.invite(i).then(()=>{this.logger.log(`[${this.id}] sent INVITE`)})}setHold(e){if(!this.session)return Promise.reject(Error("Session does not exist."));let t=this.session;if(this.held===e)return Promise.resolve();let i=this.session.sessionDescriptionHandler;if(!(i instanceof c))throw Error("Session's session description handler not instance of SessionDescriptionHandler.");let s=t.sessionDescriptionHandlerOptionsReInvite;return s.hold=e,t.sessionDescriptionHandlerOptionsReInvite=s,this.session.invite({requestDelegate:{onAccept:()=>{this.held=e,this.enableReceiverTracks(!this.held),this.enableSenderTracks(!this.held&&!this.muted),this.delegate&&this.delegate.onCallHold&&this.delegate.onCallHold(this.held)},onReject:()=>{this.logger.warn(`[${this.id}] re-invite request was rejected`),this.enableReceiverTracks(!this.held),this.enableSenderTracks(!this.held&&!this.muted),this.delegate&&this.delegate.onCallHold&&this.delegate.onCallHold(this.held)}}}).then(()=>{this.enableReceiverTracks(!e),this.enableSenderTracks(!e&&!this.muted)}).catch(e=>{throw e instanceof l&&this.logger.error(`[${this.id}] A hold request is already in progress.`),e})}setMute(e){if(!this.session){this.logger.warn(`[${this.id}] A session is required to enabled/disable media tracks`);return}if(this.session.state!==d.Established){this.logger.warn(`[${this.id}] An established session is required to enable/disable media tracks`);return}this.muted=e,this.enableSenderTracks(!this.held&&!this.muted)}setupLocalMedia(){var e,t;if(!this.session)throw Error("Session does not exist.");let i=null===(t=null===(e=this.options.media)||void 0===e?void 0:e.local)||void 0===t?void 0:t.video;if(i){let e=this.localMediaStream;if(!e)throw Error("Local media stream undefiend.");i.srcObject=e,i.volume=0,i.play().catch(e=>{this.logger.error(`[${this.id}] Failed to play local media`),this.logger.error(e.message)})}}setupRemoteMedia(){var e,t,i,s;if(!this.session)throw Error("Session does not exist.");let r=(null===(t=null===(e=this.options.media)||void 0===e?void 0:e.remote)||void 0===t?void 0:t.video)||(null===(s=null===(i=this.options.media)||void 0===i?void 0:i.remote)||void 0===s?void 0:s.audio);if(r){let e=this.remoteMediaStream;if(!e)throw Error("Remote media stream undefiend.");r.autoplay=!0,r.srcObject=e,r.play().catch(e=>{this.logger.error(`[${this.id}] Failed to play remote media`),this.logger.error(e.message)}),e.onaddtrack=()=>{this.logger.log(`[${this.id}] Remote media onaddtrack`),r.load(),r.play().catch(e=>{this.logger.error(`[${this.id}] Failed to play remote media`),this.logger.error(e.message)})}}}terminate(){if(this.logger.log(`[${this.id}] Terminating...`),!this.session)return Promise.reject(Error("Session does not exist."));switch(this.session.state){case d.Initial:if(this.session instanceof r)return this.session.cancel().then(()=>{this.logger.log(`[${this.id}] Inviter never sent INVITE (canceled)`)});if(this.session instanceof s)return this.session.reject().then(()=>{this.logger.log(`[${this.id}] Invitation rejected (sent 480)`)});throw Error("Unknown session type.");case d.Establishing:if(this.session instanceof r)return this.session.cancel().then(()=>{this.logger.log(`[${this.id}] Inviter canceled (sent CANCEL)`)});if(this.session instanceof s)return this.session.reject().then(()=>{this.logger.log(`[${this.id}] Invitation rejected (sent 480)`)});throw Error("Unknown session type.");case d.Established:return this.session.bye().then(()=>{this.logger.log(`[${this.id}] Session ended (sent BYE)`)});case d.Terminating:case d.Terminated:break;default:throw Error("Unknown state")}return this.logger.log(`[${this.id}] Terminating in state ${this.session.state}, no action taken`),Promise.resolve()}}}
//# sourceMappingURL=/dynamic/node_modules/sip.js/lib/platform/web/simple-user/91797c038149421c544d0bc06fb17f47bdb19437.map
