function module(e,s,t){let i,r,o,n,a,c,u;t.export({Subscriber:()=>h}),t.link("../core",{C(e){i=e},fromBodyLegacy(e){r=e},SubscriptionState(e){o=e}},0),t.link("../core/user-agent-core/allowed-methods",{AllowedMethods(e){n=e}},1),t.link("./notification",{Notification(e){a=e}},2),t.link("./subscription",{Subscription(e){c=e}},3),t.link("./subscription-state",{SubscriptionState(e){u=e}},4);class h extends c{constructor(e,s,t,i={}){super(e,i),this.body=void 0,this.logger=e.getLogger("sip.Subscriber"),i.body&&(this.body={body:i.body,contentType:i.contentType?i.contentType:"application/sdp"}),this.targetURI=s,this.event=t,void 0===i.expires?this.expires=3600:"number"!=typeof i.expires?(this.logger.warn('Option "expires" must be a number. Using default of 3600.'),this.expires=3600):this.expires=i.expires,this.extraHeaders=(i.extraHeaders||[]).slice(),this.subscriberRequest=this.initSubscriberRequest(),this.outgoingRequestMessage=this.subscriberRequest.message,this.id=this.outgoingRequestMessage.callId+this.outgoingRequestMessage.from.parameters.tag+this.event,this._userAgent._subscriptions[this.id]=this}dispose(){return this.disposed?Promise.resolve():(this.logger.log(`Subscription ${this.id} in state ${this.state} is being disposed`),delete this._userAgent._subscriptions[this.id],this.retryAfterTimer&&(clearTimeout(this.retryAfterTimer),this.retryAfterTimer=void 0),this.subscriberRequest.dispose(),super.dispose().then(()=>{if(this.state===u.Subscribed){if(!this._dialog)throw Error("Dialog undefined.");if(this._dialog.subscriptionState===o.Pending||this._dialog.subscriptionState===o.Active){let e=this._dialog;return new Promise((s,t)=>{e.delegate={onTerminated:()=>s()},e.unsubscribe()})}}}))}subscribe(e={}){switch(this.subscriberRequest.state){case o.Initial:this.state===u.Initial&&this.stateTransition(u.NotifyWait),this.subscriberRequest.subscribe().then(e=>{e.success?(e.success.subscription&&(this._dialog=e.success.subscription,this._dialog.delegate={onNotify:e=>this.onNotify(e),onRefresh:e=>this.onRefresh(e),onTerminated:()=>{this.state!==u.Terminated&&this.stateTransition(u.Terminated)}}),this.onNotify(e.success.request)):e.failure&&this.unsubscribe()});break;case o.NotifyWait:case o.Pending:break;case o.Active:if(this._dialog){let e=this._dialog.refresh();e.delegate={onAccept:e=>this.onAccepted(e),onRedirect:e=>this.unsubscribe(),onReject:e=>this.unsubscribe()}}case o.Terminated:}return Promise.resolve()}unsubscribe(e={}){if(this.disposed)return Promise.resolve();switch(this.subscriberRequest.state){case o.Initial:case o.NotifyWait:break;case o.Pending:case o.Active:this._dialog&&this._dialog.unsubscribe();break;case o.Terminated:break;default:throw Error("Unknown state.")}return this.stateTransition(u.Terminated),Promise.resolve()}_refresh(){return this.subscriberRequest.state===o.Active?this.subscribe():Promise.resolve()}onAccepted(e){}onNotify(e){if(this.disposed){e.accept();return}if(this.state!==u.Subscribed&&this.stateTransition(u.Subscribed),this.delegate&&this.delegate.onNotify){let s=new a(e);this.delegate.onNotify(s)}else e.accept();let s=e.message.parseHeader("Subscription-State");if(s&&s.state&&"terminated"===s.state){if(s.reason)switch(this.logger.log(`Terminated subscription with reason ${s.reason}`),s.reason){case"deactivated":case"timeout":this.initSubscriberRequest(),this.subscribe();return;case"probation":case"giveup":this.initSubscriberRequest(),s.params&&s.params["retry-after"]?this.retryAfterTimer=setTimeout(()=>{this.subscribe()},s.params["retry-after"]):this.subscribe();return}this.unsubscribe()}}onRefresh(e){e.delegate={onAccept:e=>this.onAccepted(e)}}initSubscriberRequest(){let e={extraHeaders:this.extraHeaders,body:this.body?r(this.body):void 0};return this.subscriberRequest=new b(this._userAgent.userAgentCore,this.targetURI,this.event,this.expires,e),this.subscriberRequest.delegate={onAccept:e=>this.onAccepted(e)},this.subscriberRequest}}class b{constructor(e,s,t,r,o,a){this.core=e,this.target=s,this.event=t,this.expires=r,this.subscribed=!1,this.logger=e.loggerFactory.getLogger("sip.Subscriber"),this.delegate=a;let c="Allow: "+n.toString(),u=(o&&o.extraHeaders||[]).slice();u.push(c),u.push("Event: "+this.event),u.push("Expires: "+this.expires),u.push("Contact: "+this.core.configuration.contact.toString());let h=o&&o.body;this.message=e.makeOutgoingRequestMessage(i.SUBSCRIBE,this.target,this.core.configuration.aor,this.target,{},u,h)}dispose(){this.request&&(this.request.waitNotifyStop(),this.request.dispose(),this.request=void 0)}get state(){return this.subscription?this.subscription.subscriptionState:this.subscribed?o.NotifyWait:o.Initial}subscribe(){return this.subscribed?Promise.reject(Error("Not in initial state. Did you call subscribe more than once?")):(this.subscribed=!0,new Promise(e=>{if(!this.message)throw Error("Message undefined.");this.request=this.core.subscribe(this.message,{onAccept:e=>{this.delegate&&this.delegate.onAccept&&this.delegate.onAccept(e)},onNotify:s=>{this.subscription=s.subscription,this.subscription&&(this.subscription.autoRefresh=!0),e({success:s})},onNotifyTimeout:()=>{e({failure:{}})},onRedirect:s=>{e({failure:{response:s}})},onReject:s=>{e({failure:{response:s}})}})}))}}}
//# sourceMappingURL=/dynamic/node_modules/sip.js/lib/api/71797ed7a44a80c655e8e05eee0a3cc8c2e38257.map
