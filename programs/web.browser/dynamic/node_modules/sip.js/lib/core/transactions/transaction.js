function module(t,e,r){let s;r.export({Transaction:()=>i}),r.link("../exceptions",{TransportError(t){s=t}},0);class i{constructor(t,e,r,s,i){this._transport=t,this._user=e,this._id=r,this._state=s,this.listeners=[],this.logger=e.loggerFactory.getLogger(i,r),this.logger.debug(`Constructing ${this.typeToString()} with id ${this.id}.`)}dispose(){this.logger.debug(`Destroyed ${this.typeToString()} with id ${this.id}.`)}get id(){return this._id}get kind(){throw Error("Invalid kind.")}get state(){return this._state}get transport(){return this._transport}addStateChangeListener(t,e){let r=()=>{this.removeStateChangeListener(r),t()};(null==e?void 0:e.once)===!0?this.listeners.push(r):this.listeners.push(t)}notifyStateChangeListeners(){this.listeners.slice().forEach(t=>t())}removeStateChangeListener(t){this.listeners=this.listeners.filter(e=>e!==t)}logTransportError(t,e){this.logger.error(t.message),this.logger.error(`Transport error occurred in ${this.typeToString()} with id ${this.id}.`),this.logger.error(e)}send(t){return this.transport.send(t).catch(t=>{let e;if(t instanceof s)throw this.onTransportError(t),t;throw e=t&&"string"==typeof t.message?new s(t.message):new s,this.onTransportError(e),e})}setState(t){this.logger.debug(`State change to "${t}" on ${this.typeToString()} with id ${this.id}.`),this._state=t,this._user.onStateChange&&this._user.onStateChange(t),this.notifyStateChangeListeners()}typeToString(){return"UnknownType"}}}
//# sourceMappingURL=/dynamic/node_modules/sip.js/lib/core/transactions/bccf7ec05415a9e2a7cacf66bca1ad1b5d22da95.map
