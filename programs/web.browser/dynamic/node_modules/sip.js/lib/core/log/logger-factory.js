function module(e,t,r){let o,l;r.export({LoggerFactory:()=>i}),r.link("./levels",{Levels(e){o=e}},0),r.link("./logger",{Logger(e){l=e}},1);class i{constructor(){this.builtinEnabled=!0,this._level=o.log,this.loggers={},this.logger=this.getLogger("sip:loggerfactory")}get level(){return this._level}set level(e){e>=0&&e<=3?this._level=e:e>3?this._level=3:o.hasOwnProperty(e)?this._level=e:this.logger.error("invalid 'level' parameter value: "+JSON.stringify(e))}get connector(){return this._connector}set connector(e){e?"function"==typeof e?this._connector=e:this.logger.error("invalid 'connector' parameter value: "+JSON.stringify(e)):this._connector=void 0}getLogger(e,t){if(t&&3===this.level)return new l(this,e,t);if(this.loggers[e])return this.loggers[e];{let t=new l(this,e);return this.loggers[e]=t,t}}genericLog(e,t,r,l){this.level>=e&&this.builtinEnabled&&this.print(e,t,r,l),this.connector&&this.connector(o[e],t,r,l)}print(e,t,r,l){if("string"==typeof l){let e=[new Date,t];r&&e.push(r),l=e.concat(l).join(" | ")}switch(e){case o.error:console.error(l);break;case o.warn:console.warn(l);break;case o.log:console.log(l);break;case o.debug:console.debug(l)}}}}
//# sourceMappingURL=/dynamic/node_modules/sip.js/lib/core/log/c7de65216f028aff426ef028ffe1369d2330d38f.map
