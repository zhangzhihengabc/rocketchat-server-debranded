function module(e,t,i){let s,r,o,n,a,h,u,d;i.export({SubscriptionDialog:()=>c}),i.link("../messages",{C(e){s=e},NameAddrHeader(e){r=e}},0),i.link("../subscription",{SubscriptionState(e){o=e}},1),i.link("../timers",{Timers(e){n=e}},2),i.link("../user-agent-core/allowed-methods",{AllowedMethods(e){a=e}},3),i.link("../user-agents/notify-user-agent-server",{NotifyUserAgentServer(e){h=e}},4),i.link("../user-agents/re-subscribe-user-agent-client",{ReSubscribeUserAgentClient(e){u=e}},5),i.link("./dialog",{Dialog(e){d=e}},6);class c extends d{constructor(e,t,i,s,r,o){super(s,r),this.delegate=o,this._autoRefresh=!1,this._subscriptionEvent=e,this._subscriptionExpires=t,this._subscriptionExpiresInitial=t,this._subscriptionExpiresLastSet=Math.floor(Date.now()/1e3),this._subscriptionRefresh=void 0,this._subscriptionRefreshLastSet=void 0,this._subscriptionState=i,this.logger=s.loggerFactory.getLogger("sip.subscribe-dialog"),this.logger.log(`SUBSCRIBE dialog ${this.id} constructed`)}static initialDialogStateForSubscription(e,t){let i=t.getHeaders("record-route"),s=t.parseHeader("contact");if(!s)throw Error("Contact undefined.");if(!(s instanceof r))throw Error("Contact not instance of NameAddrHeader.");let o=s.uri,n=e.cseq,a=e.callId,h=e.fromTag,u=t.fromTag;if(!a)throw Error("Call id undefined.");if(!h)throw Error("From tag undefined.");if(!u)throw Error("To tag undefined.");if(!e.from)throw Error("From undefined.");if(!e.to)throw Error("To undefined.");let d=e.from.uri,c=e.to.uri;return{id:a+h+u,early:!1,callId:a,localTag:h,remoteTag:u,localSequenceNumber:n,remoteSequenceNumber:void 0,localURI:d,remoteURI:c,remoteTarget:o,routeSet:i,secure:!1}}dispose(){super.dispose(),this.N&&(clearTimeout(this.N),this.N=void 0),this.refreshTimerClear(),this.logger.log(`SUBSCRIBE dialog ${this.id} destroyed`)}get autoRefresh(){return this._autoRefresh}set autoRefresh(e){this._autoRefresh=!0,this.refreshTimerSet()}get subscriptionEvent(){return this._subscriptionEvent}get subscriptionExpires(){let e=Math.floor(Date.now()/1e3)-this._subscriptionExpiresLastSet,t=this._subscriptionExpires-e;return Math.max(t,0)}set subscriptionExpires(e){if(e<0)throw Error("Expires must be greater than or equal to zero.");if(this._subscriptionExpires=e,this._subscriptionExpiresLastSet=Math.floor(Date.now()/1e3),this.autoRefresh){let t=this.subscriptionRefresh;(void 0===t||t>=e)&&this.refreshTimerSet()}}get subscriptionExpiresInitial(){return this._subscriptionExpiresInitial}get subscriptionRefresh(){if(void 0===this._subscriptionRefresh||void 0===this._subscriptionRefreshLastSet)return;let e=Math.floor(Date.now()/1e3)-this._subscriptionRefreshLastSet,t=this._subscriptionRefresh-e;return Math.max(t,0)}get subscriptionState(){return this._subscriptionState}receiveRequest(e){if(this.logger.log(`SUBSCRIBE dialog ${this.id} received ${e.method} request`),!this.sequenceGuard(e)){this.logger.log(`SUBSCRIBE dialog ${this.id} rejected out of order ${e.method} request.`);return}(super.receiveRequest(e),e.method===s.NOTIFY)?this.onNotify(e):(this.logger.log(`SUBSCRIBE dialog ${this.id} received unimplemented ${e.method} request`),this.core.replyStateless(e,{statusCode:501}))}refresh(){let e="Allow: "+a.toString(),t={};return t.extraHeaders=(t.extraHeaders||[]).slice(),t.extraHeaders.push(e),t.extraHeaders.push("Event: "+this.subscriptionEvent),t.extraHeaders.push("Expires: "+this.subscriptionExpiresInitial),t.extraHeaders.push("Contact: "+this.core.configuration.contact.toString()),this.subscribe(void 0,t)}subscribe(e,t={}){if(this.subscriptionState!==o.Pending&&this.subscriptionState!==o.Active)throw Error(`Invalid state ${this.subscriptionState}. May only re-subscribe while in state "pending" or "active".`);this.logger.log(`SUBSCRIBE dialog ${this.id} sending SUBSCRIBE request`);let i=new u(this,e,t);return this.N&&(clearTimeout(this.N),this.N=void 0),this.N=setTimeout(()=>this.timerN(),n.TIMER_N),i}terminate(){this.stateTransition(o.Terminated),this.onTerminated()}unsubscribe(){let e="Allow: "+a.toString(),t={};return t.extraHeaders=(t.extraHeaders||[]).slice(),t.extraHeaders.push(e),t.extraHeaders.push("Event: "+this.subscriptionEvent),t.extraHeaders.push("Expires: 0"),t.extraHeaders.push("Contact: "+this.core.configuration.contact.toString()),this.subscribe(void 0,t)}onNotify(e){let t=e.parseHeader("Event").event;if(!t||t!==this.subscriptionEvent){this.core.replyStateless(e,{statusCode:489});return}this.N&&(clearTimeout(this.N),this.N=void 0);let i=e.parseHeader("Subscription-State");if(!i||!i.state){this.core.replyStateless(e,{statusCode:489});return}let s=i.state,r=i.expires?Math.max(i.expires,0):void 0;switch(s){case"pending":this.stateTransition(o.Pending,r);break;case"active":this.stateTransition(o.Active,r);break;case"terminated":this.stateTransition(o.Terminated,r);break;default:this.logger.warn("Unrecognized subscription state.")}let n=new h(this,e);this.delegate&&this.delegate.onNotify?this.delegate.onNotify(n):n.accept()}onRefresh(e){this.delegate&&this.delegate.onRefresh&&this.delegate.onRefresh(e)}onTerminated(){this.delegate&&this.delegate.onTerminated&&this.delegate.onTerminated()}refreshTimerClear(){this.refreshTimer&&(clearTimeout(this.refreshTimer),this.refreshTimer=void 0)}refreshTimerSet(){if(this.refreshTimerClear(),this.autoRefresh&&this.subscriptionExpires>0){let e=900*this.subscriptionExpires;this._subscriptionRefresh=Math.floor(e/1e3),this._subscriptionRefreshLastSet=Math.floor(Date.now()/1e3),this.refreshTimer=setTimeout(()=>{this.refreshTimer=void 0,this._subscriptionRefresh=void 0,this._subscriptionRefreshLastSet=void 0,this.onRefresh(this.refresh())},e)}}stateTransition(e,t){let i=()=>{this.logger.warn(`Invalid subscription state transition from ${this.subscriptionState} to ${e}`)};switch(e){case o.Initial:case o.NotifyWait:i();return;case o.Pending:if(this.subscriptionState!==o.NotifyWait&&this.subscriptionState!==o.Pending){i();return}break;case o.Active:case o.Terminated:if(this.subscriptionState!==o.NotifyWait&&this.subscriptionState!==o.Pending&&this.subscriptionState!==o.Active){i();return}break;default:i();return}e===o.Pending&&t&&(this.subscriptionExpires=t),e===o.Active&&t&&(this.subscriptionExpires=t),e===o.Terminated&&this.dispose(),this._subscriptionState=e}timerN(){this.logger.warn("Timer N expired for SUBSCRIBE dialog. Timed out waiting for NOTIFY."),this.subscriptionState!==o.Terminated&&(this.stateTransition(o.Terminated),this.onTerminated())}}}
//# sourceMappingURL=/dynamic/node_modules/sip.js/lib/core/dialogs/7c0d301e7997be57846f76828c77ba9392e47bc4.map
