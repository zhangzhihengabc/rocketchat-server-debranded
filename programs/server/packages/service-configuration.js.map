{"version":3,"sources":["meteor://ðŸ’»app/packages/service-configuration/service_configuration_common.js","meteor://ðŸ’»app/packages/service-configuration/service_configuration_server.js"],"names":["ServiceConfiguration","configurations","Mongo","Collection","_preventAutopublish","connection","Meteor","isClient","Accounts","ConfigError","serviceName","loginServicesConfigured","message","prototype","Error","name","module","link","v","createIndex","service","unique","err","console","error","startup","settings","packages","Object","keys","forEach","key","upsert","$set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAI,OAAOA,oBAAoB,KAAK,WAAW,EAAE;EAC/CA,oBAAoB,GAAG,CAAC,CAAC;AAC3B;;AAEA;AACA;AACAA,oBAAoB,CAACC,cAAc,GAAG,IAAIC,KAAK,CAACC,UAAU,CACxD,2CAA2C,EAC3C;EACEC,mBAAmB,EAAE,IAAI;EACzBC,UAAU,EAAEC,MAAM,CAACC,QAAQ,GAAGC,QAAQ,CAACH,UAAU,GAAGC,MAAM,CAACD;AAC7D,CAAC,CACF;AACD;AACA;AACA;AACA;AACA;;AAEA;AACAL,oBAAoB,CAACS,WAAW,GAAG,UAASC,WAAW,EAAE;EACvD,IAAIJ,MAAM,CAACC,QAAQ,IAAI,CAACC,QAAQ,CAACG,uBAAuB,EAAE,EAAE;IAC1D,IAAI,CAACC,OAAO,GAAG,4CAA4C;EAC7D,CAAC,MAAM,IAAIF,WAAW,EAAE;IACtB,IAAI,CAACE,OAAO,GAAG,UAAU,GAAGF,WAAW,GAAG,iBAAiB;EAC7D,CAAC,MAAM;IACL,IAAI,CAACE,OAAO,GAAG,wBAAwB;EACzC;AACF,CAAC;AACDZ,oBAAoB,CAACS,WAAW,CAACI,SAAS,GAAG,IAAIC,KAAK,EAAE;AACxDd,oBAAoB,CAACS,WAAW,CAACI,SAAS,CAACE,IAAI,GAC7C,kCAAkC,C;;;;;;;;;;;AC/BpC,IAAIT,MAAM;AAACU,MAAM,CAACC,IAAI,CAAC,eAAe,EAAC;EAACX,MAAM,CAACY,CAAC,EAAC;IAACZ,MAAM,GAACY,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAE/D;AACA;AACA;AACA;AACA,IAAI;EACFlB,oBAAoB,CAACC,cAAc,CAACkB,WAAW,CAC7C;IAAEC,OAAO,EAAE;EAAE,CAAC,EACd;IAAEC,MAAM,EAAE;EAAK,CAAC,CACjB;AACH,CAAC,CAAC,OAAOC,GAAG,EAAE;EACZC,OAAO,CAACC,KAAK,CACX,kEAAkE,GAChE,sEAAsE,GACtE,6DAA6D,GAC7D,wEAAwE,GACxE,6DAA6D,GAC7D,8DAA8D,GAC9D,0EAA0E,GAC1E,wEAAwE,GACxE,sEAAsE,GACtE,iEAAiE,GACjE,sEAAsE,GACtE,wBAAwB,GACxB,oEAAoE,GACpE,qEAAqE,GACrE,iEAAiE,GACjE,+CAA+C,CAClD;EACD,MAAMF,GAAG;AACX;AAEAhB,MAAM,CAACmB,OAAO,CAAC,MAAM;EAAA;EACnB,MAAMC,QAAQ,uBAAGpB,MAAM,CAACoB,QAAQ,8EAAf,iBAAiBC,QAAQ,0DAAzB,sBAA4B,uBAAuB,CAAC;EACrE,IAAI,CAACD,QAAQ,EAAE;EACfE,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAACI,OAAO,CAACC,GAAG,IAAI;IACnC/B,oBAAoB,CAACC,cAAc,CAAC+B,MAAM,CACxC;MAAEZ,OAAO,EAAEW;IAAI,CAAC,EAChB;MACEE,IAAI,EAAEP,QAAQ,CAACK,GAAG;IACpB,CAAC,CACF;EACH,CAAC,CAAC;AACJ,CAAC,CAAC,C","file":"/packages/service-configuration.js","sourcesContent":["if (typeof ServiceConfiguration === 'undefined') {\n  ServiceConfiguration = {};\n}\n\n// Table containing documents with configuration options for each\n// login service\nServiceConfiguration.configurations = new Mongo.Collection(\n  'meteor_accounts_loginServiceConfiguration',\n  {\n    _preventAutopublish: true,\n    connection: Meteor.isClient ? Accounts.connection : Meteor.connection,\n  }\n);\n// Leave this collection open in insecure mode. In theory, someone could\n// hijack your oauth connect requests to a different endpoint or appId,\n// but you did ask for 'insecure'. The advantage is that it is much\n// easier to write a configuration wizard that works only in insecure\n// mode.\n\n// Thrown when trying to use a login service which is not configured\nServiceConfiguration.ConfigError = function(serviceName) {\n  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {\n    this.message = 'Login service configuration not yet loaded';\n  } else if (serviceName) {\n    this.message = 'Service ' + serviceName + ' not configured';\n  } else {\n    this.message = 'Service not configured';\n  }\n};\nServiceConfiguration.ConfigError.prototype = new Error();\nServiceConfiguration.ConfigError.prototype.name =\n  'ServiceConfiguration.ConfigError';\n","import { Meteor } from 'meteor/meteor';\n\n// Only one configuration should ever exist for each service.\n// A unique index helps avoid various race conditions which could\n// otherwise lead to an inconsistent database state (when there are multiple\n// configurations for a single service, which configuration is correct?)\ntry {\n  ServiceConfiguration.configurations.createIndex(\n    { service: 1 },\n    { unique: true }\n  );\n} catch (err) {\n  console.error(\n    'The service-configuration package persists configuration in the ' +\n      'meteor_accounts_loginServiceConfiguration collection in MongoDB. As ' +\n      'each service should have exactly one configuration, Meteor ' +\n      'automatically creates a MongoDB index with a unique constraint on the ' +\n      ' meteor_accounts_loginServiceConfiguration collection. The ' +\n      'createIndex command which creates that index is failing.\\n\\n' +\n      'Meteor versions before 1.0.4 did not create this index. If you recently ' +\n      'upgraded and are seeing this error message for the first time, please ' +\n      'check your meteor_accounts_loginServiceConfiguration collection for ' +\n      'multiple configuration entries for the same service and delete ' +\n      'configuration entries until there is no more than one configuration ' +\n      'entry per service.\\n\\n' +\n      'If the meteor_accounts_loginServiceConfiguration collection looks ' +\n      'fine, the createIndex command is failing for some other reason.\\n\\n' +\n      'For more information on this history of this issue, please see ' +\n      'https://github.com/meteor/meteor/pull/3514.\\n'\n  );\n  throw err;\n}\n\nMeteor.startup(() => {\n  const settings = Meteor.settings?.packages?.['service-configuration'];\n  if (!settings) return;\n  Object.keys(settings).forEach(key => {\n    ServiceConfiguration.configurations.upsert(\n      { service: key },\n      {\n        $set: settings[key],\n      }\n    );\n  });\n});\n"]}