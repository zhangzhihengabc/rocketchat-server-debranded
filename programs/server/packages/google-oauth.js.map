{"version":3,"sources":["meteor://ðŸ’»app/packages/google-oauth/google_server.js","meteor://ðŸ’»app/packages/google-oauth/namespace.js"],"names":["_objectSpread","module","link","default","v","Google","Accounts","fetch","hasOwn","Object","prototype","hasOwnProperty","whitelistedFields","getServiceDataFromTokens","tokens","callback","accessToken","idToken","scopes","getScopes","catch","err","error","assign","Error","message","response","identity","getIdentity","serviceData","scope","call","expiresAt","Date","now","parseInt","expiresIn","fields","create","forEach","name","refreshToken","returnValue","options","profile","undefined","registerLoginHandler","request","googleSignIn","serverAuthCode","getTokens","code","result","updateOrCreateUserFromExternalService","id","userId","email","picture","imageUrl","query","config","ServiceConfiguration","configurations","findOne","service","ConfigError","content","URLSearchParams","client_id","clientId","client_secret","OAuth","openSecret","secret","redirect_uri","_redirectUri","grant_type","method","headers","Accept","body","json","Meteor","data","access_token","refresh_token","expires_in","id_token","getServiceData","registerService","toString","e","reason","split","retrieveCredential","credentialToken","credentialSecret","exports"],"mappings":"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","file":"/packages/google-oauth.js","sourcesContent":["import Google from './namespace.js';\nimport { Accounts } from 'meteor/accounts-base';\nimport { fetch } from 'meteor/fetch';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// https://developers.google.com/accounts/docs/OAuth2Login#userinfocall\nGoogle.whitelistedFields = [\n  'id',\n  'email',\n  'verified_email',\n  'name',\n  'given_name',\n  'family_name',\n  'picture',\n  'locale',\n  'timezone',\n  'gender',\n];\n\nconst getServiceDataFromTokens = async (tokens, callback) => {\n  const { accessToken, idToken } = tokens;\n  const scopes = await getScopes(accessToken).catch((err) => {\n    const error = Object.assign(\n      new Error(`Failed to fetch tokeninfo from Google. ${err.message}`),\n      { response: err.response }\n    );\n    callback && callback(error);\n    throw error;\n  });\n\n  let identity = await getIdentity(accessToken).catch((err) => {\n    const error = Object.assign(\n      new Error(`Failed to fetch identity from Google. ${err.message}`),\n      { response: err.response }\n    );\n    callback && callback(error);\n    throw error;\n  });\n  const serviceData = {\n    accessToken,\n    idToken,\n    scope: scopes,\n  };\n\n  if (hasOwn.call(tokens, 'expiresIn')) {\n    serviceData.expiresAt = Date.now() + 1000 * parseInt(tokens.expiresIn, 10);\n  }\n\n  const fields = Object.create(null);\n  Google.whitelistedFields.forEach(function (name) {\n    if (hasOwn.call(identity, name)) {\n      fields[name] = identity[name];\n    }\n  });\n\n  Object.assign(serviceData, fields);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (tokens.refreshToken) {\n    serviceData.refreshToken = tokens.refreshToken;\n  }\n  const returnValue = {\n    serviceData,\n    options: {\n      profile: {\n        name: identity.name,\n      },\n    },\n  };\n\n  callback && callback(undefined, returnValue);\n\n  return returnValue;\n};\n\nAccounts.registerLoginHandler(async (request) => {\n  if (request.googleSignIn !== true) {\n    return;\n  }\n  const tokens = {\n    accessToken: request.accessToken,\n    refreshToken: request.refreshToken,\n    idToken: request.idToken,\n  };\n\n  if (request.serverAuthCode) {\n    Object.assign(\n      tokens,\n      await getTokens({\n        code: request.serverAuthCode,\n      })\n    );\n  }\n\n  let result;\n  try {\n    result = await getServiceDataFromTokens(tokens);\n  } catch (err) {\n    throw Object.assign(\n      new Error(\n        `Failed to complete OAuth handshake with Google. ${err.message}`\n      ),\n      { response: err.response }\n    );\n  }\n  return Accounts.updateOrCreateUserFromExternalService(\n    'google',\n    {\n      id: request.userId,\n      idToken: request.idToken,\n      accessToken: request.accessToken,\n      email: request.email,\n      picture: request.imageUrl,\n      ...result.serviceData,\n    },\n    result.options\n  );\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request\nconst getTokens = async (query, callback) => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'google',\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n\n  const content = new URLSearchParams({\n    code: query.code,\n    client_id: config.clientId,\n    client_secret: OAuth.openSecret(config.secret),\n    redirect_uri: OAuth._redirectUri('google', config),\n    grant_type: 'authorization_code',\n  });\n  const request = await fetch('https://accounts.google.com/o/oauth2/token', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: content,\n  });\n  const response = await request.json();\n\n  if (response.error) {\n    // if the http response was a json object with an error attribute\n    callback && callback(response.error);\n    throw new Meteor.Error(\n      `Failed to complete OAuth handshake with Google. ${response.error}`\n    );\n  } else {\n    const data = {\n      accessToken: response.access_token,\n      refreshToken: response.refresh_token,\n      expiresIn: response.expires_in,\n      idToken: response.id_token,\n    };\n    callback && callback(undefined, data);\n    return data;\n  }\n};\n\nconst getServiceData = async (query) =>\n  getServiceDataFromTokens(await getTokens(query));\n\nOAuth.registerService('google', 2, null, getServiceData);\n\nconst getIdentity = async (accessToken, callback) => {\n  const content = new URLSearchParams({ access_token: accessToken });\n  let response;\n  try {\n    const request = await fetch(\n      `https://www.googleapis.com/oauth2/v1/userinfo?${content.toString()}`,\n      {\n        method: 'GET',\n        headers: { Accept: 'application/json' },\n      }\n    );\n    response = await request.json();\n  } catch (e) {\n    callback && callback(e);\n    throw new Meteor.Error(e.reason);\n  }\n  callback && callback(undefined, response);\n  return response;\n};\n\nconst getScopes = async (accessToken, callback) => {\n  const content = new URLSearchParams({ access_token: accessToken });\n  let response;\n  try {\n    const request = await fetch(\n      `https://www.googleapis.com/oauth2/v1/tokeninfo?${content.toString()}`,\n      {\n        method: 'GET',\n        headers: { Accept: 'application/json' },\n      }\n    );\n    response = await request.json();\n  } catch (e) {\n    callback && callback(e);\n    throw new Meteor.Error(e.reason);\n  }\n  callback && callback(undefined, response.scope.split(' '));\n  return response.scope.split(' ');\n};\n\nGoogle.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n","// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports;\n\n// So that api.export finds the \"Google\" property.\nGoogle.Google = Google;\n"]}