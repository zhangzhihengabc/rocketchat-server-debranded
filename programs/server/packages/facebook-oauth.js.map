{"version":3,"sources":["meteor://ðŸ’»app/packages/facebook-oauth/facebook_server.js"],"names":["_objectSpread","module","link","default","v","crypto","Accounts","Facebook","API_VERSION","Meteor","settings","public","packages","apiVersion","handleAuthFromAccessToken","accessToken","expiresAt","whitelisted","identity","getIdentity","fields","forEach","field","serviceData","options","profile","name","registerLoginHandler","request","facebookSignIn","facebookData","Date","expirationTime","updateOrCreateUserFromExternalService","OAuth","registerService","query","response","getTokenResponse","expiresIn","getAbsoluteUrlOptions","overrideRootUrlFromStateRedirectUrl","undefined","state","_stateFromQuery","redirectUrl","URL","rootUrl","origin","e","console","error","config","ServiceConfiguration","configurations","findOne","service","ConfigError","absoluteUrlOptions","redirectUri","_redirectUri","_fetch","queryParams","client_id","appId","redirect_uri","client_secret","openSecret","secret","code","then","res","json","data","fbAccessToken","access_token","fbExpires","expires_in","Error","catch","err","Object","assign","message","hmac","createHmac","update","appsecret_proof","digest","join","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/facebook-oauth.js","sourcesContent":["Facebook = {};\nimport crypto from 'crypto';\nimport { Accounts } from 'meteor/accounts-base';\n\nconst API_VERSION = Meteor.settings?.public?.packages?.['facebook-oauth']?.apiVersion || '13.0';\n\nFacebook.handleAuthFromAccessToken = async (accessToken, expiresAt) => {\n  // include basic fields from facebook\n  // https://developers.facebook.com/docs/facebook-login/permissions/\n  const whitelisted = ['id', 'email', 'name', 'first_name', 'last_name',\n    'middle_name', 'name_format', 'picture', 'short_name'];\n\n  const identity = await getIdentity(accessToken, whitelisted);\n\n  const fields = {};\n  whitelisted.forEach(field => fields[field] = identity[field]);\n  const serviceData = {\n    accessToken,\n    expiresAt,\n    ...fields,\n  };\n\n  return {\n    serviceData,\n    options: {profile: {name: identity.name}}\n  };\n};\n\nAccounts.registerLoginHandler(request => {\n  if (request.facebookSignIn !== true) {\n    return;\n  }\n  const facebookData = Facebook.handleAuthFromAccessToken(request.accessToken, (+new Date) + (1000 * request.expirationTime));\n  return Accounts.updateOrCreateUserFromExternalService('facebook', facebookData.serviceData, facebookData.options);\n});\n\nOAuth.registerService('facebook', 2, null, async query => {\n  const response = await getTokenResponse(query);\n  const { accessToken } = response;\n  const { expiresIn } = response;\n\n  return Facebook.handleAuthFromAccessToken(accessToken, (+new Date) + (1000 * expiresIn));\n});\n\nfunction getAbsoluteUrlOptions(query) {\n  const overrideRootUrlFromStateRedirectUrl = Meteor.settings?.packages?.['facebook-oauth']?.overrideRootUrlFromStateRedirectUrl;\n  if (!overrideRootUrlFromStateRedirectUrl) {\n    return undefined;\n  }\n  try {\n    const state = OAuth._stateFromQuery(query) || {};\n    const redirectUrl = new URL(state.redirectUrl);\n    return {\n      rootUrl: redirectUrl.origin,\n    };\n  } catch (e) {\n    console.error(\n      `Failed to complete OAuth handshake with Facebook because it was not able to obtain the redirect url from the state and you are using overrideRootUrlFromStateRedirectUrl.`, e\n    );\n    return undefined;\n  }\n}\n\n/**\n * @typedef {Object} UserAccessToken\n * @property {string} accessToken - User access Token\n * @property {number} expiresIn - lifetime of token in seconds\n */\n/**\n * @async\n * @function getTokenResponse\n * @param {Object} query - An object with the code.\n * @returns {Promise<UserAccessToken>} - Promise with an Object containing the accessToken and expiresIn (lifetime of token in seconds)\n */\nconst getTokenResponse = async (query) => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'facebook',\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n\n  const absoluteUrlOptions = getAbsoluteUrlOptions(query);\n  const redirectUri = OAuth._redirectUri('facebook', config, undefined, absoluteUrlOptions);\n\n  return OAuth._fetch(\n    `https://graph.facebook.com/v${API_VERSION}/oauth/access_token`,\n    'GET',\n    {\n      queryParams: {\n        client_id: config.appId,\n        redirect_uri: redirectUri,\n        client_secret: OAuth.openSecret(config.secret),\n        code: query.code,\n      },\n    }\n  )\n    .then((res) => res.json())\n    .then(data => {\n      const fbAccessToken = data.access_token;\n      const fbExpires = data.expires_in;\n      if (!fbAccessToken) {\n        throw new Error(\"Failed to complete OAuth handshake with facebook \" +\n          `-- can't find access token in HTTP response. ${data}`);\n      }\n      return {\n        accessToken: fbAccessToken,\n        expiresIn: fbExpires\n      };\n    })\n    .catch((err) => {\n      throw Object.assign(\n        new Error(\n          `Failed to complete OAuth handshake with Facebook. ${err.message}`\n        ),\n        { response: err.response }\n      );\n    });\n};\n\nconst getIdentity = async (accessToken, fields) => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'facebook',\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n\n  // Generate app secret proof that is a sha256 hash of the app access token, with the app secret as the key\n  // https://developers.facebook.com/docs/graph-api/securing-requests#appsecret_proof\n  const hmac = crypto.createHmac('sha256', OAuth.openSecret(config.secret));\n  hmac.update(accessToken);\n\n  return OAuth._fetch(`https://graph.facebook.com/v${API_VERSION}/me`, 'GET', {\n    queryParams: {\n      access_token: accessToken,\n      appsecret_proof: hmac.digest('hex'),\n      fields: fields.join(','),\n    },\n  })\n    .then((res) => res.json())\n    .catch((err) => {\n      throw Object.assign(\n        new Error(`Failed to fetch identity from Facebook. ${err.message}`),\n        { response: err.response }\n      );\n    });\n};\n\nFacebook.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n\n"]}