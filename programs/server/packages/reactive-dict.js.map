{"version":3,"sources":["meteor://ðŸ’»app/packages/reactive-dict/migration.js","meteor://ðŸ’»app/packages/reactive-dict/reactive-dict.js"],"names":["module","export","ReactiveDict","link","v","hasOwn","Object","prototype","hasOwnProperty","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","call","data","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData","stringify","value","undefined","EJSON","parse","serialized","changed","constructor","dictData","keys","migratedData","_setObject","name","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","forEach","clear","oldKeys","delete","didRemove","destroy","object"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["import { ReactiveDict } from './reactive-dict';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (hasOwn.call(ReactiveDict._migratedDictData, dictName)) {\n    const data = ReactiveDict._migratedDictData[dictName];\n    delete ReactiveDict._migratedDictData[dictName];\n    return data;\n  }\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (hasOwn.call(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n\nexport { ReactiveDict };\n","const hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]}