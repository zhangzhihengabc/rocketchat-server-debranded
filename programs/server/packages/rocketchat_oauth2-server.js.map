{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_oauth2-server/model.coffee","meteor://ðŸ’»app/model.coffee","meteor://ðŸ’»app/packages/rocketchat_oauth2-server/oauth.coffee","meteor://ðŸ’»app/oauth.coffee"],"names":["AccessTokens","AuthCodes","Clients","Model","RefreshTokens","debug","constructor","config","accessTokensCollectionName","refreshTokensCollectionName","clientsCollectionName","authCodesCollectionName","accessTokensCollection","Meteor","Collection","refreshTokensCollection","clientsCollection","authCodesCollection","grantTypeAllowed","clientId","grantType","callback","console","log","prototype","getAccessToken","bindEnvironment","bearerToken","e","token","findOne","accessToken","error","getClient","clientSecret","client","active","saveAccessToken","expires","user","tokenId","insert","userId","id","getAuthCode","authCode","code","saveAuthCode","codeId","upsert","saveRefreshToken","refreshToken","getRefreshToken","call","express","oauthserver","Npm","require","OAuth2Server","app","routes","model","oauth","grants","publishAuhorizedClients","initRoutes","publish","ready","users","find","_id","fields","debugMiddleware","self","transformRequestsNotUsingFormUrlencodedType","req","res","next","method","url","is","headers","body","Object","assign","query","all","grant","get","client_id","redirect","concat","redirectUri","includes","redirect_uri","post","sendStatus","send","Accounts","_hashLoginToken","authCodeGrant","allow","update","$addToSet","use","errorHandler"],"mappings":"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","file":"/packages/rocketchat_oauth2-server.js","sourcesContent":["AccessTokens = undefined\nRefreshTokens = undefined\nClients = undefined\nAuthCodes = undefined\ndebug = undefined\n\n@Model = class Model\n\tconstructor: (config={}) ->\n\t\tconfig.accessTokensCollectionName ?= 'oauth_access_tokens'\n\t\tconfig.refreshTokensCollectionName ?= 'oauth_refresh_tokens'\n\t\tconfig.clientsCollectionName ?= 'oauth_clients'\n\t\tconfig.authCodesCollectionName ?= 'oauth_auth_codes'\n\n\t\t@debug = debug = config.debug\n\n\t\t@AccessTokens = AccessTokens = config.accessTokensCollection or new Meteor.Collection config.accessTokensCollectionName\n\t\t@RefreshTokens = RefreshTokens = config.refreshTokensCollection or new Meteor.Collection config.refreshTokensCollectionName\n\t\t@Clients = Clients = config.clientsCollection or new Meteor.Collection config.clientsCollectionName\n\t\t@AuthCodes = AuthCodes = config.authCodesCollection or new Meteor.Collection config.authCodesCollectionName\n\n\n\tgetAccessToken: Meteor.bindEnvironment (bearerToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')'\n\n\t\ttry\n\t\t\ttoken = AccessTokens.findOne accessToken: bearerToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetClient: Meteor.bindEnvironment (clientId, clientSecret, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')'\n\n\t\ttry\n\t\t\tif not clientSecret?\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId }\n\t\t\telse\n\t\t\t\tclient = Clients.findOne { active: true, clientId: clientId, clientSecret: clientSecret }\n\t\t\tcallback null, client\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgrantTypeAllowed: (clientId, grantType, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')'\n\n\t\treturn callback(false, grantType in ['authorization_code', 'refresh_token'])\n\n\n\tsaveAccessToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = AccessTokens.insert\n\t\t\t\taccessToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetAuthCode: Meteor.bindEnvironment (authCode, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')'\n\n\t\ttry\n\t\t\tcode = AuthCodes.findOne authCode: authCode\n\t\t\tcallback null, code\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveAuthCode: Meteor.bindEnvironment (code, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')'\n\n\t\ttry\n\t\t\tcodeId = AuthCodes.upsert\n\t\t\t\tauthCode: code\n\t\t\t,\n\t\t\t\tauthCode: code\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\tcallback null, codeId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tsaveRefreshToken: Meteor.bindEnvironment (token, clientId, expires, user, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')'\n\n\t\ttry\n\t\t\ttokenId = RefreshTokens.insert\n\t\t\t\trefreshToken: token\n\t\t\t\tclientId: clientId\n\t\t\t\tuserId: user.id\n\t\t\t\texpires: expires\n\n\t\t\t\tcallback null, tokenId\n\t\tcatch e\n\t\t\tcallback e\n\n\n\tgetRefreshToken: Meteor.bindEnvironment (refreshToken, callback) ->\n\t\tif debug is true\n\t\t\tconsole.log '[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')'\n\n\t\ttry\n\t\t\ttoken = RefreshTokens.findOne refreshToken: refreshToken\n\t\t\tcallback null, token\n\t\tcatch e\n\t\t\tcallback e\n","var AccessTokens, AuthCodes, Clients, Model, RefreshTokens, debug;\n\nAccessTokens = void 0;\n\nRefreshTokens = void 0;\n\nClients = void 0;\n\nAuthCodes = void 0;\n\ndebug = void 0;\n\nthis.Model = Model = (function() {\n  class Model {\n    constructor(config = {}) {\n      if (config.accessTokensCollectionName == null) {\n        config.accessTokensCollectionName = 'oauth_access_tokens';\n      }\n      if (config.refreshTokensCollectionName == null) {\n        config.refreshTokensCollectionName = 'oauth_refresh_tokens';\n      }\n      if (config.clientsCollectionName == null) {\n        config.clientsCollectionName = 'oauth_clients';\n      }\n      if (config.authCodesCollectionName == null) {\n        config.authCodesCollectionName = 'oauth_auth_codes';\n      }\n      this.debug = debug = config.debug;\n      this.AccessTokens = AccessTokens = config.accessTokensCollection || new Meteor.Collection(config.accessTokensCollectionName);\n      this.RefreshTokens = RefreshTokens = config.refreshTokensCollection || new Meteor.Collection(config.refreshTokensCollectionName);\n      this.Clients = Clients = config.clientsCollection || new Meteor.Collection(config.clientsCollectionName);\n      this.AuthCodes = AuthCodes = config.authCodesCollection || new Meteor.Collection(config.authCodesCollectionName);\n    }\n\n    grantTypeAllowed(clientId, grantType, callback) {\n      if (debug === true) {\n        console.log('[OAuth2Server]', 'in grantTypeAllowed (clientId:', clientId, ', grantType:', grantType + ')');\n      }\n      return callback(false, grantType === 'authorization_code' || grantType === 'refresh_token');\n    }\n\n  };\n\n  Model.prototype.getAccessToken = Meteor.bindEnvironment(function(bearerToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAccessToken (bearerToken:', bearerToken, ')');\n    }\n    try {\n      token = AccessTokens.findOne({\n        accessToken: bearerToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getClient = Meteor.bindEnvironment(function(clientId, clientSecret, callback) {\n    var client, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getClient (clientId:', clientId, ', clientSecret:', clientSecret, ')');\n    }\n    try {\n      if (clientSecret == null) {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId\n        });\n      } else {\n        client = Clients.findOne({\n          active: true,\n          clientId: clientId,\n          clientSecret: clientSecret\n        });\n      }\n      return callback(null, client);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAccessToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAccessToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      tokenId = AccessTokens.insert({\n        accessToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, tokenId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getAuthCode = Meteor.bindEnvironment(function(authCode, callback) {\n    var code, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getAuthCode (authCode: ' + authCode + ')');\n    }\n    try {\n      code = AuthCodes.findOne({\n        authCode: authCode\n      });\n      return callback(null, code);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveAuthCode = Meteor.bindEnvironment(function(code, clientId, expires, user, callback) {\n    var codeId, e;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveAuthCode (code:', code, ', clientId:', clientId, ', expires:', expires, ', user:', user, ')');\n    }\n    try {\n      codeId = AuthCodes.upsert({\n        authCode: code\n      }, {\n        authCode: code,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      });\n      return callback(null, codeId);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.saveRefreshToken = Meteor.bindEnvironment(function(token, clientId, expires, user, callback) {\n    var e, tokenId;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in saveRefreshToken (token:', token, ', clientId:', clientId, ', user:', user, ', expires:', expires, ')');\n    }\n    try {\n      return tokenId = RefreshTokens.insert({\n        refreshToken: token,\n        clientId: clientId,\n        userId: user.id,\n        expires: expires\n      }, callback(null, tokenId));\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  Model.prototype.getRefreshToken = Meteor.bindEnvironment(function(refreshToken, callback) {\n    var e, token;\n    if (debug === true) {\n      console.log('[OAuth2Server]', 'in getRefreshToken (refreshToken: ' + refreshToken + ')');\n    }\n    try {\n      token = RefreshTokens.findOne({\n        refreshToken: refreshToken\n      });\n      return callback(null, token);\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n  });\n\n  return Model;\n\n}).call(this);\n","oauthserver = Npm.require('oauth2-server')\nexpress = Npm.require('express')\n\n# WebApp.rawConnectHandlers.use app\n# JsonRoutes.Middleware.use app\n\n\nclass OAuth2Server\n\tconstructor: (@config={}) ->\n\t\t@app = express()\n\n\t\t@routes = express()\n\n\t\t@model = new Model(@config)\n\n\t\t@oauth = oauthserver\n\t\t\tmodel: @model\n\t\t\tgrants: ['authorization_code', 'refresh_token']\n\t\t\tdebug: @config.debug\n\n\t\t@publishAuhorizedClients()\n\t\t@initRoutes()\n\n\t\treturn @\n\n\n\tpublishAuhorizedClients: ->\n\t\tMeteor.publish 'authorizedOAuth', ->\n\t\t\t\tif not @userId?\n\t\t\t\t\treturn @ready()\n\n\t\t\t\treturn Meteor.users.find\n\t\t\t\t\t_id: @userId\n\t\t\t\t,\n\t\t\t\t\tfields:\n\t\t\t\t\t\t'oauth.authorizedClients': 1\n\n\t\t\t\treturn user?\n\n\n\tinitRoutes: ->\n\t\tself = @\n\t\tdebugMiddleware = (req, res, next) ->\n\t\t\tif self.config.debug is true\n\t\t\t\tconsole.log '[OAuth2Server]', req.method, req.url\n\t\t\tnext()\n\n\t\t# Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n\t\t# and they pass the required information as query strings\n\t\ttransformRequestsNotUsingFormUrlencodedType = (req, res, next) ->\n\t\t\tif not req.is('application/x-www-form-urlencoded') and req.method is 'POST'\n\t\t\t\tif self.config.debug is true\n\t\t\t\t\tconsole.log '[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.'\n\t\t\t\treq.headers['content-type'] = 'application/x-www-form-urlencoded'\n\t\t\t\treq.body = Object.assign {}, req.body, req.query\n\t\t\tnext()\n\n\t\t@app.all '/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, @oauth.grant()\n\n\t\t@app.get '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tclient = self.model.Clients.findOne({ active: true, clientId: req.query.client_id })\n\t\t\tif not client?\n\t\t\t\treturn res.redirect '/oauth/error/404'\n\n\t\t\tif not [].concat(client.redirectUri).includes(req.query.redirect_uri)\n\t\t\t\treturn res.redirect '/oauth/error/invalid_redirect_uri'\n\n\t\t\tnext()\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, Meteor.bindEnvironment (req, res, next) ->\n\t\t\tif not req.body.token?\n\t\t\t\treturn res.sendStatus(401).send('No token')\n\n\t\t\tuser = Meteor.users.findOne\n\t\t\t\t'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken req.body.token\n\n\t\t\tif not user?\n\t\t\t\treturn res.sendStatus(401).send('Invalid token')\n\n\t\t\treq.user =\n\t\t\t\tid: user._id\n\n\t\t\tnext()\n\n\n\t\t@app.post '/oauth/authorize', debugMiddleware, @oauth.authCodeGrant (req, next) ->\n\t\t\tif req.body.allow is 'yes'\n\t\t\t\tMeteor.users.update req.user.id, {$addToSet: {'oauth.authorizedClients': @clientId}}\n\n\t\t\tnext(null, req.body.allow is 'yes', req.user)\n\n\t\t@app.use @routes\n\n\t\t@app.all '/oauth/*', @oauth.errorHandler()\n","var express, oauthserver;              \n\noauthserver = Npm.require('oauth2-server');\n\nexpress = Npm.require('express');\n\n// WebApp.rawConnectHandlers.use app\n// JsonRoutes.Middleware.use app\nOAuth2Server = class OAuth2Server {\n  constructor(config = {}) {\n    this.config = config;\n    this.app = express();\n    this.routes = express();\n    this.model = new Model(this.config);\n    this.oauth = oauthserver({\n      model: this.model,\n      grants: ['authorization_code', 'refresh_token'],\n      debug: this.config.debug\n    });\n    this.publishAuhorizedClients();\n    this.initRoutes();\n    return this;\n  }\n\n  publishAuhorizedClients() {\n    return Meteor.publish('authorizedOAuth', function() {\n      if (this.userId == null) {\n        return this.ready();\n      }\n      return Meteor.users.find({\n        _id: this.userId\n      }, {\n        fields: {\n          'oauth.authorizedClients': 1\n        }\n      });\n      return typeof user !== \"undefined\" && user !== null;\n    });\n  }\n\n  initRoutes() {\n    var debugMiddleware, self, transformRequestsNotUsingFormUrlencodedType;\n    self = this;\n    debugMiddleware = function(req, res, next) {\n      if (self.config.debug === true) {\n        console.log('[OAuth2Server]', req.method, req.url);\n      }\n      return next();\n    };\n    // Transforms requests which are POST and aren't \"x-www-form-urlencoded\" content type\n    // and they pass the required information as query strings\n    transformRequestsNotUsingFormUrlencodedType = function(req, res, next) {\n      if (!req.is('application/x-www-form-urlencoded') && req.method === 'POST') {\n        if (self.config.debug === true) {\n          console.log('[OAuth2Server]', 'Transforming a request to form-urlencoded with the query going to the body.');\n        }\n        req.headers['content-type'] = 'application/x-www-form-urlencoded';\n        req.body = Object.assign({}, req.body, req.query);\n      }\n      return next();\n    };\n    this.app.all('/oauth/token', debugMiddleware, transformRequestsNotUsingFormUrlencodedType, this.oauth.grant());\n    this.app.get('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var client;\n      client = self.model.Clients.findOne({\n        active: true,\n        clientId: req.query.client_id\n      });\n      if (client == null) {\n        return res.redirect('/oauth/error/404');\n      }\n      if (![].concat(client.redirectUri).includes(req.query.redirect_uri)) {\n        return res.redirect('/oauth/error/invalid_redirect_uri');\n      }\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, Meteor.bindEnvironment(function(req, res, next) {\n      var user;\n      if (req.body.token == null) {\n        return res.sendStatus(401).send('No token');\n      }\n      user = Meteor.users.findOne({\n        'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(req.body.token)\n      });\n      if (user == null) {\n        return res.sendStatus(401).send('Invalid token');\n      }\n      req.user = {\n        id: user._id\n      };\n      return next();\n    }));\n    this.app.post('/oauth/authorize', debugMiddleware, this.oauth.authCodeGrant(function(req, next) {\n      if (req.body.allow === 'yes') {\n        Meteor.users.update(req.user.id, {\n          $addToSet: {\n            'oauth.authorizedClients': this.clientId\n          }\n        });\n      }\n      return next(null, req.body.allow === 'yes', req.user);\n    }));\n    this.app.use(this.routes);\n    return this.app.all('/oauth/*', this.oauth.errorHandler());\n  }\n\n};\n"]}