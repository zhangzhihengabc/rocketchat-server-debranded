{"version":3,"sources":["meteor://ðŸ’»app/packages/pauli:linkedin-oauth/linkedin-server.js"],"names":["_objectSpread","module","link","default","v","export","Linkedin","fetch","OAuth","ServiceConfiguration","getTokenResponse","query","config","configurations","findOneAsync","service","ConfigError","responseContent","body","URLSearchParams","grant_type","client_id","clientId","client_secret","openSecret","secret","code","redirect_uri","_redirectUri","response","method","headers","ok","Error","error_description","json","err","message","accessToken","access_token","expiresIn","expires_in","JSON","stringify","getIdentity","url","encodeURI","request","Authorization","text","registerService","identity","sub","given_name","family_name","picture","email","fields","linkedinId","firstName","lastName","profilePicture","emailAddress","serviceData","id","expiresAt","Date","options","profile","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/pauli_linkedin-oauth.js","sourcesContent":["import { fetch } from 'meteor/fetch';\nimport { OAuth } from 'meteor/oauth';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\n\nexport const Linkedin = {};\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nconst getTokenResponse = async function (query) {\n\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: 'linkedin' });\n\tif (!config) throw new ServiceConfiguration.ConfigError('Service not configured');\n\n\tlet responseContent;\n\ttry {\n\t\t// Request an access token\n\t\tconst body = new URLSearchParams({\n\t\t\tgrant_type: 'authorization_code',\n\t\t\tclient_id: config.clientId,\n\t\t\tclient_secret: OAuth.openSecret(config.secret),\n\t\t\tcode: query.code,\n\t\t\tredirect_uri: OAuth._redirectUri('linkedin', config),\n\t\t});\n\n\t\tconst response = await fetch('https://api.linkedin.com/uas/oauth2/accessToken', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t},\n\t\t\tbody,\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(responseContent.error_description);\n\t\t}\n\n\t\tresponseContent = await response.json();\n\t} catch (err) {\n\t\tthrow new Error(`Failed to complete OAuth handshake with Linkedin. ${err.message}`);\n\t}\n\n\t// Success! Extract access token and expiration\n\tconst accessToken = responseContent.access_token;\n\tconst expiresIn = responseContent.expires_in;\n\n\tif (!accessToken) {\n\t\tthrow new Error(`Failed to complete OAuth handshake with Linkedin -- can't find access token in HTTP response. ${JSON.stringify(responseContent)}`);\n\t}\n\n\treturn {\n\t\taccessToken,\n\t\texpiresIn,\n\t};\n};\n\n// Request available fields from profile\nconst getIdentity = async function (accessToken) {\n\ttry {\n\t\tconst url = encodeURI(\n\t\t\t`https://api.linkedin.com/v2/userinfo`,\n\t\t);\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t},\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(await request.text());\n\t\t}\n\n\t\treturn request.json();\n\t} catch (err) {\n\t\tthrow new Error(`Failed to fetch identity from Linkedin. ${err.message}`);\n\t}\n};\n\nOAuth.registerService('linkedin', 2, null, async (query) => {\n\tconst response = await getTokenResponse(query);\n\tconst { accessToken } = response;\n\tconst identity = await getIdentity(accessToken);\n\n\tconst { sub, given_name, family_name, picture, email } = identity;\n\n\tif (!sub) {\n\t\tthrow new Error('Linkedin did not provide an id');\n\t}\n\n\tconst fields = {\n\t\tlinkedinId: sub,\n\t\tfirstName: given_name,\n\t\tlastName: family_name,\n\t\tprofilePicture: picture,\n\t\temailAddress: email,\n\t\temail\n\t};\n\n\tconst serviceData = {\n\t\tid: sub,\n\t\taccessToken,\n\t\texpiresAt: +new Date() + 1000 * response.expiresIn,\n\t\t...fields,\n\t};\n\n\treturn {\n\t\tserviceData,\n\t\toptions: {\n\t\t\tprofile: fields,\n\t\t},\n\t};\n});\n\nLinkedin.retrieveCredential = function (credentialToken, credentialSecret) {\n\treturn OAuth.retrieveCredential(credentialToken, credentialSecret);\n};\n"]}