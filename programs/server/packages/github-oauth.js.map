{"version":3,"sources":["meteor://ðŸ’»app/packages/github-oauth/github_server.js"],"names":["Github","OAuth","registerService","query","accessToken","getAccessToken","identity","getIdentity","emails","getEmails","primaryEmail","find","email","primary","serviceData","id","sealSecret","username","login","name","avatar","avatar_url","company","blog","location","bio","options","profile","userAgent","Meteor","release","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","content","URLSearchParams","client_id","clientId","client_secret","secret","code","redirect_uri","_redirectUri","request","fetch","toString","method","headers","Accept","json","err","Object","assign","Error","message","error","access_token","Authorization","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/github-oauth.js","sourcesContent":["Github = {};\n\nOAuth.registerService('github', 2, null, async (query) => {\n  const accessToken = await getAccessToken(query);\n  const identity = await getIdentity(accessToken);\n  const emails = await getEmails(accessToken);\n  const primaryEmail = emails.find((email) => email.primary);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: OAuth.sealSecret(accessToken),\n      email: identity.email || (primaryEmail && primaryEmail.email) || '',\n      username: identity.login,\n      name: identity.name,\n      avatar: identity.avatar_url,\n      company: identity.company,\n      blog: identity.blog,\n      location: identity.location,\n      bio: identity.bio,\n      emails\n    },\n    options: { profile: { name: identity.name } }\n  };\n});\n\n// http://developer.github.com/v3/#user-agent-required\nlet userAgent = 'Meteor';\nif (Meteor.release) userAgent += `/${Meteor.release}`;\n\nconst getAccessToken = async (query) => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'github'\n  });\n  if (!config) throw new ServiceConfiguration.ConfigError();\n\n  let response;\n  try {\n    const content = new URLSearchParams({\n      client_id: config.clientId,\n      client_secret: config.secret,\n      code: query.code,\n      redirect_uri: OAuth._redirectUri(\n        'github',\n        config\n      )\n    });\n    const request = await fetch(\n      `https://github.com/login/oauth/access_token?${content.toString()}`,\n      {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'User-Agent': userAgent\n        }\n      }\n    );\n    response = await request.json();\n  } catch (err) {\n    throw Object.assign(\n      new Error(\n        `Failed to complete OAuth handshake with Github. ${err.message}`\n      ),\n      { response: err.response }\n    );\n  }\n  if (response.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(\n      `Failed to complete OAuth handshake with GitHub. ${response.error}`\n    );\n  } else {\n    return response.access_token;\n  }\n};\n\nconst getIdentity = async (accessToken) => {\n  try {\n    const request = await fetch('https://api.github.com/user', {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'User-Agent': userAgent,\n        Authorization: `token ${accessToken}`\n      } // http://developer.github.com/v3/#user-agent-required\n    });\n    return await request.json();\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to fetch identity from Github. ${err.message}`),\n      { response: err.response }\n    );\n  }\n};\n\nconst getEmails = async (accessToken) => {\n  try {\n    const request = await fetch('https://api.github.com/user/emails', {\n      method: 'GET',\n      headers: {\n        'User-Agent': userAgent,\n        Accept: 'application/json',\n        Authorization: `token ${accessToken}`\n      } // http://developer.github.com/v3/#user-agent-required\n    });\n    return await request.json();\n  } catch (err) {\n    return [];\n  }\n};\n\nGithub.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]}