{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-google/notice.js","meteor://ðŸ’»app/packages/accounts-google/google.js"],"names":["Package","Object","prototype","hasOwnProperty","call","console","warn","_objectSpread","module","link","default","v","Accounts","oauth","registerService","Meteor","isClient","loginWithGoogle","options","callback","isCordova","Google","signIn","_options","restrictCreationByEmailDomain","loginUrlParameters","hd","credentialRequestCompleteCallback","credentialRequestCompleteHandler","requestCredential","registerClientLoginFunction","args","applyLoginFunction","addAutopublishFields","forLoggedInUser","whitelistedFields","concat","map","subfield","forOtherUsers","filter","field"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,OAAO,CAAC,aAAa,CAAC,IACnB,CAACA,OAAO,CAAC,uBAAuB,CAAC,IACjC,CAACC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,OAAO,EAAE,kBAAkB,CAAC,EAAE;EACzEK,OAAO,CAACC,IAAI,CACV,uDAAuD,GACvD,0DAA0D,GAC1D,mCAAmC,GACnC,IAAI,GACJ,iCAAiC,GACjC,IAAI,CACL;AACH,C;;;;;;;;;;;ACXA,IAAIC,aAAa;AAACC,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAO,CAACC,CAAC,EAAC;IAACJ,aAAa,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAArGC,QAAQ,CAACC,KAAK,CAACC,eAAe,CAAC,QAAQ,CAAC;AAExC,IAAIC,MAAM,CAACC,QAAQ,EAAE;EACnB,MAAMC,eAAe,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;IAC7C;IACA,IAAI,CAAEA,QAAQ,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MAC/CC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,IAAI;IAChB;IAEA,IAAIH,MAAM,CAACK,SAAS,IAChBC,MAAM,CAACC,MAAM,EAAE;MACjB;MACA;MACA;MACAD,MAAM,CAACC,MAAM,CAACJ,OAAO,EAAEC,QAAQ,CAAC;MAChC;IACF;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAOP,QAAQ,CAACW,QAAQ,CAACC,6BAA6B,KAAK,QAAQ,EAAE;MACvEN,OAAO,qBAAQA,OAAO,CAAE;MACxBA,OAAO,CAACO,kBAAkB,qBAAQP,OAAO,CAACO,kBAAkB,CAAE;MAC9DP,OAAO,CAACO,kBAAkB,CAACC,EAAE,GAAGd,QAAQ,CAACW,QAAQ,CAACC,6BAA6B;IACjF;IACA,MAAMG,iCAAiC,GAAGf,QAAQ,CAACC,KAAK,CAACe,gCAAgC,CAACT,QAAQ,CAAC;IACnGE,MAAM,CAACQ,iBAAiB,CAACX,OAAO,EAAES,iCAAiC,CAAC;EACtE,CAAC;EACDf,QAAQ,CAACkB,2BAA2B,CAAC,QAAQ,EAAEb,eAAe,CAAC;EAC/DF,MAAM,CAACE,eAAe,GACpB;IAAA,kCAAIc,IAAI;MAAJA,IAAI;IAAA;IAAA,OAAKnB,QAAQ,CAACoB,kBAAkB,CAAC,QAAQ,EAAED,IAAI,CAAC;EAAA;AAC5D,CAAC,MAAM;EACLnB,QAAQ,CAACqB,oBAAoB,CAAC;IAC5BC,eAAe;IACb;IACA;IACA;IACA;IACAb,MAAM,CAACc,iBAAiB,CAACC,MAAM,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAACC,GAAG,CAC/DC,QAAQ,8BAAuBA,QAAQ,CAAE,CAAC;IAAA,CAC3C;;IAEHC,aAAa;IACX;IACA;IACAlB,MAAM,CAACc,iBAAiB,CAACK,MAAM,CAC7BC,KAAK,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,gBAAgB,CACzD,CAACJ,GAAG,CACHC,QAAQ,8BAAuBA,QAAQ,CAAE;EAE/C,CAAC,CAAC;AACJ,C","file":"/packages/accounts-google.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-google,\\n\" +\n    \"but didn't install the configuration UI for the Google\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add google-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  const loginWithGoogle = (options, callback) => {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova &&\n        Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = { ...options };\n      options.loginUrlParameters = { ...options.loginUrlParameters };\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = \n    (...args) => Accounts.applyLoginFunction('google', args);\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser:\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(\n        subfield => `services.google.${subfield}` // don't publish refresh token\n      ), \n\n    forOtherUsers: \n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      Google.whitelistedFields.filter(\n        field => field !== 'email' && field !== 'verified_email'\n      ).map(\n        subfield => `services.google.${subfield}`\n      ),\n  });\n}\n"]}