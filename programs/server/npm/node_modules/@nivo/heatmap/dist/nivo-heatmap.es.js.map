{"version":3,"file":"nivo-heatmap.es.js","sources":["../src/HeatMapTooltip.tsx","../src/defaults.ts","../src/compute.ts","../src/hooks.ts","../src/HeatMapCellRect.tsx","../src/HeatMapCellCircle.tsx","../src/HeatMapCells.tsx","../src/HeatMapCellAnnotations.tsx","../src/HeatMap.tsx","../src/ResponsiveHeatMap.tsx","../src/canvas.tsx","../src/HeatMapCanvas.tsx","../src/ResponsiveHeatMapCanvas.tsx"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { HeatMapDatum, TooltipProps } from './types'\n\nconst NonMemoizedHeatMapTooltip = <Datum extends HeatMapDatum>({ cell }: TooltipProps<Datum>) => {\n    if (cell.formattedValue === null) return null\n\n    return (\n        <BasicTooltip\n            id={`${cell.serieId} - ${cell.data.x}`}\n            value={cell.formattedValue}\n            enableChip={true}\n            color={cell.color}\n        />\n    )\n}\n\nexport const HeatMapTooltip = memo(NonMemoizedHeatMapTooltip) as typeof NonMemoizedHeatMapTooltip\n","import { DefaultHeatMapDatum, HeatMapCommonProps, LayerId } from './types'\nimport { HeatMapTooltip } from './HeatMapTooltip'\n\nexport const commonDefaultProps: Omit<\n    HeatMapCommonProps<DefaultHeatMapDatum>,\n    | 'margin'\n    | 'theme'\n    | 'valueFormat'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'role'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['grid', 'axes', 'cells', 'legends', 'annotations'],\n\n    forceSquare: false,\n    xInnerPadding: 0,\n    xOuterPadding: 0,\n    yInnerPadding: 0,\n    yOuterPadding: 0,\n    sizeVariation: false,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.15,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.8]] },\n\n    enableGridX: false,\n    enableGridY: false,\n\n    enableLabels: true,\n    label: 'formattedValue',\n    labelTextColor: { from: 'color', modifiers: [['darker', 2]] },\n\n    colors: {\n        type: 'sequential',\n        scheme: 'brown_blueGreen',\n    },\n    emptyColor: '#000000',\n\n    legends: [],\n    annotations: [],\n\n    isInteractive: true,\n    hoverTarget: 'rowColumn',\n    tooltip: HeatMapTooltip,\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    borderRadius: 0,\n    cellComponent: 'rect' as const,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    axisTop: {},\n    axisRight: null,\n    axisBottom: null,\n    axisLeft: {},\n    renderCell: 'rect' as const,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { scaleBand, scaleLinear } from 'd3-scale'\nimport { castBandScale } from '@nivo/scales'\nimport {\n    ComputedCell,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\n\nexport const computeLayout = ({\n    width: _width,\n    height: _height,\n    rows,\n    columns,\n    forceSquare,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    forceSquare: boolean\n}) => {\n    let width = _width\n    let height = _height\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (forceSquare) {\n        const cellWidth = Math.max(_width / columns, 0)\n        const cellHeight = Math.max(_height / rows, 0)\n        const cellSize = Math.min(cellWidth, cellHeight)\n\n        width = cellSize * columns\n        height = cellSize * rows\n\n        offsetX = (_width - width) / 2\n        offsetY = (_height - height) / 2\n    }\n\n    return {\n        offsetX,\n        offsetY,\n        width,\n        height,\n    }\n}\n\nexport const computeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width: _width,\n    height: _height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const serieIds: string[] = []\n    const allValues: number[] = []\n\n    const cells: Pick<ComputedCell<Datum>, 'id' | 'serieId' | 'value' | 'data'>[] = []\n\n    data.forEach(serie => {\n        serieIds.push(serie.id)\n\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n\n            let value: number | null = null\n            if (datum.y !== undefined && datum.y !== null) {\n                allValues.push(datum.y)\n                value = datum.y\n            }\n\n            cells.push({\n                id: `${serie.id}.${datum.x}`,\n                serieId: serie.id,\n                value,\n                data: datum,\n            })\n        })\n    })\n\n    const xValues = Array.from(xValuesSet)\n\n    const { width, height, offsetX, offsetY } = computeLayout({\n        width: _width,\n        height: _height,\n        columns: xValues.length,\n        rows: serieIds.length,\n        forceSquare,\n    })\n\n    const xScale = castBandScale<Datum['x']>(\n        scaleBand<Datum['x']>()\n            .domain(xValues)\n            .range([0, width])\n            .paddingOuter(xOuterPadding)\n            .paddingInner(xInnerPadding)\n    )\n\n    const yScale = castBandScale<string>(\n        scaleBand<string>()\n            .domain(serieIds)\n            .range([0, height])\n            .paddingOuter(yOuterPadding)\n            .paddingInner(yInnerPadding)\n    )\n\n    const cellWidth = xScale.bandwidth()\n    const cellHeight = yScale.bandwidth()\n\n    const cellsWithPosition: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[] = cells.map(cell => ({\n        ...cell,\n        x: xScale(cell.data.x)! + cellWidth / 2,\n        y: yScale(cell.serieId)! + cellHeight / 2,\n        width: cellWidth,\n        height: cellHeight,\n    }))\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        minValue: Math.min(...allValues),\n        maxValue: Math.max(...allValues),\n        cells: cellsWithPosition,\n    }\n}\n\nexport const computeSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) => {\n    if (!size) return () => 1\n\n    const scale = scaleLinear()\n        .domain(size.values ? size.values : [min, max])\n        .range(size.sizes)\n\n    return (value: number | null) => {\n        if (value === null) return 1\n        return scale(value)\n    }\n}\n\nexport const getCellAnnotationPosition = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    x: cell.x,\n    y: cell.y,\n})\n\nexport const getCellAnnotationDimensions = <Datum extends HeatMapDatum>(\n    cell: ComputedCell<Datum>\n) => ({\n    size: Math.max(cell.width, cell.height),\n    width: cell.width,\n    height: cell.height,\n})\n","import { useMemo, useCallback, useState } from 'react'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useInheritedColor, getContinuousColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport {\n    ComputedCell,\n    DefaultHeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapDataProps,\n    HeatMapDatum,\n    SizeVariationConfig,\n} from './types'\nimport { commonDefaultProps } from './defaults'\nimport {\n    computeCells,\n    computeSizeScale,\n    getCellAnnotationPosition,\n    getCellAnnotationDimensions,\n} from './compute'\n\nexport const useComputeCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    width,\n    height,\n    xInnerPadding,\n    xOuterPadding,\n    yInnerPadding,\n    yOuterPadding,\n    forceSquare,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    'xOuterPadding' | 'xInnerPadding' | 'yOuterPadding' | 'yInnerPadding' | 'forceSquare'\n>) =>\n    useMemo(\n        () =>\n            computeCells<Datum, ExtraProps>({\n                data,\n                width,\n                height,\n                xInnerPadding,\n                xOuterPadding,\n                yInnerPadding,\n                yOuterPadding,\n                forceSquare,\n            }),\n        [\n            data,\n            width,\n            height,\n            xInnerPadding,\n            xOuterPadding,\n            yInnerPadding,\n            yOuterPadding,\n            forceSquare,\n        ]\n    )\n\nconst isHoverTargetByType = {\n    cell: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.id === current.id,\n    row: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId,\n    column: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.data.x === current.data.x,\n    rowColumn: <Datum extends HeatMapDatum>(\n        cell: Omit<\n            ComputedCell<Datum>,\n            'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n        >,\n        current: ComputedCell<Datum>\n    ) => cell.serieId === current.serieId || cell.data.x === current.data.x,\n}\n\nconst useSizeScale = (\n    size: false | SizeVariationConfig,\n    min: number,\n    max: number\n): ((value: number | null) => number) =>\n    useMemo(() => computeSizeScale(size, min, max), [size, min, max])\n\nconst useCellsStyle = <Datum extends HeatMapDatum = DefaultHeatMapDatum>({\n    cells,\n    minValue,\n    maxValue,\n    sizeVariation,\n    colors,\n    emptyColor,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    label,\n    labelTextColor,\n    valueFormat,\n    activeIds,\n}: {\n    cells: Omit<\n        ComputedCell<Datum>,\n        'formattedValue' | 'color' | 'opacity' | 'borderColor' | 'label' | 'labelTextColor'\n    >[]\n    minValue: number\n    maxValue: number\n    valueFormat?: HeatMapCommonProps<Datum>['valueFormat']\n    activeIds: string[]\n} & Pick<\n    HeatMapCommonProps<Datum>,\n    | 'sizeVariation'\n    | 'colors'\n    | 'emptyColor'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'label'\n    | 'labelTextColor'\n>) => {\n    const getSize = useSizeScale(sizeVariation, minValue, maxValue)\n\n    const colorScale = useMemo(() => {\n        if (typeof colors === 'function') return null\n\n        return getContinuousColorScale(colors, {\n            min: minValue,\n            max: maxValue,\n        })\n    }, [colors, minValue, maxValue])\n\n    const getColor = useCallback(\n        (cell: Omit<ComputedCell<Datum>, 'color' | 'opacity' | 'borderColor'>) => {\n            if (cell.value !== null) {\n                if (typeof colors === 'function') return colors(cell)\n                if (colorScale !== null) return colorScale(cell.value)\n            }\n\n            return emptyColor\n        },\n        [colors, colorScale, emptyColor]\n    )\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n\n    const formatValue = useValueFormatter(valueFormat)\n    const getLabel = usePropertyAccessor(label)\n\n    const styledCells = useMemo(\n        () =>\n            cells.map(cell => {\n                let computedOpacity = opacity\n                if (activeIds.length > 0) {\n                    computedOpacity = activeIds.includes(cell.id) ? activeOpacity : inactiveOpacity\n                }\n\n                const sizeMultiplier = getSize(cell.value)\n\n                const computedCell = {\n                    ...cell,\n                    width: cell.width * sizeMultiplier,\n                    height: cell.height * sizeMultiplier,\n                    formattedValue: cell.value !== null ? formatValue(cell.value) : null,\n                    opacity: computedOpacity,\n                } as ComputedCell<Datum>\n\n                computedCell.label = getLabel(computedCell)\n                computedCell.color = getColor(computedCell)\n                computedCell.borderColor = getBorderColor(computedCell)\n                computedCell.labelTextColor = getLabelTextColor(computedCell)\n\n                return computedCell\n            }),\n        [\n            cells,\n            getSize,\n            getColor,\n            getBorderColor,\n            getLabelTextColor,\n            formatValue,\n            getLabel,\n            activeIds,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n        ]\n    )\n\n    return {\n        cells: styledCells,\n        colorScale,\n    }\n}\n\nexport const useHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    data,\n    valueFormat,\n    width: _width,\n    height: _height,\n    xOuterPadding = commonDefaultProps.xOuterPadding,\n    xInnerPadding = commonDefaultProps.xInnerPadding,\n    yOuterPadding = commonDefaultProps.yOuterPadding,\n    yInnerPadding = commonDefaultProps.yInnerPadding,\n    forceSquare = commonDefaultProps.forceSquare,\n    sizeVariation = commonDefaultProps.sizeVariation,\n    colors = commonDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = commonDefaultProps.emptyColor,\n    opacity = commonDefaultProps.opacity,\n    activeOpacity = commonDefaultProps.activeOpacity,\n    inactiveOpacity = commonDefaultProps.inactiveOpacity,\n    borderColor = commonDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    label = commonDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = commonDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    hoverTarget = commonDefaultProps.hoverTarget,\n}: {\n    data: HeatMapDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n} & Partial<\n    Pick<\n        HeatMapCommonProps<Datum>,\n        | 'valueFormat'\n        | 'xOuterPadding'\n        | 'xInnerPadding'\n        | 'yOuterPadding'\n        | 'yInnerPadding'\n        | 'forceSquare'\n        | 'sizeVariation'\n        | 'colors'\n        | 'emptyColor'\n        | 'opacity'\n        | 'activeOpacity'\n        | 'inactiveOpacity'\n        | 'borderColor'\n        | 'label'\n        | 'labelTextColor'\n        | 'hoverTarget'\n    >\n>) => {\n    const [activeCell, setActiveCell] = useState<ComputedCell<Datum> | null>(null)\n\n    const { width, height, offsetX, offsetY, cells, xScale, yScale, minValue, maxValue } =\n        useComputeCells<Datum, ExtraProps>({\n            data,\n            width: _width,\n            height: _height,\n            xOuterPadding,\n            xInnerPadding,\n            yOuterPadding,\n            yInnerPadding,\n            forceSquare,\n        })\n\n    const activeIds = useMemo(() => {\n        if (!activeCell) return []\n\n        const isHoverTarget = isHoverTargetByType[hoverTarget]\n\n        return cells.filter(cell => isHoverTarget(cell, activeCell)).map(cell => cell.id)\n    }, [cells, activeCell, hoverTarget])\n\n    const { cells: computedCells, colorScale } = useCellsStyle<Datum>({\n        cells,\n        minValue,\n        maxValue,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        valueFormat,\n        activeIds,\n    })\n\n    return {\n        width,\n        height,\n        offsetX,\n        offsetY,\n        cells: computedCells,\n        xScale,\n        yScale,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    }\n}\n\nexport const useCellAnnotations = <Datum extends HeatMapDatum>(\n    cells: ComputedCell<Datum>[],\n    annotations: AnnotationMatcher<ComputedCell<Datum>>[]\n) =>\n    useAnnotations<ComputedCell<Datum>>({\n        data: cells,\n        annotations,\n        getPosition: getCellAnnotationPosition,\n        getDimensions: getCellAnnotationDimensions,\n    })\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CellComponentProps, HeatMapDatum } from './types'\n\nconst NonMemoizedHeatMapCellRect = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    borderRadius,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to(\n                [animatedProps.x, animatedProps.y, animatedProps.scale],\n                (x, y, scale) => `translate(${x}, ${y}) scale(${scale})`\n            )}\n        >\n            <animated.rect\n                transform={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => `translate(${width * -0.5}, ${height * -0.5})`\n                )}\n                key={cell.id}\n                fill={animatedProps.color}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                stroke={animatedProps.borderColor}\n                strokeWidth={borderWidth}\n                rx={borderRadius}\n                ry={borderRadius}\n            />\n            {enableLabels && (\n                <animated.text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                        userSelect: 'none',\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellRect = memo(NonMemoizedHeatMapCellRect) as typeof NonMemoizedHeatMapCellRect\n","import { memo, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { HeatMapDatum, CellComponentProps } from './types'\n\nconst NonMemoizedHeatMapCellCircle = <Datum extends HeatMapDatum>({\n    cell,\n    borderWidth,\n    animatedProps,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    enableLabels,\n}: CellComponentProps<Datum>) => {\n    const theme = useTheme()\n\n    const handlers = useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter ? onMouseEnter(cell) : undefined,\n            onMouseMove: onMouseMove ? onMouseMove(cell) : undefined,\n            onMouseLeave: onMouseLeave ? onMouseLeave(cell) : undefined,\n            onClick: onClick ? onClick(cell) : undefined,\n        }),\n        [cell, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\n    return (\n        <animated.g\n            data-testid={`cell.${cell.id}`}\n            style={{ cursor: 'pointer' }}\n            opacity={animatedProps.opacity}\n            {...handlers}\n            transform={to([animatedProps.x, animatedProps.y], (x, y) => `translate(${x}, ${y})`)}\n        >\n            <animated.circle\n                r={to(\n                    [animatedProps.width, animatedProps.height],\n                    (width, height) => Math.min(width, height) / 2\n                )}\n                fill={animatedProps.color}\n                fillOpacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n            />\n            {enableLabels && (\n                <animated.text\n                    dominantBaseline=\"central\"\n                    textAnchor=\"middle\"\n                    fill={animatedProps.labelTextColor}\n                    style={{\n                        ...theme.labels.text,\n                        fill: undefined,\n                    }}\n                >\n                    {cell.label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n\nexport const HeatMapCellCircle = memo(\n    NonMemoizedHeatMapCellCircle\n) as typeof NonMemoizedHeatMapCellCircle\n","import { createElement, MouseEvent, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    CellComponent,\n    ComputedCell,\n    HeatMapDatum,\n    HeatMapSvgProps,\n    CellAnimatedProps,\n} from './types'\nimport { HeatMapCellRect } from './HeatMapCellRect'\nimport { HeatMapCellCircle } from './HeatMapCellCircle'\n\ninterface HeatMapCellsProps<Datum extends HeatMapDatum, ExtraProps extends object> {\n    cells: ComputedCell<Datum>[]\n    cellComponent: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['cellComponent']>\n    borderRadius: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderRadius']>\n    borderWidth: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['borderWidth']>\n    isInteractive: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['isInteractive']>\n    setActiveCell: (cell: ComputedCell<Datum> | null) => void\n    onMouseEnter: HeatMapSvgProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove: HeatMapSvgProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave: HeatMapSvgProps<Datum, ExtraProps>['onMouseLeave']\n    onClick: HeatMapSvgProps<Datum, ExtraProps>['onClick']\n    tooltip: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['tooltip']>\n    enableLabels: NonNullable<HeatMapSvgProps<Datum, ExtraProps>['enableLabels']>\n}\n\nconst enterTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nconst regularTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: cell.opacity,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 1,\n})\n\nconst exitTransition = <Datum extends HeatMapDatum>(cell: ComputedCell<Datum>) => ({\n    x: cell.x,\n    y: cell.y,\n    width: cell.width,\n    height: cell.height,\n    color: cell.color,\n    opacity: 0,\n    borderColor: cell.borderColor,\n    labelTextColor: cell.labelTextColor,\n    scale: 0,\n})\n\nexport const HeatMapCells = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    cells,\n    cellComponent,\n    borderRadius,\n    borderWidth,\n    isInteractive,\n    setActiveCell,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    enableLabels,\n}: HeatMapCellsProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<ComputedCell<Datum>, CellAnimatedProps>(cells, {\n        keys: (cell: ComputedCell<Datum>) => cell.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            setActiveCell(cell)\n            onMouseEnter?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, setActiveCell, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            onMouseMove?.(cell, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            hideTooltip()\n            setActiveCell(null)\n            onMouseLeave?.(cell, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveCell, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (cell: ComputedCell<Datum>) => (event: MouseEvent) => {\n            onClick?.(cell, event)\n        }\n    }, [isInteractive, onClick])\n\n    let Cell: CellComponent<Datum>\n    if (cellComponent === 'rect') {\n        Cell = HeatMapCellRect\n    } else if (cellComponent === 'circle') {\n        Cell = HeatMapCellCircle\n    } else {\n        Cell = cellComponent\n    }\n\n    return (\n        <>\n            {transition((animatedProps, cell) =>\n                createElement(Cell, {\n                    cell,\n                    borderRadius,\n                    borderWidth,\n                    animatedProps,\n                    enableLabels,\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedCell, HeatMapCommonProps, HeatMapDatum } from './types'\nimport { useCellAnnotations } from './hooks'\n\ninterface HeatMapCellAnnotationsProps<Datum extends HeatMapDatum> {\n    cells: ComputedCell<Datum>[]\n    annotations: NonNullable<HeatMapCommonProps<Datum>['annotations']>\n}\n\nexport const HeatMapCellAnnotations = <Datum extends HeatMapDatum>({\n    cells,\n    annotations,\n}: HeatMapCellAnnotationsProps<Datum>) => {\n    const boundAnnotations = useCellAnnotations<Datum>(cells, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { AnchoredContinuousColorsLegendSvg } from '@nivo/legends'\nimport {\n    DefaultHeatMapDatum,\n    HeatMapDatum,\n    HeatMapCommonProps,\n    HeatMapSvgProps,\n    LayerId,\n    CustomLayerProps,\n} from './types'\nimport { useHeatMap } from './hooks'\nimport { svgDefaultProps } from './defaults'\nimport { HeatMapCells } from './HeatMapCells'\nimport { HeatMapCellAnnotations } from './HeatMapCellAnnotations'\n\ntype InnerHeatMapProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMap = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = svgDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    forceSquare = svgDefaultProps.forceSquare,\n    xInnerPadding = svgDefaultProps.xInnerPadding,\n    xOuterPadding = svgDefaultProps.xOuterPadding,\n    yInnerPadding = svgDefaultProps.yInnerPadding,\n    yOuterPadding = svgDefaultProps.yOuterPadding,\n    sizeVariation = svgDefaultProps.sizeVariation,\n    cellComponent = svgDefaultProps.cellComponent as NonNullable<\n        HeatMapSvgProps<Datum, ExtraProps>['cellComponent']\n    >,\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    axisTop = svgDefaultProps.axisTop,\n    axisRight = svgDefaultProps.axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableLabels = svgDefaultProps.enableLabels,\n    label = svgDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = svgDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = svgDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = svgDefaultProps.emptyColor,\n    legends = svgDefaultProps.legends,\n    annotations = svgDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    hoverTarget = svgDefaultProps.hoverTarget,\n    tooltip = svgDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerHeatMapProps<Datum, ExtraProps>) => {\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        forceSquare,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        cells: null,\n        legends: null,\n        annotations: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth} // - offsetX * 2\n                height={innerHeight} // - offsetY * 2\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <Fragment key=\"cells\">\n                <HeatMapCells<Datum, ExtraProps>\n                    cells={cells}\n                    cellComponent={cellComponent}\n                    borderRadius={borderRadius}\n                    borderWidth={borderWidth}\n                    isInteractive={isInteractive}\n                    setActiveCell={setActiveCell}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                    enableLabels={enableLabels}\n                />\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('legends') && colorScale !== null) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, index) => (\n                    <AnchoredContinuousColorsLegendSvg\n                        {...legend}\n                        key={index}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        scale={colorScale}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('annotations') && annotations.length > 0) {\n        layerById.annotations = (\n            <HeatMapCellAnnotations<Datum>\n                key=\"annotations\"\n                cells={cells}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Datum> = {\n        cells,\n        activeCell,\n        setActiveCell,\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={Object.assign({}, margin, {\n                top: margin.top, //+ offsetY,\n                left: margin.left, // + offsetX,\n            })}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const HeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: HeatMapSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerHeatMap<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapDatum, HeatMapSvgProps } from './types'\nimport { HeatMap } from './HeatMap'\n\nexport const ResponsiveHeatMap = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapSvgProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMap<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { CellCanvasRendererProps, HeatMapDatum } from './types'\n\nexport const renderRect = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.fillRect(x - width / 2, y - height / 2, width, height)\n    if (borderWidth > 0) {\n        ctx.strokeRect(x - width / 2, y - height / 2, width, height)\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n\nexport const renderCircle = <Datum extends HeatMapDatum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        cell: { x, y, width, height, color, borderColor, opacity, labelTextColor, label },\n        borderWidth,\n        enableLabels,\n        theme,\n    }: CellCanvasRendererProps<Datum>\n) => {\n    ctx.save()\n    ctx.globalAlpha = opacity\n\n    const radius = Math.min(width, height) / 2\n\n    ctx.fillStyle = color\n    if (borderWidth > 0) {\n        ctx.strokeStyle = borderColor\n        ctx.lineWidth = borderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI)\n\n    ctx.fill()\n    if (borderWidth > 0) {\n        ctx.stroke()\n    }\n\n    if (enableLabels) {\n        ctx.fillStyle = labelTextColor\n        ctx.font = `${theme.labels.text.fontWeight ? `${theme.labels.text.fontWeight} ` : ''}${\n            theme.labels.text.fontSize\n        }px ${theme.labels.text.fontFamily}`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(label, x, y)\n    }\n\n    ctx.restore()\n}\n","import { useEffect, useRef, useCallback, createElement, useMemo } from 'react'\nimport { getRelativeCursor, isCursorInRect, useDimensions, useTheme, Container } from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderContinuousColorLegendToCanvas } from '@nivo/legends'\nimport { renderAnnotationsToCanvas, useComputedAnnotations } from '@nivo/annotations'\nimport { useHeatMap, useCellAnnotations } from './hooks'\nimport { renderRect, renderCircle } from './canvas'\nimport { canvasDefaultProps } from './defaults'\nimport {\n    CellCanvasRenderer,\n    DefaultHeatMapDatum,\n    HeatMapCanvasProps,\n    HeatMapCommonProps,\n    HeatMapDatum,\n    CellShape,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Datum extends HeatMapDatum, ExtraProps extends object> = Omit<\n    HeatMapCanvasProps<Datum, ExtraProps>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerHeatMapCanvas = <Datum extends HeatMapDatum, ExtraProps extends object>({\n    data,\n    layers = canvasDefaultProps.layers,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    xInnerPadding = canvasDefaultProps.xInnerPadding,\n    xOuterPadding = canvasDefaultProps.xOuterPadding,\n    yInnerPadding = canvasDefaultProps.yInnerPadding,\n    yOuterPadding = canvasDefaultProps.yOuterPadding,\n    forceSquare = canvasDefaultProps.forceSquare,\n    sizeVariation = canvasDefaultProps.sizeVariation,\n    renderCell: _renderCell = canvasDefaultProps.renderCell as CellShape,\n    opacity = canvasDefaultProps.opacity,\n    activeOpacity = canvasDefaultProps.activeOpacity,\n    inactiveOpacity = canvasDefaultProps.inactiveOpacity,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor as HeatMapCommonProps<Datum>['borderColor'],\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    axisTop = canvasDefaultProps.axisTop,\n    axisRight = canvasDefaultProps.axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableLabels = canvasDefaultProps.enableLabels,\n    label = canvasDefaultProps.label as HeatMapCommonProps<Datum>['label'],\n    labelTextColor = canvasDefaultProps.labelTextColor as HeatMapCommonProps<Datum>['labelTextColor'],\n    colors = canvasDefaultProps.colors as HeatMapCommonProps<Datum>['colors'],\n    emptyColor = canvasDefaultProps.emptyColor,\n    legends = canvasDefaultProps.legends,\n    annotations = canvasDefaultProps.annotations as HeatMapCommonProps<Datum>['annotations'],\n    isInteractive = canvasDefaultProps.isInteractive,\n    onClick,\n    hoverTarget = canvasDefaultProps.hoverTarget,\n    tooltip = canvasDefaultProps.tooltip as HeatMapCommonProps<Datum>['tooltip'],\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerNetworkCanvasProps<Datum, ExtraProps>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const {\n        margin: _margin,\n        innerWidth: _innerWidth,\n        innerHeight: _innerHeight,\n        outerWidth,\n        outerHeight,\n    } = useDimensions(width, height, partialMargin)\n\n    const {\n        width: innerWidth,\n        height: innerHeight,\n        offsetX,\n        offsetY,\n        xScale,\n        yScale,\n        cells,\n        colorScale,\n        activeCell,\n        setActiveCell,\n    } = useHeatMap<Datum, ExtraProps>({\n        data,\n        valueFormat,\n        width: _innerWidth,\n        height: _innerHeight,\n        xInnerPadding,\n        xOuterPadding,\n        yInnerPadding,\n        yOuterPadding,\n        forceSquare,\n        sizeVariation,\n        colors,\n        emptyColor,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        label,\n        labelTextColor,\n        hoverTarget,\n    })\n\n    const margin = useMemo(\n        () => ({\n            ..._margin,\n            top: _margin.top + offsetY,\n            left: _margin.left + offsetX,\n        }),\n        [_margin, offsetX, offsetY]\n    )\n\n    const boundAnnotations = useCellAnnotations(cells, annotations)\n    const computedAnnotations = useComputedAnnotations({\n        annotations: boundAnnotations,\n    })\n\n    let renderCell: CellCanvasRenderer<Datum>\n    if (typeof _renderCell === 'function') {\n        renderCell = _renderCell\n    } else if (_renderCell === 'circle') {\n        renderCell = renderCircle\n    } else {\n        renderCell = renderRect\n    }\n\n    const theme = useTheme()\n\n    const customLayerProps: CustomLayerProps<Datum> = useMemo(\n        () => ({\n            cells,\n            activeCell,\n            setActiveCell,\n        }),\n        [cells, activeCell, setActiveCell]\n    )\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top) // + offsetX, margin.top + offsetY)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                if (enableGridX) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                    })\n                }\n                if (enableGridY) {\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                    })\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth, // - offsetX * 2,\n                    height: innerHeight, // - offsetY * 2,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'cells') {\n                ctx.textAlign = 'center'\n                ctx.textBaseline = 'middle'\n\n                cells.forEach(cell => {\n                    renderCell(ctx, { cell, borderWidth, enableLabels, theme })\n                })\n            } else if (layer === 'legends' && colorScale !== null) {\n                legends.forEach(legend => {\n                    renderContinuousColorLegendToCanvas(ctx, {\n                        ...legend,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        scale: colorScale,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, {\n                    annotations: computedAnnotations,\n                    theme,\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        pixelRatio,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        margin,\n        layers,\n        customLayerProps,\n        cells,\n        renderCell,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        xScale,\n        yScale,\n        theme,\n        borderWidth,\n        enableLabels,\n        colorScale,\n        legends,\n        computedAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            const cell = cells.find(c =>\n                isCursorInRect(\n                    c.x + margin.left - c.width / 2, // + offsetX - c.width / 2,\n                    c.y + margin.top - c.height / 2, //+ offsetY - c.height / 2,\n                    c.width,\n                    c.height,\n                    x,\n                    y\n                )\n            )\n            if (cell !== undefined) {\n                setActiveCell(cell)\n                showTooltipFromEvent(createElement(tooltip, { cell }), event)\n            } else {\n                setActiveCell(null)\n                hideTooltip()\n            }\n        },\n        [\n            canvasEl,\n            cells,\n            margin,\n            // offsetX,\n            // offsetY,\n            setActiveCell,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setActiveCell(null)\n        hideTooltip()\n    }, [setActiveCell, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (activeCell === null) return\n\n            onClick?.(activeCell, event)\n        },\n        [activeCell, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const HeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: HeatMapCanvasProps<Datum, ExtraProps>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerHeatMapCanvas<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultHeatMapDatum, HeatMapCanvasProps, HeatMapDatum } from './types'\nimport { HeatMapCanvas } from './HeatMapCanvas'\n\nexport const ResponsiveHeatMapCanvas = <\n    Datum extends HeatMapDatum = DefaultHeatMapDatum,\n    ExtraProps extends object = Record<string, never>\n>(\n    props: Omit<HeatMapCanvasProps<Datum, ExtraProps>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <HeatMapCanvas<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["commonDefaultProps","layers","forceSquare","xInnerPadding","xOuterPadding","yInnerPadding","yOuterPadding","sizeVariation","opacity","activeOpacity","inactiveOpacity","borderWidth","borderColor","from","modifiers","enableGridX","enableGridY","enableLabels","label","labelTextColor","colors","type","scheme","emptyColor","legends","annotations","isInteractive","hoverTarget","tooltip","memo","cell","formattedValue","_jsx","BasicTooltip","id","serieId","data","x","value","enableChip","color","animate","motionConfig","svgDefaultProps","axisTop","axisRight","axisBottom","axisLeft","borderRadius","cellComponent","canvasDefaultProps","renderCell","pixelRatio","window","devicePixelRatio","computeLayout","_width","width","_height","height","rows","columns","offsetX","offsetY","cellWidth","Math","max","cellHeight","cellSize","min","computeCells","xValuesSet","Set","serieIds","allValues","cells","forEach","serie","push","datum","add","undefined","y","xValues","Array","length","xScale","castBandScale","scaleBand","domain","range","paddingOuter","paddingInner","yScale","bandwidth","cellsWithPosition","map","minValue","maxValue","computeSizeScale","size","scale","scaleLinear","values","sizes","getCellAnnotationPosition","getCellAnnotationDimensions","useComputeCells","useMemo","isHoverTargetByType","current","row","column","rowColumn","useCellsStyle","valueFormat","activeIds","getSize","colorScale","getContinuousColorScale","getColor","useCallback","theme","useTheme","getBorderColor","useInheritedColor","getLabelTextColor","formatValue","useValueFormatter","getLabel","usePropertyAccessor","computedOpacity","includes","sizeMultiplier","computedCell","useHeatMap","useState","activeCell","setActiveCell","isHoverTarget","filter","useCellAnnotations","useAnnotations","getPosition","getDimensions","HeatMapCellRect","animatedProps","onMouseEnter","onMouseMove","onMouseLeave","onClick","handlers","_jsxs","animated","g","style","cursor","transform","to","rect","fill","stroke","strokeWidth","rx","ry","text","textAnchor","dominantBaseline","labels","userSelect","HeatMapCellCircle","circle","r","fillOpacity","enterTransition","regularTransition","exitTransition","HeatMapCells","Cell","useMotionConfig","springConfig","config","transition","useTransition","keys","initial","enter","update","leave","immediate","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","HeatMapCellAnnotations","boundAnnotations","annotation","i","Annotation","InnerHeatMap","partialMargin","margin","role","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","_margin","_innerWidth","innerWidth","_innerHeight","innerHeight","outerWidth","outerHeight","top","left","layerById","grid","axes","Grid","Axes","right","bottom","Fragment","legend","index","_createElement","AnchoredContinuousColorsLegendSvg","key","containerWidth","containerHeight","customLayerProps","SvgWrapper","Object","assign","layer","HeatMap","renderWrapper","otherProps","Container","ResponsiveHeatMap","props","ResponsiveWrapper","renderRect","ctx","save","globalAlpha","fillStyle","strokeStyle","lineWidth","fillRect","strokeRect","font","fontWeight","fontSize","fontFamily","textAlign","textBaseline","fillText","restore","renderCircle","radius","beginPath","arc","PI","InnerHeatMapCanvas","_renderCell","canvasEl","useRef","computedAnnotations","useComputedAnnotations","useEffect","getContext","background","translate","line","renderGridLinesToCanvas","axis","renderAxesToCanvas","renderContinuousColorLegendToCanvas","renderAnnotationsToCanvas","handleMouseHover","getRelativeCursor","find","c","isCursorInRect","ref","HeatMapCanvas","ResponsiveHeatMapCanvas"],"mappings":"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"}