/** @public */
export type DefaultEventMap = Record<string | symbol, any>;
/** @public */
export type AnyEventTypeOf<EventMap extends DefaultEventMap> = keyof EventMap;
/** @public */
export type AnyEventOf<EventMap extends DefaultEventMap> = EventMap[keyof EventMap];
/** @public */
export type AnyEventHandlerOf<EventMap extends DefaultEventMap> = {
    [EventType in keyof EventMap]: EventMap[EventType] extends void ? () => void : (event: EventMap[EventType]) => void;
}[keyof EventMap];
/** @public */
export type EventTypeOf<EventMap extends DefaultEventMap, EventValue extends EventMap[keyof EventMap]> = {
    [EventType in keyof EventMap]: EventMap[EventType] extends EventValue ? EventType : never;
}[keyof EventMap];
/** @public */
export type EventOf<EventMap extends DefaultEventMap, EventType extends AnyEventTypeOf<EventMap>> = EventMap[EventType] extends void ? never : EventMap[EventType];
/** @public */
export type EventHandlerOf<EventMap extends DefaultEventMap, EventType extends AnyEventTypeOf<EventMap>> = EventMap[EventType] extends void ? () => void : (event: EventMap[EventType]) => void;
/** @public */
export type OffCallbackHandler = () => void;
/** @public */
export interface IEmitter<EventMap extends DefaultEventMap = DefaultEventMap> {
    on<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, handler: EventHandlerOf<EventMap, EventType>): OffCallbackHandler;
    once<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, handler: EventHandlerOf<EventMap, EventType>): OffCallbackHandler;
    off<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, handler: EventHandlerOf<EventMap, EventType>): void;
    emit<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, ...[event]: EventOf<EventMap, EventType> extends void ? [undefined?] : [EventOf<EventMap, EventType>]): void;
    has(key: AnyEventTypeOf<EventMap>): boolean;
    events(): AnyEventTypeOf<EventMap>[];
}
declare const once: unique symbol;
declare const evts: unique symbol;
/**
 * The event emitter class.
 *
 * @public
 */
export declare class Emitter<EventMap extends DefaultEventMap = DefaultEventMap> implements IEmitter<EventMap> {
    private [evts];
    private [once];
    /**
     * Returns the whole EventType list
     */
    events(): AnyEventTypeOf<EventMap>[];
    /**
     * Returns `true` if this emmiter has a listener attached to the `key` event type
     */
    has(key: AnyEventTypeOf<EventMap>): boolean;
    /**
     * Adds the `handler` function to listen events of the `type` type.
     *
     * @returns a function to unsubscribe the handler invoking `this.off(type, handler)`
     */
    on<T extends AnyEventOf<EventMap>, TType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: TType, handler: EventHandlerOf<EventMap, TType>): OffCallbackHandler;
    /**
     * Adds a *one-time* `handler` function for the event of the `type` type.
     *
     * @returns a function to unsubscribe the handler invoking `this.off(type, handler)`
     */
    once<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, handler: EventHandlerOf<EventMap, EventType>): OffCallbackHandler;
    /**
     * Removes the specified `handler` from the list of handlers of the event of the `type` type
     */
    off<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, handler: EventHandlerOf<EventMap, EventType>): void;
    /**
     * Calls each of the handlers registered for the event of `type` type, in the
     * order they were registered, passing the supplied argument `e` to each.
     */
    emit<T extends AnyEventOf<EventMap>, EventType extends AnyEventTypeOf<EventMap> = EventTypeOf<EventMap, T>>(type: EventType, ...[event]: EventOf<EventMap, EventType> extends void ? [undefined?] : [EventOf<EventMap, EventType>]): void;
}
export {};
//# sourceMappingURL=index.d.ts.map