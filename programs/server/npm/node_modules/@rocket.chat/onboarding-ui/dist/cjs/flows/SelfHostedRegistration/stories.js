"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelfHostedRegistrationOffline = exports.SelfHostedRegistration = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var fuselage_1 = require("@rocket.chat/fuselage");
var react_1 = require("react");
var AdminInfoPage_1 = __importDefault(require("../../pages/AdminInfoPage"));
var AwaitingConfirmationPage_1 = __importDefault(require("../../pages/AwaitingConfirmationPage"));
var ConfirmationProcessPage_1 = __importDefault(require("../../pages/ConfirmationProcessPage"));
var EmailConfirmedPage_1 = __importDefault(require("../../pages/EmailConfirmedPage"));
var OrganizationInfoPage_1 = __importDefault(require("../../pages/OrganizationInfoPage"));
var RegisterOfflinePage_1 = __importDefault(require("../../pages/RegisterOfflinePage"));
var RegisterServerPage_1 = __importDefault(require("../../pages/RegisterServerPage"));
var mocks_1 = require("./mocks");
exports.default = {
    title: 'flows/Self-Hosted Registration',
    parameters: {
        layout: 'fullscreen',
        actions: { argTypesRegex: '^on.*' },
    },
};
var SelfHostedRegistration = function (_a) {
    var offline = _a.offline;
    var _b = (0, react_1.useState)('/admin-info'), path = _b[0], navigateTo = _b[1];
    var _c = (0, react_1.useState)(), adminInfo = _c[0], setAdminInfo = _c[1];
    var _d = (0, react_1.useState)(), organizationInfo = _d[0], setOrganizationInfo = _d[1];
    var _e = (0, react_1.useState)(), serverRegistration = _e[0], setServerRegistration = _e[1];
    var _f = (0, react_1.useState)(), offlineRegistration = _f[0], setOfflineRegistration = _f[1];
    var handleAdminInfoSubmit = (0, mocks_1.logSubmit)(function (data) {
        setAdminInfo(data);
        navigateTo('/org-info');
    });
    var handleOrganizationInfoSubmit = (0, mocks_1.logSubmit)(function (data) {
        setOrganizationInfo(data);
        navigateTo('/register-server');
    });
    var handleRegisterServerSubmit = (0, mocks_1.logSubmit)(function (data) {
        setServerRegistration(function (serverRegistration) { return (__assign(__assign({}, serverRegistration), { updates: data.updates, agreement: data.agreement, cloudAccountEmail: data.email, securityCode: 'Funny Tortoise In The Hat' })); });
        navigateTo('/awaiting');
    });
    var handleRegisterOfflineSubmit = (0, mocks_1.logSubmit)(function (data) {
        setOfflineRegistration(function (offlineRegistration) { return (__assign(__assign({}, offlineRegistration), { agreement: data.agreement, token: data.token })); });
        navigateTo('/awaiting');
    });
    if (path === '/admin-info') {
        return ((0, jsx_runtime_1.jsx)(AdminInfoPage_1.default, { currentStep: 1, stepCount: 4, passwordRulesHint: '', validateUsername: mocks_1.validateUsername, validateEmail: mocks_1.validateEmail, validatePassword: mocks_1.validatePassword, initialValues: adminInfo, onSubmit: handleAdminInfoSubmit }));
    }
    if (path === '/org-info') {
        return ((0, jsx_runtime_1.jsx)(OrganizationInfoPage_1.default, { currentStep: 2, stepCount: 4, organizationIndustryOptions: mocks_1.organizationIndustryOptions, organizationSizeOptions: mocks_1.organizationSizeOptions, countryOptions: mocks_1.countryOptions, initialValues: organizationInfo, onBackButtonClick: function () { return navigateTo('/admin-info'); }, onSubmit: handleOrganizationInfoSubmit }));
    }
    if (path === '/register-server') {
        return ((0, jsx_runtime_1.jsx)(RegisterServerPage_1.default, { currentStep: 3, stepCount: 4, initialValues: __assign(__assign({}, ((serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.updates) && {
                updates: serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.updates,
            })), ((serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.agreement) && {
                agreement: serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.agreement,
            })), onSubmit: handleRegisterServerSubmit, onClickRegisterOffline: function () { return navigateTo('/register-offline'); }, offline: offline }));
    }
    if (path === '/register-offline') {
        return ((0, jsx_runtime_1.jsx)(RegisterOfflinePage_1.default, { termsHref: '', policyHref: '', clientKey: '', onCopySecurityCode: function () { return undefined; }, onBackButtonClick: function () { return navigateTo('/register-server'); }, onSubmit: handleRegisterOfflineSubmit }));
    }
    if (path === '/awaiting') {
        if (!(serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.cloudAccountEmail) || !(offlineRegistration === null || offlineRegistration === void 0 ? void 0 : offlineRegistration.token)) {
            throw new Error('missing cloud account email or token');
        }
        if (!(serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.securityCode) || !(offlineRegistration === null || offlineRegistration === void 0 ? void 0 : offlineRegistration.token)) {
            throw new Error('missing verification code');
        }
        setTimeout(function () {
            navigateTo('/confirmation-progress');
        }, 5000);
        return ((0, jsx_runtime_1.jsx)(AwaitingConfirmationPage_1.default, { currentStep: 4, stepCount: 4, emailAddress: serverRegistration.cloudAccountEmail, securityCode: serverRegistration.securityCode, onChangeEmailRequest: function () { return navigateTo('/admin-info'); }, onResendEmailRequest: function () { return undefined; } }));
    }
    if (path === '/confirmation-progress') {
        setTimeout(function () {
            navigateTo('/email-confirmed');
        }, 3000);
        return (0, jsx_runtime_1.jsx)(ConfirmationProcessPage_1.default, {});
    }
    if (path === '/email-confirmed') {
        return (0, jsx_runtime_1.jsx)(EmailConfirmedPage_1.default, {});
    }
    if (path === '/home') {
        return ((0, jsx_runtime_1.jsx)(fuselage_1.Box, __assign({ width: '100vw', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }, { children: (0, jsx_runtime_1.jsx)(fuselage_1.Callout, __assign({ type: 'success' }, { children: "This is the home of the workspace." })) })));
    }
    throw new Error('invalid path');
};
exports.SelfHostedRegistration = SelfHostedRegistration;
exports.SelfHostedRegistration.storyName = 'Self-Hosted Registration';
var SelfHostedRegistrationOffline = function () { return ((0, jsx_runtime_1.jsx)(exports.SelfHostedRegistration, { offline: true })); };
exports.SelfHostedRegistrationOffline = SelfHostedRegistrationOffline;
exports.SelfHostedRegistrationOffline.storyName = 'Airgapped Self-Hosted Registration';
//# sourceMappingURL=stories.js.map