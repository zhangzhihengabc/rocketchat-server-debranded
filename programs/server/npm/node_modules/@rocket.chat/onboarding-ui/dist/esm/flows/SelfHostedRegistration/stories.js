var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Callout } from '@rocket.chat/fuselage';
import { useState } from 'react';
import AdminInfoPage from '../../pages/AdminInfoPage';
import AwaitingConfirmationPage from '../../pages/AwaitingConfirmationPage';
import ConfirmationProcessPage from '../../pages/ConfirmationProcessPage';
import EmailConfirmedPage from '../../pages/EmailConfirmedPage';
import OrganizationInfoPage from '../../pages/OrganizationInfoPage';
import RegisterOfflinePage from '../../pages/RegisterOfflinePage';
import RegisteredServerPage from '../../pages/RegisterServerPage';
import { countryOptions, logSubmit, organizationIndustryOptions, organizationSizeOptions, validateEmail, validatePassword, validateUsername, } from './mocks';
export default {
    title: 'flows/Self-Hosted Registration',
    parameters: {
        layout: 'fullscreen',
        actions: { argTypesRegex: '^on.*' },
    },
};
export var SelfHostedRegistration = function (_a) {
    var offline = _a.offline;
    var _b = useState('/admin-info'), path = _b[0], navigateTo = _b[1];
    var _c = useState(), adminInfo = _c[0], setAdminInfo = _c[1];
    var _d = useState(), organizationInfo = _d[0], setOrganizationInfo = _d[1];
    var _e = useState(), serverRegistration = _e[0], setServerRegistration = _e[1];
    var _f = useState(), offlineRegistration = _f[0], setOfflineRegistration = _f[1];
    var handleAdminInfoSubmit = logSubmit(function (data) {
        setAdminInfo(data);
        navigateTo('/org-info');
    });
    var handleOrganizationInfoSubmit = logSubmit(function (data) {
        setOrganizationInfo(data);
        navigateTo('/register-server');
    });
    var handleRegisterServerSubmit = logSubmit(function (data) {
        setServerRegistration(function (serverRegistration) { return (__assign(__assign({}, serverRegistration), { updates: data.updates, agreement: data.agreement, cloudAccountEmail: data.email, securityCode: 'Funny Tortoise In The Hat' })); });
        navigateTo('/awaiting');
    });
    var handleRegisterOfflineSubmit = logSubmit(function (data) {
        setOfflineRegistration(function (offlineRegistration) { return (__assign(__assign({}, offlineRegistration), { agreement: data.agreement, token: data.token })); });
        navigateTo('/awaiting');
    });
    if (path === '/admin-info') {
        return (_jsx(AdminInfoPage, { currentStep: 1, stepCount: 4, passwordRulesHint: '', validateUsername: validateUsername, validateEmail: validateEmail, validatePassword: validatePassword, initialValues: adminInfo, onSubmit: handleAdminInfoSubmit }));
    }
    if (path === '/org-info') {
        return (_jsx(OrganizationInfoPage, { currentStep: 2, stepCount: 4, organizationIndustryOptions: organizationIndustryOptions, organizationSizeOptions: organizationSizeOptions, countryOptions: countryOptions, initialValues: organizationInfo, onBackButtonClick: function () { return navigateTo('/admin-info'); }, onSubmit: handleOrganizationInfoSubmit }));
    }
    if (path === '/register-server') {
        return (_jsx(RegisteredServerPage, { currentStep: 3, stepCount: 4, initialValues: __assign(__assign({}, ((serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.updates) && {
                updates: serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.updates,
            })), ((serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.agreement) && {
                agreement: serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.agreement,
            })), onSubmit: handleRegisterServerSubmit, onClickRegisterOffline: function () { return navigateTo('/register-offline'); }, offline: offline }));
    }
    if (path === '/register-offline') {
        return (_jsx(RegisterOfflinePage, { termsHref: '', policyHref: '', clientKey: '', onCopySecurityCode: function () { return undefined; }, onBackButtonClick: function () { return navigateTo('/register-server'); }, onSubmit: handleRegisterOfflineSubmit }));
    }
    if (path === '/awaiting') {
        if (!(serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.cloudAccountEmail) || !(offlineRegistration === null || offlineRegistration === void 0 ? void 0 : offlineRegistration.token)) {
            throw new Error('missing cloud account email or token');
        }
        if (!(serverRegistration === null || serverRegistration === void 0 ? void 0 : serverRegistration.securityCode) || !(offlineRegistration === null || offlineRegistration === void 0 ? void 0 : offlineRegistration.token)) {
            throw new Error('missing verification code');
        }
        setTimeout(function () {
            navigateTo('/confirmation-progress');
        }, 5000);
        return (_jsx(AwaitingConfirmationPage, { currentStep: 4, stepCount: 4, emailAddress: serverRegistration.cloudAccountEmail, securityCode: serverRegistration.securityCode, onChangeEmailRequest: function () { return navigateTo('/admin-info'); }, onResendEmailRequest: function () { return undefined; } }));
    }
    if (path === '/confirmation-progress') {
        setTimeout(function () {
            navigateTo('/email-confirmed');
        }, 3000);
        return _jsx(ConfirmationProcessPage, {});
    }
    if (path === '/email-confirmed') {
        return _jsx(EmailConfirmedPage, {});
    }
    if (path === '/home') {
        return (_jsx(Box, __assign({ width: '100vw', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }, { children: _jsx(Callout, __assign({ type: 'success' }, { children: "This is the home of the workspace." })) })));
    }
    throw new Error('invalid path');
};
SelfHostedRegistration.storyName = 'Self-Hosted Registration';
export var SelfHostedRegistrationOffline = function () { return (_jsx(SelfHostedRegistration, { offline: true })); };
SelfHostedRegistrationOffline.storyName = 'Airgapped Self-Hosted Registration';
//# sourceMappingURL=stories.js.map