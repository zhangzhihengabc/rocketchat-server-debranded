import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from '@rocket.chat/fuselage';
import '@rocket.chat/icons/dist/rocketchat.css';
import { MessageComposer, MessageComposerAction, MessageComposerToolbarActions, MessageComposerInput, MessageComposerToolbar, MessageComposerActionsDivider, MessageComposerToolbarSubmit, MessageComposerSkeleton, } from '.';
export default {
    title: 'Components/MessageComposer',
    component: MessageComposer,
};
export const _MessageComposer = () => (_jsxs(MessageComposer, { children: [_jsx(MessageComposerInput, { placeholder: 'Text' }), _jsx(MessageComposerToolbar, { children: _jsxs(MessageComposerToolbarActions, { children: [_jsx(MessageComposerAction, { icon: 'emoji' }), _jsx(MessageComposerActionsDivider, {}), _jsx(MessageComposerAction, { icon: 'bold' }), _jsx(MessageComposerAction, { icon: 'italic' }), _jsx(MessageComposerAction, { icon: 'underline' }), _jsx(MessageComposerAction, { icon: 'strike' }), _jsx(MessageComposerAction, { icon: 'code' }), _jsx(MessageComposerAction, { icon: 'arrow-return' }), _jsx(MessageComposerActionsDivider, {}), _jsx(MessageComposerAction, { icon: 'mic' }), _jsx(MessageComposerAction, { icon: 'clip' })] }) })] }));
export const MessageComposerWithSubmitActions = () => (_jsxs(MessageComposer, { children: [_jsx(MessageComposerInput, { placeholder: 'Text' }), _jsxs(MessageComposerToolbar, { children: [_jsxs(MessageComposerToolbarActions, { children: [_jsx(MessageComposerAction, { icon: 'emoji' }), _jsx(MessageComposerActionsDivider, {}), _jsx(MessageComposerAction, { icon: 'bold' }), _jsx(MessageComposerAction, { icon: 'italic' }), _jsx(MessageComposerAction, { icon: 'underline' }), _jsx(MessageComposerAction, { icon: 'strike' }), _jsx(MessageComposerAction, { icon: 'code' }), _jsx(MessageComposerAction, { icon: 'arrow-return' }), _jsx(MessageComposerActionsDivider, {}), _jsx(MessageComposerAction, { icon: 'mic' }), _jsx(MessageComposerAction, { icon: 'clip' })] }), _jsxs(MessageComposerToolbarSubmit, { children: [_jsx(Button, { small: true, children: "Preview" }), _jsx(Button, { primary: true, small: true, children: "Send" })] })] })] }));
export const MessageComposerLoading = () => _jsx(MessageComposerSkeleton, {});
//# sourceMappingURL=MessageComposer.stories.js.map