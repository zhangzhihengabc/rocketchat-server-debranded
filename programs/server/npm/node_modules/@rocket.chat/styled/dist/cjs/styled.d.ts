import type { DetailedHTMLProps, ForwardRefExoticComponent, HTMLAttributes, PropsWithoutRef, RefAttributes, SVGProps } from 'react';
export declare const attachClassName: <P extends {
    className?: string | undefined;
}>(props: P, additionalClassName: string) => P;
type RefTypes = {
    [K in keyof JSX.IntrinsicElements]: JSX.IntrinsicElements[K] extends DetailedHTMLProps<HTMLAttributes<infer T>, any> ? T : JSX.IntrinsicElements[K] extends SVGProps<infer T> ? T : never;
};
type PropsTypes = {
    [K in keyof JSX.IntrinsicElements]: JSX.IntrinsicElements[K];
};
declare const styled: <K extends keyof JSX.IntrinsicElements, P>(type: K, filter?: ((p: P) => PropsTypes[K]) | undefined) => (slices: TemplateStringsArray, ...values: readonly (string | ((props: P) => string))[]) => ForwardRefExoticComponent<PropsWithoutRef<PropsTypes[K] & P> & RefAttributes<RefTypes[K]>>;
export default styled;
//# sourceMappingURL=styled.d.ts.map