var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Box } from '@rocket.chat/fuselage';
import TooltipWrapper from './TooltipWrapper';
export default {
    title: 'common/TooltipWrapper',
    component: TooltipWrapper,
};
export var WithRenderProp = function () { return (_jsx(TooltipWrapper, __assign({ text: 'A example tooltip' }, { children: function (_a) {
        var ref = _a.ref, toggle = _a.toggle, id = _a.id;
        return (_jsx(Box, __assign({ ref: ref, onMouseEnter: function () { return toggle(true); }, onMouseLeave: function () { return toggle(false); }, onFocus: function () { return toggle(true); }, onBlur: function () { return toggle(false); }, tabIndex: 0, "aria-describedby": id }, { children: "Text" })));
    } }))); };
WithRenderProp.parameters = {
    layout: 'centered',
};
export var WithElement = function () { return (_jsx(TooltipWrapper, __assign({ text: 'A example tooltip' }, { children: _jsx(Box, __assign({ tabIndex: 0 }, { children: "Text" })) }))); };
WithElement.parameters = {
    layout: 'centered',
};
//# sourceMappingURL=TooltipWrapper.stories.js.map