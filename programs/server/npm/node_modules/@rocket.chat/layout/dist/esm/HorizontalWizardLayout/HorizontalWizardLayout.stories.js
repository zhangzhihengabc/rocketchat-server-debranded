var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Field, FieldDescription, FieldError, FieldHint, FieldLabel, FieldRow, InputBox, } from '@rocket.chat/fuselage';
import { ActionLink, Form } from '..';
import { HorizontalWizardLayout, HorizontalWizardLayoutAside, HorizontalWizardLayoutContent, HorizontalWizardLayoutDescription, HorizontalWizardLayoutSubtitle, HorizontalWizardLayoutTitle, HorizontalWizardTextHighlight, } from './HorizontalWizardLayout';
export default {
    title: 'HorizontalWizardLayout',
    component: HorizontalWizardLayout,
};
export var Default = function (props) { return (_jsx(_Fragment, { children: _jsxs(HorizontalWizardLayout, __assign({}, props, { children: [_jsxs(HorizontalWizardLayoutAside, { children: [_jsxs(HorizontalWizardLayoutTitle, { children: ["Title", ' ', _jsx(HorizontalWizardTextHighlight, { children: "highlight" })] }), _jsxs(HorizontalWizardLayoutSubtitle, { children: ["Subtitle", ' ', _jsx(HorizontalWizardTextHighlight, { children: "highlight" })] }), _jsxs(HorizontalWizardLayoutDescription, { children: ["Description ", _jsx(ActionLink, { children: "highlight" })] })] }), _jsx(HorizontalWizardLayoutContent, { children: _jsxs(Form, __assign({ onSubmit: console.log }, { children: [_jsxs(Form.Header, { children: [_jsx(Form.Title, { children: "Title" }), _jsx(Form.Subtitle, { children: "Subtitle" })] }), _jsx(Form.Container, { children: _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldError, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }) }), _jsx(Form.Footer, { children: "footer" })] })) })] })) })); };
Default.args = { forceDarkMode: false };
export var WithScroll = function (props) { return (_jsxs(HorizontalWizardLayout, __assign({}, props, { children: [_jsxs(HorizontalWizardLayoutAside, { children: [_jsx(HorizontalWizardLayoutTitle, { children: "Title" }), _jsx(HorizontalWizardLayoutSubtitle, { children: "Subtitle" }), _jsxs(HorizontalWizardLayoutDescription, { children: ["Description", ' ', _jsx(HorizontalWizardTextHighlight, { children: "highlight" })] })] }), _jsx(HorizontalWizardLayoutContent, { children: _jsxs(Form, __assign({ onSubmit: console.log }, { children: [_jsxs(Form.Header, { children: [_jsx(Form.Title, { children: "Title" }), _jsx(Form.Subtitle, { children: "Subtitle" })] }), _jsxs(Form.Container, { children: [_jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] }), _jsxs(Field, { children: [_jsx(FieldLabel, { children: "Label" }), _jsx(FieldDescription, { children: "Description" }), _jsx(FieldRow, { children: _jsx(InputBox.Skeleton, {}) }), _jsx(FieldRow, { children: "Error" }), _jsx(FieldHint, { children: "Hint" })] })] }), _jsx(Form.Footer, { children: "footer" })] })) })] }))); };
WithScroll.args = { forceDarkMode: undefined };
//# sourceMappingURL=HorizontalWizardLayout.stories.js.map