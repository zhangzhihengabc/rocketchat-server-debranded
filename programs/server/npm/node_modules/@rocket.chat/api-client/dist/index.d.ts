import type { Serialized } from '@rocket.chat/core-typings';
import type { MatchPathPattern, ParamsFor, OperationResult, PathWithoutParamsFor, PathWithParamsFor } from '@rocket.chat/rest-typings';
import type { Middleware, RestClientInterface } from './RestClientInterface';
export { RestClientInterface };
export declare class RestClient implements RestClientInterface {
    private twoFactorHandler?;
    private readonly baseUrl;
    private headers;
    private credentials;
    constructor({ baseUrl, credentials, headers, }: {
        baseUrl: string;
        credentials?: {
            'X-User-Id': string;
            'X-Auth-Token': string;
        };
        headers?: Record<string, string>;
    });
    getCredentials(): ReturnType<RestClientInterface['getCredentials']>;
    setCredentials: RestClientInterface['setCredentials'];
    get<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithParamsFor<'GET'> = PathWithParamsFor<'GET'>>(endpoint: TPath, params: ParamsFor<'GET', TPathPattern>, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'GET', TPathPattern>>>;
    get<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithoutParamsFor<'GET'> = PathWithoutParamsFor<'GET'>>(endpoint: TPath, params?: undefined, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'GET', TPathPattern>>>;
    post<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithParamsFor<'POST'> = PathWithParamsFor<'POST'>>(endpoint: TPath, params: ParamsFor<'POST', TPathPattern>, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'POST', TPathPattern>>>;
    post<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithoutParamsFor<'POST'> = PathWithoutParamsFor<'POST'>>(endpoint: TPath, params?: undefined, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'POST', TPathPattern>>>;
    put<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithParamsFor<'PUT'> = PathWithParamsFor<'PUT'>>(endpoint: TPath, params: ParamsFor<'PUT', TPathPattern>, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'PUT', TPathPattern>>>;
    put<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithoutParamsFor<'PUT'> = PathWithoutParamsFor<'PUT'>>(endpoint: TPath, params?: undefined, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'PUT', TPathPattern>>>;
    delete<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithParamsFor<'DELETE'> = PathWithParamsFor<'DELETE'>>(endpoint: TPath, params: ParamsFor<'DELETE', TPathPattern>, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'DELETE', TPathPattern>>>;
    delete<TPathPattern extends MatchPathPattern<TPath>, TPath extends PathWithoutParamsFor<'DELETE'> = PathWithoutParamsFor<'DELETE'>>(endpoint: TPath, params?: undefined, options?: Omit<RequestInit, 'method'>): Promise<Serialized<OperationResult<'DELETE', TPathPattern>>>;
    protected getCredentialsAsHeaders(): Record<string, string>;
    send(endpoint: string, method: string, { headers, ...options }?: Omit<RequestInit, 'method'>): Promise<Response>;
    protected getParams(data: Record<string, object | number | string | boolean> | void): string;
    upload: RestClientInterface['upload'];
    use(middleware: Middleware<RestClientInterface['send']>): void;
    handleTwoFactorChallenge(cb: (args: {
        method: 'totp' | 'email' | 'password';
        emailOrUsername?: string;
        invalidAttempt?: boolean;
    }) => Promise<string>): void;
}
//# sourceMappingURL=index.d.ts.map