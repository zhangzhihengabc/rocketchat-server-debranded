import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { Message } from '@rocket.chat/fuselage';
import { useTranslation } from '@rocket.chat/ui-contexts';
import { memo, useContext, useMemo } from 'react';
import { MarkupInteractionContext } from '../MarkupInteractionContext';
const handleChannelMention = (mention, withSymbol) => (withSymbol ? `#${mention}` : mention);
const ChannelMentionElement = ({ mention }) => {
    var _a;
    const t = useTranslation();
    const { resolveChannelMention, onChannelMentionClick, showMentionSymbol } = useContext(MarkupInteractionContext);
    const resolved = useMemo(() => resolveChannelMention === null || resolveChannelMention === void 0 ? void 0 : resolveChannelMention(mention), [mention, resolveChannelMention]);
    const handleClick = useMemo(() => (resolved ? onChannelMentionClick === null || onChannelMentionClick === void 0 ? void 0 : onChannelMentionClick(resolved) : undefined), [resolved, onChannelMentionClick]);
    if (!resolved) {
        return _jsxs(_Fragment, { children: ["#", mention] });
    }
    return (_jsx(Message.Highlight, { title: t('Mentions_channel'), variant: 'link', clickable: true, onClick: handleClick, children: handleChannelMention((_a = resolved.name) !== null && _a !== void 0 ? _a : mention, showMentionSymbol) }));
};
export default memo(ChannelMentionElement);
//# sourceMappingURL=ChannelMentionElement.js.map