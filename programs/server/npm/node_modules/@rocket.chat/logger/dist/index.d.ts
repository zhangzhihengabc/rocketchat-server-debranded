import { type MainLogger } from './getPino';
export * from './getPino';
export * from './logLevel';
export * from './logQueue';
export declare class Logger {
    readonly logger: MainLogger;
    constructor(loggerLabel: string);
    section(name: string): MainLogger;
    level(newLevel: string): void;
    log<T extends object>(obj: T, ...args: any[]): void;
    log(obj: unknown, ...args: any[]): void;
    debug<T extends object>(obj: T, ...args: any[]): void;
    debug(obj: unknown, ...args: any[]): void;
    info<T extends object>(obj: T, ...args: any[]): void;
    info(obj: unknown, ...args: any[]): void;
    startup<T extends object>(obj: T, ...args: any[]): void;
    startup(obj: unknown, ...args: any[]): void;
    success<T extends object>(obj: T, ...args: any[]): void;
    success(obj: unknown, ...args: any[]): void;
    warn<T extends object>(obj: T, ...args: any[]): void;
    warn(obj: unknown, ...args: any[]): void;
    error<T extends object>(obj: T, ...args: any[]): void;
    error(obj: unknown, ...args: any[]): void;
    method<T extends object>(obj: T, ...args: any[]): void;
    method(obj: unknown, ...args: any[]): void;
    subscription<T extends object>(obj: T, ...args: any[]): void;
    subscription(obj: unknown, ...args: any[]): void;
    fatal(err: unknown, ...args: any[]): void;
}
