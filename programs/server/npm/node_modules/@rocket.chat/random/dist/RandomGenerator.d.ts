export declare abstract class RandomGenerator {
    /**
     * @name Random.fraction
     * @summary Return a number between 0 and 1, like `Math.random`.
     * @locus Anywhere
     */
    abstract fraction(): number;
    /**
     * Create a non-cryptographically secure PRNG with a given seed (using
     * the Alea algorithm)
     */
    createWithSeeds(...seeds: readonly unknown[]): RandomGenerator;
    protected abstract safelyCreateWithSeeds(...seeds: readonly unknown[]): RandomGenerator;
    /**
     * Used like `Random`, but much faster and not cryptographically secure
     */
    abstract insecure: RandomGenerator;
    /**
     * @name Random.hexString
     * @summary Return a random string of `n` hexadecimal digits.
     * @locus Anywhere
     * @param digits Length of the string
     */
    hexString(digits: number): string;
    _randomString(charsCount: number, alphabet: string): string;
    /**
     * @name Random.id
     * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is
     * likely to be unique in the whole world.
     * @locus Anywhere
     * @param charsCount Optional length of the identifier in characters
     *   (defaults to 17)
     */
    id(charsCount?: number): string;
    /**
     * @name Random.secret
     * @summary Return a random string of printable characters with 6 bits of
     * entropy per character. Use `Random.secret` for security-critical secrets
     * that are intended for machine, rather than human, consumption.
     * @locus Anywhere
     * @param charsCount Optional length of the secret string (defaults to 43
     *   characters, or 256 bits of entropy)
     */
    secret(charsCount?: number): string;
    /**
     * @name Random.choice
     * @summary Return a random element of the given array or string.
     * @locus Anywhere
     * @param {Array|String} arrayOrString Array or string to choose from
     */
    choice<TArrayLike extends unknown[] | string>(arrayOrString: TArrayLike): unknown;
}
//# sourceMappingURL=RandomGenerator.d.ts.map