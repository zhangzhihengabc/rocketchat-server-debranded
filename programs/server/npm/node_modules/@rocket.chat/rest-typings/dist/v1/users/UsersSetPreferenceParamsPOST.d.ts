import type { ThemePreference } from '@rocket.chat/ui-theming/src/types/themes';
export type FontSize = '100%' | '14px' | '18px' | '20px' | '24px';
export type UsersSetPreferencesParamsPOST = {
    userId?: string;
    data: {
        newRoomNotification?: string;
        newMessageNotification?: string;
        clockMode?: number;
        useEmojis?: boolean;
        convertAsciiEmoji?: boolean;
        saveMobileBandwidth?: boolean;
        collapseMediaByDefault?: boolean;
        autoImageLoad?: boolean;
        emailNotificationMode?: string;
        unreadAlert?: boolean;
        notificationsSoundVolume?: number;
        desktopNotifications?: string;
        pushNotifications?: string;
        enableAutoAway?: boolean;
        highlights?: string[];
        alsoSendThreadToChannel?: 'never' | 'always' | 'default';
        desktopNotificationRequireInteraction?: boolean;
        showThreadsInMainChannel?: boolean;
        hideUsernames?: boolean;
        hideRoles?: boolean;
        displayAvatars?: boolean;
        hideFlexTab?: boolean;
        sendOnEnter?: string;
        language?: string;
        sidebarShowFavorites?: boolean;
        sidebarShowUnread?: boolean;
        sidebarSortby?: string;
        sidebarViewMode?: string;
        sidebarDisplayAvatar?: boolean;
        sidebarGroupByType?: boolean;
        muteFocusedConversations?: boolean;
        dontAskAgainList?: Array<{
            action: string;
            label: string;
        }>;
        featuresPreview?: {
            name: string;
            value: boolean;
        }[];
        themeAppearence?: ThemePreference;
        fontSize?: FontSize;
        receiveLoginDetectionEmail?: boolean;
        notifyCalendarEvents?: boolean;
        idleTimeLimit?: number;
        omnichannelTranscriptEmail?: boolean;
        omnichannelTranscriptPDF?: boolean;
        omnichannelHideConversationAfterClosing?: boolean;
        enableMobileRinging?: boolean;
        mentionsWithSymbol?: boolean;
    };
};
export declare const isUsersSetPreferencesParamsPOST: import("ajv").ValidateFunction<UsersSetPreferencesParamsPOST>;
//# sourceMappingURL=UsersSetPreferenceParamsPOST.d.ts.map