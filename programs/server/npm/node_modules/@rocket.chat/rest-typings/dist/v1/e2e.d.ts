import type { IUser } from '@rocket.chat/core-typings';
type E2eSetUserPublicAndPrivateKeysProps = {
    public_key: string;
    private_key: string;
};
export declare const isE2eSetUserPublicAndPrivateKeysProps: import("ajv").ValidateFunction<E2eSetUserPublicAndPrivateKeysProps>;
type E2eGetUsersOfRoomWithoutKeyProps = {
    rid: string;
};
export declare const isE2eGetUsersOfRoomWithoutKeyProps: import("ajv").ValidateFunction<E2eGetUsersOfRoomWithoutKeyProps>;
type E2eUpdateGroupKeyProps = {
    uid: string;
    rid: string;
    key: string;
};
export declare const isE2eUpdateGroupKeyProps: import("ajv").ValidateFunction<E2eUpdateGroupKeyProps>;
type E2eSetRoomKeyIdProps = {
    rid: string;
    keyID: string;
};
export declare const isE2eSetRoomKeyIdProps: import("ajv").ValidateFunction<E2eSetRoomKeyIdProps>;
export type E2eEndpoints = {
    '/v1/e2e.setUserPublicAndPrivateKeys': {
        POST: (params: E2eSetUserPublicAndPrivateKeysProps) => void;
    };
    '/v1/e2e.getUsersOfRoomWithoutKey': {
        GET: (params: E2eGetUsersOfRoomWithoutKeyProps) => {
            users: Pick<IUser, '_id' | 'e2e'>[];
        };
    };
    '/v1/e2e.updateGroupKey': {
        POST: (params: E2eUpdateGroupKeyProps) => void;
    };
    '/v1/e2e.acceptSuggestedGroupKey': {
        POST: (params: E2eGetUsersOfRoomWithoutKeyProps) => void;
    };
    '/v1/e2e.rejectSuggestedGroupKey': {
        POST: (params: E2eGetUsersOfRoomWithoutKeyProps) => void;
    };
    '/v1/e2e.setRoomKeyID': {
        POST: (params: E2eSetRoomKeyIdProps) => void;
    };
    '/v1/e2e.fetchMyKeys': {
        GET: () => {
            public_key: string;
            private_key: string;
        };
    };
};
export {};
//# sourceMappingURL=e2e.d.ts.map