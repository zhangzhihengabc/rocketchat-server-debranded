export type GroupsBaseProps = {
    roomId: string;
} | {
    roomName: string;
};
export declare const withGroupBaseProperties: (properties?: Record<string, any>, required?: string[]) => {
    oneOf: ({
        type: string;
        properties: {
            roomId: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    } | {
        type: string;
        properties: {
            roomName: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    })[];
};
export type BaseProps = GroupsBaseProps;
export declare const baseSchema: {
    oneOf: ({
        type: string;
        properties: {
            roomId: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    } | {
        type: string;
        properties: {
            roomName: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    })[];
};
export declare const withBaseProps: import("ajv").ValidateFunction<GroupsBaseProps>;
export type WithUserId = GroupsBaseProps & {
    userId: string;
};
export declare const withUserIdSchema: {
    oneOf: ({
        type: string;
        properties: {
            roomId: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    } | {
        type: string;
        properties: {
            roomName: {
                type: string;
            };
        };
        required: string[];
        additionalProperties: boolean;
    })[];
};
export declare const withUserIdProps: import("ajv").ValidateFunction<WithUserId>;
//# sourceMappingURL=BaseProps.d.ts.map