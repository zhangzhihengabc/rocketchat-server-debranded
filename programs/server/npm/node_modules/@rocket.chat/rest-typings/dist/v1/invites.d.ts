import type { IInvite, IRoom } from '@rocket.chat/core-typings';
type UseInviteTokenProps = {
    token: string;
};
export declare const isUseInviteTokenProps: import("ajv").ValidateFunction<UseInviteTokenProps>;
type ValidateInviteTokenProps = {
    token: string;
};
export declare const isValidateInviteTokenProps: import("ajv").ValidateFunction<ValidateInviteTokenProps>;
type FindOrCreateInviteParams = {
    rid: IRoom['_id'];
    days: number;
    maxUses: number;
};
export declare const isFindOrCreateInviteParams: import("ajv").ValidateFunction<FindOrCreateInviteParams>;
type SendInvitationEmailParams = {
    emails: string[];
};
export declare const isSendInvitationEmailParams: import("ajv").ValidateFunction<SendInvitationEmailParams>;
export type InvitesEndpoints = {
    '/v1/listInvites': {
        GET: () => Array<IInvite>;
    };
    '/v1/removeInvite/:_id': {
        DELETE: () => boolean;
    };
    '/v1/useInviteToken': {
        POST: (params: UseInviteTokenProps) => {
            room: {
                rid: IRoom['_id'];
                prid: IRoom['prid'];
                fname: IRoom['fname'];
                name: IRoom['name'];
                t: IRoom['t'];
            };
        };
    };
    '/v1/validateInviteToken': {
        POST: (params: ValidateInviteTokenProps) => {
            valid: boolean;
        };
    };
    '/v1/findOrCreateInvite': {
        POST: (params: FindOrCreateInviteParams) => IInvite;
    };
    '/v1/sendInvitationEmail': {
        POST: (params: SendInvitationEmailParams) => {
            success: boolean;
        };
    };
};
export {};
//# sourceMappingURL=invites.d.ts.map