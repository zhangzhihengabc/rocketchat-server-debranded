import type { IMessage, IRoom, MessageAttachment, ReadReceipt, OtrSystemMessages } from '@rocket.chat/core-typings';
import type { PaginatedRequest } from '../helpers/PaginatedRequest';
type ChatSendMessage = {
    message: Partial<IMessage>;
    previewUrls?: string[];
};
export declare const isChatSendMessageProps: import("ajv").ValidateFunction<ChatSendMessage>;
type ChatFollowMessage = {
    mid: IMessage['_id'];
};
export declare const isChatFollowMessageProps: import("ajv").ValidateFunction<ChatFollowMessage>;
type ChatUnfollowMessage = {
    mid: IMessage['_id'];
};
export declare const isChatUnfollowMessageProps: import("ajv").ValidateFunction<ChatUnfollowMessage>;
type ChatGetMessage = {
    msgId: IMessage['_id'];
};
export declare const isChatGetMessageProps: import("ajv").ValidateFunction<ChatGetMessage>;
type ChatStarMessage = {
    messageId: IMessage['_id'];
};
export declare const isChatStarMessageProps: import("ajv").ValidateFunction<ChatStarMessage>;
type ChatUnstarMessage = {
    messageId: IMessage['_id'];
};
export declare const isChatUnstarMessageProps: import("ajv").ValidateFunction<ChatUnstarMessage>;
type ChatPinMessage = {
    messageId: IMessage['_id'];
};
export declare const isChatPinMessageProps: import("ajv").ValidateFunction<ChatPinMessage>;
type ChatUnpinMessage = {
    messageId: IMessage['_id'];
};
export declare const isChatUnpinMessageProps: import("ajv").ValidateFunction<ChatUnpinMessage>;
type ChatGetDiscussions = PaginatedRequest<{
    roomId: IRoom['_id'];
    text?: string;
}>;
export declare const isChatGetDiscussionsProps: import("ajv").ValidateFunction<ChatGetDiscussions>;
type ChatReportMessage = {
    messageId: IMessage['_id'];
    description: string;
};
export declare const isChatReportMessageProps: import("ajv").ValidateFunction<ChatReportMessage>;
type ChatGetThreadsList = PaginatedRequest<{
    rid: IRoom['_id'];
    type: 'unread' | 'following' | 'all';
    text?: string;
}>;
export declare const isChatGetThreadsListProps: import("ajv").ValidateFunction<ChatGetThreadsList>;
type ChatSyncThreadsList = {
    rid: IRoom['_id'];
    updatedSince: string;
};
export declare const isChatSyncThreadsListProps: import("ajv").ValidateFunction<ChatSyncThreadsList>;
type ChatDelete = {
    msgId: IMessage['_id'];
    roomId: IRoom['_id'];
    asUser?: boolean;
};
export declare const isChatDeleteProps: import("ajv").ValidateFunction<ChatDelete>;
type ChatReact = {
    emoji: string;
    messageId: IMessage['_id'];
    shouldReact?: boolean;
} | {
    reaction: string;
    messageId: IMessage['_id'];
    shouldReact?: boolean;
};
export declare const isChatReactProps: import("ajv").ValidateFunction<ChatReact>;
/**
 * The param `ignore` cannot be boolean, since this is a GET method. Use strings 'true' or 'false' instead.
 * @param {string} ignore
 */
type ChatIgnoreUser = {
    rid: string;
    userId: string;
    ignore: string;
};
export declare const isChatIgnoreUserProps: import("ajv").ValidateFunction<ChatIgnoreUser>;
type ChatSearch = PaginatedRequest<{
    roomId: IRoom['_id'];
    searchText: string;
}>;
export declare const isChatSearchProps: import("ajv").ValidateFunction<ChatSearch>;
type ChatUpdate = {
    roomId: IRoom['_id'];
    msgId: string;
    text: string;
    previewUrls?: string[];
};
export declare const isChatUpdateProps: import("ajv").ValidateFunction<ChatUpdate>;
type ChatGetMessageReadReceipts = {
    messageId: IMessage['_id'];
};
export declare const isChatGetMessageReadReceiptsProps: import("ajv").ValidateFunction<ChatGetMessageReadReceipts>;
type GetStarredMessages = {
    roomId: IRoom['_id'];
    count?: number;
    offset?: number;
    sort?: string;
};
export declare const isChatGetStarredMessagesProps: import("ajv").ValidateFunction<GetStarredMessages>;
type GetPinnedMessages = {
    roomId: IRoom['_id'];
    count?: number;
    offset?: number;
    sort?: string;
};
export declare const isChatGetPinnedMessagesProps: import("ajv").ValidateFunction<GetPinnedMessages>;
type GetMentionedMessages = {
    roomId: IRoom['_id'];
    count?: number;
    offset?: number;
    sort?: string;
};
export declare const isChatGetMentionedMessagesProps: import("ajv").ValidateFunction<GetMentionedMessages>;
type ChatSyncMessages = {
    roomId: IRoom['_id'];
    lastUpdate: string;
};
export declare const isChatSyncMessagesProps: import("ajv").ValidateFunction<ChatSyncMessages>;
type ChatSyncThreadMessages = PaginatedRequest<{
    tmid: string;
    updatedSince: string;
}>;
export declare const isChatSyncThreadMessagesProps: import("ajv").ValidateFunction<ChatSyncThreadMessages>;
type ChatGetThreadMessages = PaginatedRequest<{
    tmid: string;
}>;
export declare const isChatGetThreadMessagesProps: import("ajv").ValidateFunction<ChatGetThreadMessages>;
type ChatGetDeletedMessages = PaginatedRequest<{
    roomId: IRoom['_id'];
    since: string;
}>;
export declare const isChatGetDeletedMessagesProps: import("ajv").ValidateFunction<ChatGetDeletedMessages>;
type ChatPostMessage = {
    roomId: string | string[];
    text?: string;
    alias?: string;
    emoji?: string;
    avatar?: string;
    attachments?: MessageAttachment[];
} | {
    channel: string | string[];
    text?: string;
    alias?: string;
    emoji?: string;
    avatar?: string;
    attachments?: MessageAttachment[];
};
export declare const isChatPostMessageProps: import("ajv").ValidateFunction<ChatPostMessage>;
export type ChatEndpoints = {
    '/v1/chat.sendMessage': {
        POST: (params: ChatSendMessage) => {
            message: IMessage;
        };
    };
    '/v1/chat.getMessage': {
        GET: (params: ChatGetMessage) => {
            message: IMessage;
        };
    };
    '/v1/chat.followMessage': {
        POST: (params: ChatFollowMessage) => void;
    };
    '/v1/chat.unfollowMessage': {
        POST: (params: ChatUnfollowMessage) => void;
    };
    '/v1/chat.starMessage': {
        POST: (params: ChatStarMessage) => void;
    };
    '/v1/chat.unStarMessage': {
        POST: (params: ChatUnstarMessage) => void;
    };
    '/v1/chat.pinMessage': {
        POST: (params: ChatPinMessage) => {
            message: IMessage;
        };
    };
    '/v1/chat.unPinMessage': {
        POST: (params: ChatUnpinMessage) => void;
    };
    '/v1/chat.reportMessage': {
        POST: (params: ChatReportMessage) => void;
    };
    '/v1/chat.getDiscussions': {
        GET: (params: ChatGetDiscussions) => {
            messages: IMessage[];
            total: number;
        };
    };
    '/v1/chat.getThreadsList': {
        GET: (params: ChatGetThreadsList) => {
            threads: IMessage[];
            total: number;
        };
    };
    '/v1/chat.syncThreadsList': {
        GET: (params: ChatSyncThreadsList) => {
            threads: {
                update: IMessage[];
                remove: IMessage[];
            };
        };
    };
    '/v1/chat.delete': {
        POST: (params: ChatDelete) => {
            _id: string;
            ts: string;
            message: Pick<IMessage, '_id' | 'rid' | 'u'>;
        };
    };
    '/v1/chat.react': {
        POST: (params: ChatReact) => void;
    };
    '/v1/chat.ignoreUser': {
        GET: (params: ChatIgnoreUser) => void;
    };
    '/v1/chat.search': {
        GET: (params: ChatSearch) => {
            messages: IMessage[];
        };
    };
    '/v1/chat.update': {
        POST: (params: ChatUpdate) => {
            message: IMessage;
        };
    };
    '/v1/chat.getMessageReadReceipts': {
        GET: (params: ChatGetMessageReadReceipts) => {
            receipts: ReadReceipt[];
        };
    };
    '/v1/chat.getStarredMessages': {
        GET: (params: GetStarredMessages) => {
            messages: IMessage[];
            count: number;
            offset: number;
            total: number;
        };
    };
    '/v1/chat.getPinnedMessages': {
        GET: (params: GetPinnedMessages) => {
            messages: IMessage[];
            count: number;
            offset: number;
            total: number;
        };
    };
    '/v1/chat.getMentionedMessages': {
        GET: (params: GetMentionedMessages) => {
            messages: IMessage[];
            count: number;
            offset: number;
            total: number;
        };
    };
    '/v1/chat.syncMessages': {
        GET: (params: ChatSyncMessages) => {
            result: {
                updated: IMessage[];
                deleted: IMessage[];
            };
        };
    };
    '/v1/chat.postMessage': {
        POST: (params: ChatPostMessage) => {
            ts: number;
            channel: IRoom;
            message: IMessage;
        };
    };
    '/v1/chat.syncThreadMessages': {
        GET: (params: ChatSyncThreadMessages) => {
            messages: {
                update: IMessage[];
                remove: IMessage[];
            };
        };
    };
    '/v1/chat.getThreadMessages': {
        GET: (params: ChatGetThreadMessages) => {
            messages: IMessage[];
            count: number;
            offset: number;
            total: number;
        };
    };
    '/v1/chat.getDeletedMessages': {
        GET: (params: ChatGetDeletedMessages) => {
            messages: IMessage[];
            count: number;
            offset: number;
            total: number;
        };
    };
    '/v1/chat.otr': {
        POST: (params: {
            roomId: string;
            type: OtrSystemMessages;
        }) => void;
    };
};
export {};
//# sourceMappingURL=chat.d.ts.map