import type { IMessage, IRoom, IUser, RoomAdminFieldsType } from '@rocket.chat/core-typings';
import type { PaginatedRequest } from '../helpers/PaginatedRequest';
import type { PaginatedResult } from '../helpers/PaginatedResult';
type RoomsAutoCompleteChannelAndPrivateProps = {
    selector: string;
};
export declare const isRoomsAutoCompleteChannelAndPrivateProps: import("ajv").ValidateFunction<RoomsAutoCompleteChannelAndPrivateProps>;
type RoomsAutocompleteChannelAndPrivateWithPaginationProps = PaginatedRequest<{
    selector: string;
}>;
export declare const isRoomsAutocompleteChannelAndPrivateWithPaginationProps: import("ajv").ValidateFunction<RoomsAutocompleteChannelAndPrivateWithPaginationProps>;
type RoomsAutocompleteAvailableForTeamsProps = {
    name: string;
};
export declare const isRoomsAutocompleteAvailableForTeamsProps: import("ajv").ValidateFunction<RoomsAutocompleteAvailableForTeamsProps>;
type RoomsAutocompleteAdminRoomsPayload = {
    selector: string;
};
export declare const isRoomsAutocompleteAdminRoomsPayload: import("ajv").ValidateFunction<RoomsAutocompleteAdminRoomsPayload>;
type BaseRoomsProps = {
    roomId: string;
} | {
    roomName: string;
};
type RoomsInfoProps = BaseRoomsProps;
type RoomsLeaveProps = BaseRoomsProps;
export declare const isRoomsInfoProps: import("ajv").ValidateFunction<BaseRoomsProps>;
type RoomsCreateDiscussionProps = {
    prid: IRoom['_id'];
    pmid?: IMessage['_id'];
    t_name: string;
    users?: IUser['username'][];
    encrypted?: boolean;
    reply?: string;
};
export declare const isRoomsCreateDiscussionProps: import("ajv").ValidateFunction<RoomsCreateDiscussionProps>;
type RoomsExportProps = {
    rid: IRoom['_id'];
    type: 'email' | 'file';
    toUsers?: IUser['username'][];
    toEmails?: string[];
    additionalEmails?: string;
    subject?: string;
    messages?: IMessage['_id'][];
    dateFrom?: string;
    dateTo?: string;
    format?: 'html' | 'json';
};
export declare const isRoomsExportProps: import("ajv").ValidateFunction<RoomsExportProps>;
type RoomsAdminRoomsProps = PaginatedRequest<{
    filter?: string;
    types?: string[];
}>;
export declare const isRoomsAdminRoomsProps: import("ajv").ValidateFunction<RoomsAdminRoomsProps>;
type RoomsAdminRoomsGetRoomProps = {
    rid?: string;
};
export declare const isRoomsAdminRoomsGetRoomProps: import("ajv").ValidateFunction<RoomsAdminRoomsGetRoomProps>;
type RoomsChangeArchivationStateProps = {
    rid: string;
    action?: string;
};
export declare const isRoomsChangeArchivationStateProps: import("ajv").ValidateFunction<RoomsChangeArchivationStateProps>;
type RoomsSaveRoomSettingsProps = {
    rid: string;
    roomAvatar?: string;
    featured?: boolean;
    roomName?: string;
    roomTopic?: string;
    roomAnnouncement?: string;
    roomDescription?: string;
    roomType?: IRoom['t'];
    readOnly?: boolean;
    reactWhenReadOnly?: boolean;
    default?: boolean;
    encrypted?: boolean;
    favorite?: {
        defaultValue?: boolean;
        favorite?: boolean;
    };
};
export declare const isRoomsSaveRoomSettingsProps: import("ajv").ValidateFunction<RoomsSaveRoomSettingsProps>;
type GETRoomsNameExists = {
    roomName: string;
};
export declare const isGETRoomsNameExists: import("ajv").ValidateFunction<GETRoomsNameExists>;
export type Notifications = {
    disableNotifications: string;
    muteGroupMentions: string;
    hideUnreadStatus: string;
    desktopNotifications: string;
    audioNotificationValue: string;
    mobilePushNotifications: string;
    emailNotifications: string;
};
type RoomsGetDiscussionsProps = PaginatedRequest<BaseRoomsProps>;
export type RoomsEndpoints = {
    '/v1/rooms.autocomplete.channelAndPrivate': {
        GET: (params: RoomsAutoCompleteChannelAndPrivateProps) => {
            items: IRoom[];
        };
    };
    '/v1/rooms.autocomplete.channelAndPrivate.withPagination': {
        GET: (params: RoomsAutocompleteChannelAndPrivateWithPaginationProps) => {
            items: IRoom[];
            total: number;
        };
    };
    '/v1/rooms.autocomplete.availableForTeams': {
        GET: (params: RoomsAutocompleteAvailableForTeamsProps) => {
            items: IRoom[];
        };
    };
    '/v1/rooms.autocomplete.adminRooms': {
        GET: (params: RoomsAutocompleteAdminRoomsPayload) => {
            items: IRoom[];
        };
    };
    '/v1/rooms.info': {
        GET: (params: RoomsInfoProps) => {
            room: IRoom | undefined;
        };
    };
    '/v1/rooms.cleanHistory': {
        POST: (params: {
            roomId: IRoom['_id'];
            latest: string;
            oldest: string;
            inclusive?: boolean;
            excludePinned?: boolean;
            filesOnly?: boolean;
            users?: IUser['username'][];
            limit?: number;
            ignoreDiscussion?: boolean;
            ignoreThreads?: boolean;
        }) => {
            _id: IRoom['_id'];
            count: number;
            success: boolean;
        };
    };
    '/v1/rooms.createDiscussion': {
        POST: (params: RoomsCreateDiscussionProps) => {
            discussion: IRoom;
        };
    };
    '/v1/rooms.export': {
        POST: (params: RoomsExportProps) => {
            missing?: string[];
            success: boolean;
        } | void;
    };
    '/v1/rooms.adminRooms': {
        GET: (params: RoomsAdminRoomsProps) => PaginatedResult<{
            rooms: Pick<IRoom, RoomAdminFieldsType>[];
        }>;
    };
    '/v1/rooms.adminRooms.getRoom': {
        GET: (params: RoomsAdminRoomsGetRoomProps) => Pick<IRoom, RoomAdminFieldsType>;
    };
    '/v1/rooms.saveRoomSettings': {
        POST: (params: RoomsSaveRoomSettingsProps) => {
            success: boolean;
            rid: string;
        };
    };
    '/v1/rooms.changeArchivationState': {
        POST: (params: RoomsChangeArchivationStateProps) => {
            success: boolean;
        };
    };
    '/v1/rooms.upload/:rid': {
        POST: (params: {
            file: File;
            description?: string;
            avatar?: string;
            emoji?: string;
            alias?: string;
            groupable?: boolean;
            msg?: string;
            tmid?: string;
        }) => {
            message: IMessage | null;
        };
    };
    '/v1/rooms.saveNotification': {
        POST: (params: {
            roomId: string;
            notifications: Notifications;
        }) => void;
    };
    '/v1/rooms.favorite': {
        POST: (params: {
            roomId: string;
            favorite: boolean;
        } | {
            roomName: string;
            favorite: boolean;
        }) => void;
    };
    '/v1/rooms.nameExists': {
        GET: (params: {
            roomName: string;
        }) => {
            exists: boolean;
        };
    };
    '/v1/rooms.delete': {
        POST: (params: {
            roomId: string;
        }) => void;
    };
    '/v1/rooms.get': {
        GET: (params: {
            updatedSince: string;
        }) => {
            update: IRoom[];
            remove: IRoom[];
        };
    };
    '/v1/rooms.leave': {
        POST: (params: RoomsLeaveProps) => void;
    };
    '/v1/rooms.getDiscussions': {
        GET: (params: RoomsGetDiscussionsProps) => PaginatedResult<{
            discussions: IRoom[];
        }>;
    };
};
export {};
//# sourceMappingURL=rooms.d.ts.map