import type { IOmnichannelCannedResponse, ILivechatAgent, ILivechatDepartment, ILivechatDepartmentAgents, ILivechatMonitor, ILivechatTag, ILivechatVisitor, ILivechatVisitorDTO, IMessage, IOmnichannelRoom, IRoom, ISetting, ILivechatAgentActivity, ILivechatCustomField, IOmnichannelSystemMessage, Serialized, ILivechatBusinessHour, ILivechatTrigger, ILivechatInquiryRecord, IOmnichannelServiceLevelAgreements, ILivechatPriority, LivechatDepartmentDTO, ILivechatTriggerCondition, ILivechatTriggerAction, ReportResult, ReportWithUnmatchingElements } from '@rocket.chat/core-typings';
import type { WithId } from 'mongodb';
import type { Deprecated } from '../helpers/Deprecated';
import type { PaginatedRequest } from '../helpers/PaginatedRequest';
import type { PaginatedResult } from '../helpers/PaginatedResult';
type booleanString = 'true' | 'false';
type LivechatVisitorsInfo = {
    visitorId: string;
};
export declare const isLivechatVisitorsInfoProps: import("ajv").ValidateFunction<LivechatVisitorsInfo>;
type LivechatRoomOnHold = {
    roomId: IRoom['_id'];
};
export declare const isLivechatRoomOnHoldProps: import("ajv").ValidateFunction<LivechatRoomOnHold>;
type LivechatRoomResumeOnHold = {
    roomId: IRoom['_id'];
};
export declare const isLivechatRoomResumeOnHoldProps: import("ajv").ValidateFunction<LivechatRoomResumeOnHold>;
type LivechatDepartmentId = {
    onlyMyDepartments?: booleanString;
    includeAgents?: booleanString;
};
export declare const isLivechatDepartmentIdProps: import("ajv").ValidateFunction<LivechatDepartmentId>;
type LivechatDepartmentAutocomplete = {
    selector: string;
    onlyMyDepartments: booleanString;
    showArchived?: booleanString;
};
export declare const isLivechatDepartmentAutocompleteProps: import("ajv").ValidateFunction<LivechatDepartmentAutocomplete>;
type LivechatDepartmentDepartmentIdAgentsGET = {
    sort: string;
};
export declare const isLivechatDepartmentDepartmentIdAgentsGETProps: import("ajv").ValidateFunction<LivechatDepartmentDepartmentIdAgentsGET>;
type LivechatDepartmentDepartmentIdAgentsPOST = {
    upsert: {
        agentId: string;
        username: string;
        count: number;
        order: number;
    }[];
    remove: {
        agentId: string;
        username: string;
        count: number;
        order: number;
    }[];
};
export declare const isLivechatDepartmentDepartmentIdAgentsPOSTProps: import("ajv").ValidateFunction<LivechatDepartmentDepartmentIdAgentsPOST>;
type LivechatVisitorTokenGet = {
    token: string;
};
export declare const isLivechatVisitorTokenGetProps: import("ajv").ValidateFunction<LivechatVisitorTokenGet>;
type LivechatVisitorTokenDelete = {
    token: string;
};
export declare const isLivechatVisitorTokenDeleteProps: import("ajv").ValidateFunction<LivechatVisitorTokenDelete>;
type LivechatVisitorTokenRoom = {
    token: string;
};
export declare const isLivechatVisitorTokenRoomProps: import("ajv").ValidateFunction<LivechatVisitorTokenRoom>;
type LivechatVisitorCallStatus = {
    token: string;
    callStatus: string;
    rid: string;
    callId: string;
};
export declare const isLivechatVisitorCallStatusProps: import("ajv").ValidateFunction<LivechatVisitorCallStatus>;
type LivechatVisitorStatus = {
    token: string;
    status: string;
};
export declare const isLivechatVisitorStatusProps: import("ajv").ValidateFunction<LivechatVisitorStatus>;
type LiveChatRoomJoin = {
    roomId: string;
};
export declare const isLiveChatRoomJoinProps: import("ajv").ValidateFunction<LiveChatRoomJoin>;
type LiveChatRoomForward = {
    roomId: string;
    userId?: string;
    departmentId?: string;
    comment?: string;
    clientAction?: boolean;
};
export declare const isLiveChatRoomForwardProps: import("ajv").ValidateFunction<LiveChatRoomForward>;
type LiveChatRoomSaveInfo = {
    guestData: {
        _id: string;
        name?: string;
        email?: string;
        phone?: string;
        livechatData?: {
            [k: string]: string;
        };
    };
    roomData: {
        _id: string;
        topic?: string;
        tags?: string[];
        livechatData?: {
            [k: string]: string;
        };
        priorityId?: string;
        slaId?: string;
    };
};
export declare const isLiveChatRoomSaveInfoProps: import("ajv").ValidateFunction<LiveChatRoomSaveInfo>;
type LivechatMonitorsListProps = PaginatedRequest<{
    text: string;
}>;
export declare const isLivechatMonitorsListProps: import("ajv").ValidateFunction<LivechatMonitorsListProps>;
type LivechatTagsListProps = PaginatedRequest<{
    text: string;
    viewAll?: 'true' | 'false';
    department?: string;
}, 'name'>;
export declare const isLivechatTagsListProps: import("ajv").ValidateFunction<LivechatTagsListProps>;
type LivechatDepartmentProps = PaginatedRequest<{
    text?: string;
    onlyMyDepartments?: booleanString;
    enabled?: booleanString;
    excludeDepartmentId?: string;
    showArchived?: booleanString;
}>;
export declare const isGETLivechatDepartmentProps: import("ajv").ValidateFunction<LivechatDepartmentProps>;
type POSTLivechatDepartmentProps = {
    department: {
        enabled: boolean;
        name: string;
        email: string;
        description?: string;
        showOnRegistration: boolean;
        showOnOfflineForm: boolean;
        requestTagsBeforeClosingChat?: boolean;
        chatClosingTags?: string[];
        fallbackForwardDepartment?: string;
    };
    agents: {
        agentId: string;
        count?: number;
        order?: number;
    }[];
};
export declare const isPOSTLivechatDepartmentProps: import("ajv").ValidateFunction<POSTLivechatDepartmentProps>;
type LivechatDepartmentsAvailableByUnitIdProps = PaginatedRequest<{
    text: string;
    onlyMyDepartments?: 'true' | 'false';
}>;
export declare const isLivechatDepartmentsAvailableByUnitIdProps: import("ajv").ValidateFunction<LivechatDepartmentsAvailableByUnitIdProps>;
type LivechatDepartmentsByUnitProps = PaginatedRequest<{
    text: string;
}>;
export declare const isLivechatDepartmentsByUnitProps: import("ajv").ValidateFunction<LivechatDepartmentsByUnitProps>;
type LivechatDepartmentsByUnitIdProps = PaginatedRequest;
export declare const isLivechatDepartmentsByUnitIdProps: import("ajv").ValidateFunction<LivechatDepartmentsByUnitIdProps>;
type LivechatUsersManagerGETProps = PaginatedRequest<{
    text?: string;
    fields?: string;
    onlyAvailable?: boolean;
    excludeId?: string;
    showIdleAgents?: boolean;
}>;
export declare const isLivechatUsersManagerGETProps: import("ajv").ValidateFunction<LivechatUsersManagerGETProps>;
type LivechatUsersManagerPOSTProps = PaginatedRequest<{
    username: string;
}>;
export declare const isLivechatUsersManagerPOSTProps: import("ajv").ValidateFunction<LivechatUsersManagerPOSTProps>;
type LivechatQueueProps = {
    agentId?: string;
    includeOfflineAgents?: booleanString;
    departmentId?: string;
    offset: number;
    count: number;
    sort: string;
};
export declare const isLivechatQueueProps: import("ajv").ValidateFunction<LivechatQueueProps>;
type CannedResponsesProps = PaginatedRequest<{
    scope?: string;
    departmentId?: string;
    text?: string;
    shortcut?: string;
    tags?: string[];
    createdBy?: string;
}>;
export declare const isCannedResponsesProps: import("ajv").ValidateFunction<CannedResponsesProps>;
type LivechatCustomFieldsProps = PaginatedRequest<{
    text?: string;
}>;
export declare const isLivechatCustomFieldsProps: import("ajv").ValidateFunction<LivechatCustomFieldsProps>;
export type LivechatRoomsProps = {
    roomName?: string;
    offset?: number;
    createdAt?: string;
    open?: boolean;
    agents?: string[];
    closedAt?: string;
    departmentId?: string;
    tags?: string[];
    customFields?: string;
    onhold?: boolean;
};
export type VisitorSearchChatsResult = Pick<IOmnichannelRoom, 'fname' | 'ts' | 'msgs' | 'servedBy' | 'closedAt' | 'closedBy' | 'closer' | 'tags' | '_id' | 'closingMessage'> & {
    v: Omit<IOmnichannelRoom['v'], 'lastMessageTs'>;
};
export declare const isLivechatRoomsProps: import("ajv").ValidateFunction<LivechatRoomsProps>;
type LivechatRidMessagesProps = PaginatedRequest<{
    searchTerm?: string;
}>;
export declare const isLivechatRidMessagesProps: import("ajv").ValidateFunction<LivechatRidMessagesProps>;
type LivechatUsersAgentProps = PaginatedRequest<{
    text?: string;
}>;
export declare const isLivechatUsersAgentProps: import("ajv").ValidateFunction<LivechatUsersAgentProps>;
type LivechatPrioritiesProps = PaginatedRequest<{
    text?: string;
}>;
export declare const isLivechatPrioritiesProps: import("ajv").ValidateFunction<LivechatPrioritiesProps>;
type CreateOrUpdateLivechatSlaProps = {
    name: string;
    description?: string;
    dueTimeInMinutes: number;
};
export declare const isCreateOrUpdateLivechatSlaProps: import("ajv").ValidateFunction<CreateOrUpdateLivechatSlaProps>;
type POSTOmnichannelContactProps = {
    _id?: string;
    token: string;
    name: string;
    username?: string;
    email?: string;
    phone?: string;
    customFields?: Record<string, unknown>;
    contactManager?: {
        username: string;
    };
};
export declare const isPOSTOmnichannelContactProps: import("ajv").ValidateFunction<POSTOmnichannelContactProps>;
type GETOmnichannelContactProps = {
    contactId: string;
};
export declare const isGETOmnichannelContactProps: import("ajv").ValidateFunction<GETOmnichannelContactProps>;
type GETOmnichannelContactSearchProps = {
    email: string;
} | {
    phone: string;
};
type LivechatAnalyticsAgentsAverageServiceTimeProps = PaginatedRequest<{
    start: string;
    end: string;
}>;
export declare const isLivechatAnalyticsAgentsAverageServiceTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsAgentsAverageServiceTimeProps>;
export declare const isGETOmnichannelContactSearchProps: import("ajv").ValidateFunction<GETOmnichannelContactSearchProps>;
type POSTLivechatAgentStatusProps = {
    status?: ILivechatAgent['statusLivechat'];
    agentId?: string;
};
export declare const isPOSTLivechatAgentStatusProps: import("ajv").ValidateFunction<POSTLivechatAgentStatusProps>;
type LivechatAnalyticsAgentsTotalServiceTimeProps = PaginatedRequest<{
    start: string;
    end: string;
}>;
export declare const isLivechatAnalyticsAgentsTotalServiceTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsAgentsTotalServiceTimeProps>;
type LivechatAnalyticsAgentsAvailableForServiceHistoryProps = PaginatedRequest<{
    start: string;
    end: string;
    fullReport?: string;
}>;
export declare const isLivechatAnalyticsAgentsAvailableForServiceHistoryProps: import("ajv").ValidateFunction<LivechatAnalyticsAgentsAvailableForServiceHistoryProps>;
type LivechatAnalyticsDepartmentsAmountOfChatsProps = PaginatedRequest<{
    start: string;
    end: string;
    answered?: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsAmountOfChatsProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsAmountOfChatsProps>;
type LivechatAnalyticsDepartmentsAverageServiceTimeProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsAverageServiceTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsAverageServiceTimeProps>;
type LivechatAnalyticsDepartmentsAverageChatDurationTimeProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsAverageChatDurationTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsAverageChatDurationTimeProps>;
type LivechatAnalyticsDepartmentsTotalServiceTimeProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsTotalServiceTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsTotalServiceTimeProps>;
type LivechatAnalyticsDepartmentsAverageWaitingTimeProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsAverageWaitingTimeProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsAverageWaitingTimeProps>;
type LivechatAnalyticsDepartmentsTotalTransferredChatsProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsTotalTransferredChatsProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsTotalTransferredChatsProps>;
type LivechatAnalyticsDepartmentsTotalAbandonedChatsProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsTotalAbandonedChatsProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsTotalAbandonedChatsProps>;
type LivechatAnalyticsDepartmentsPercentageAbandonedChatsProps = PaginatedRequest<{
    start: string;
    end: string;
    departmentId?: string;
}>;
export declare const isLivechatAnalyticsDepartmentsPercentageAbandonedChatsProps: import("ajv").ValidateFunction<LivechatAnalyticsDepartmentsPercentageAbandonedChatsProps>;
type GETAgentNextToken = {
    department?: string;
};
export declare const isGETAgentNextToken: import("ajv").ValidateFunction<GETAgentNextToken>;
type GETLivechatConfigParams = {
    token?: string;
    department?: string;
    businessUnit?: string;
};
export declare const isGETLivechatConfigParams: import("ajv").ValidateFunction<GETLivechatConfigParams>;
type POSTLivechatCustomFieldParams = {
    token: string;
    key: string;
    value: string;
    overwrite: boolean;
};
export declare const isPOSTLivechatCustomFieldParams: import("ajv").ValidateFunction<POSTLivechatCustomFieldParams>;
type POSTLivechatCustomFieldsParams = {
    token: string;
    customFields: {
        key: string;
        value: string;
        overwrite: boolean;
    }[];
};
export declare const isPOSTLivechatCustomFieldsParams: import("ajv").ValidateFunction<POSTLivechatCustomFieldsParams>;
type GETWebRTCCall = {
    rid: string;
};
export declare const isGETWebRTCCall: import("ajv").ValidateFunction<GETWebRTCCall>;
type PUTWebRTCCallId = {
    rid: string;
    status: string;
};
export declare const isPUTWebRTCCallId: import("ajv").ValidateFunction<PUTWebRTCCallId>;
type POSTLivechatTranscriptParams = {
    rid: string;
    token: string;
    email: string;
};
export declare const isPOSTLivechatTranscriptParams: import("ajv").ValidateFunction<POSTLivechatTranscriptParams>;
type POSTLivechatOfflineMessageParams = {
    name: string;
    email: string;
    message: string;
    department?: string;
    host?: string;
};
export declare const isPOSTLivechatOfflineMessageParams: import("ajv").ValidateFunction<POSTLivechatOfflineMessageParams>;
type POSTLivechatPageVisitedParams = {
    token: string;
    rid?: string;
    pageInfo: {
        title: string;
        change: string;
        location: {
            href: string;
        };
    };
};
export declare const isPOSTLivechatPageVisitedParams: import("ajv").ValidateFunction<POSTLivechatPageVisitedParams>;
type POSTLivechatMessageParams = {
    token: string;
    rid: string;
    msg: string;
    _id?: string;
    agent?: {
        agentId: string;
        username: string;
    };
};
export declare const isPOSTLivechatMessageParams: import("ajv").ValidateFunction<POSTLivechatMessageParams>;
type GETLivechatMessageIdParams = {
    token: string;
    rid: string;
};
export declare const isGETLivechatMessageIdParams: import("ajv").ValidateFunction<GETLivechatMessageIdParams>;
type PUTLivechatMessageIdParams = {
    token: string;
    rid: string;
    msg: string;
};
export declare const isPUTLivechatMessageIdParams: import("ajv").ValidateFunction<PUTLivechatMessageIdParams>;
type DELETELivechatMessageIdParams = {
    token: string;
    rid: string;
};
export declare const isDELETELivechatMessageIdParams: import("ajv").ValidateFunction<DELETELivechatMessageIdParams>;
type GETLivechatMessagesHistoryRidParams = PaginatedRequest<{
    searchText?: string;
    token: string;
    ls?: string;
    end?: string;
    limit?: number;
}>;
export declare const isGETLivechatMessagesHistoryRidParams: import("ajv").ValidateFunction<GETLivechatMessagesHistoryRidParams>;
type GETLivechatMessagesParams = {
    visitor: {
        token: string;
    };
    messages: {
        msg: string;
    }[];
};
export declare const isGETLivechatMessagesParams: import("ajv").ValidateFunction<GETLivechatMessagesParams>;
type GETLivechatRoomParams = {
    token: string;
    rid?: string;
    agentId?: string;
};
export declare const isGETLivechatRoomParams: import("ajv").ValidateFunction<GETLivechatRoomParams>;
type POSTLivechatRoomCloseParams = {
    token: string;
    rid: string;
};
export declare const isPOSTLivechatRoomCloseParams: import("ajv").ValidateFunction<POSTLivechatRoomCloseParams>;
type POSTLivechatRoomCloseByUserParams = {
    rid: string;
    comment?: string;
    tags?: string[];
    generateTranscriptPdf?: boolean;
    transcriptEmail?: {
        sendToVisitor: false;
    } | {
        sendToVisitor: true;
        requestData: Pick<NonNullable<IOmnichannelRoom['transcriptRequest']>, 'email' | 'subject'>;
    };
};
export declare const isPOSTLivechatRoomCloseByUserParams: import("ajv").ValidateFunction<POSTLivechatRoomCloseByUserParams>;
type POSTLivechatRoomTransferParams = {
    token: string;
    rid: string;
    department: string;
};
export declare const isPOSTLivechatRoomTransferParams: import("ajv").ValidateFunction<POSTLivechatRoomTransferParams>;
type POSTLivechatRoomSurveyParams = {
    token: string;
    rid: string;
    data: {
        name: string;
        value: string;
    }[];
};
export declare const isPOSTLivechatRoomSurveyParams: import("ajv").ValidateFunction<POSTLivechatRoomSurveyParams>;
type PUTLivechatRoomVisitorParams = {
    rid: string;
    oldVisitorId: string;
    newVisitorId: string;
};
export declare const isPUTLivechatRoomVisitorParams: import("ajv").ValidateFunction<PUTLivechatRoomVisitorParams>;
type POSTCannedResponsesProps = {
    _id?: string;
    shortcut: string;
    text: string;
    scope: string;
    departmentId?: string;
    tags?: string[];
};
export declare const isPOSTCannedResponsesProps: import("ajv").ValidateFunction<POSTCannedResponsesProps>;
type DELETECannedResponsesProps = {
    _id: string;
};
export declare const isDELETECannedResponsesProps: import("ajv").ValidateFunction<DELETECannedResponsesProps>;
type POSTLivechatUsersTypeProps = {
    username: string;
};
export declare const isPOSTLivechatUsersTypeProps: import("ajv").ValidateFunction<POSTLivechatUsersTypeProps>;
type GETLivechatVisitorsPagesVisitedRoomIdParams = PaginatedRequest;
export declare const isGETLivechatVisitorsPagesVisitedRoomIdParams: import("ajv").ValidateFunction<GETLivechatVisitorsPagesVisitedRoomIdParams>;
type GETLivechatVisitorsChatHistoryRoomRoomIdVisitorVisitorIdParams = PaginatedRequest;
export declare const isGETLivechatVisitorsChatHistoryRoomRoomIdVisitorVisitorIdParams: import("ajv").ValidateFunction<GETLivechatVisitorsChatHistoryRoomRoomIdVisitorVisitorIdParams>;
type GETLivechatVisitorsSearchChatsRoomRoomIdVisitorVisitorIdParams = PaginatedRequest<{
    searchText?: string;
    closedChatsOnly?: string;
    servedChatsOnly?: string;
    source?: string;
}>;
export declare const isGETLivechatVisitorsSearchChatsRoomRoomIdVisitorVisitorIdParams: import("ajv").ValidateFunction<GETLivechatVisitorsSearchChatsRoomRoomIdVisitorVisitorIdParams>;
type GETLivechatVisitorsAutocompleteParams = {
    selector: string;
};
export declare const isGETLivechatVisitorsAutocompleteParams: import("ajv").ValidateFunction<GETLivechatVisitorsAutocompleteParams>;
type GETLivechatVisitorsSearch = PaginatedRequest<{
    term?: string;
}>;
export declare const isGETLivechatVisitorsSearch: import("ajv").ValidateFunction<GETLivechatVisitorsSearch>;
type GETLivechatAgentsAgentIdDepartmentsParams = {
    enabledDepartmentsOnly?: booleanString;
};
export declare const isGETLivechatAgentsAgentIdDepartmentsParams: import("ajv").ValidateFunction<GETLivechatAgentsAgentIdDepartmentsParams>;
type GETBusinessHourParams = {
    _id?: string;
    type?: string;
};
export declare const isGETBusinessHourParams: import("ajv").ValidateFunction<GETBusinessHourParams>;
type GETLivechatTriggersParams = PaginatedRequest;
export declare const isGETLivechatTriggersParams: import("ajv").ValidateFunction<GETLivechatTriggersParams>;
export type GETLivechatRoomsParams = PaginatedRequest<{
    fields?: string;
    createdAt?: string;
    customFields?: string;
    closedAt?: string;
    agents?: string[];
    roomName?: string;
    departmentId?: string;
    open?: string | boolean;
    onhold?: string | boolean;
    tags?: string[];
}>;
export declare const isGETLivechatRoomsParams: import("ajv").ValidateFunction<GETLivechatRoomsParams>;
export type POSTLivechatRoomPriorityParams = {
    priorityId: string;
};
export declare const isPOSTLivechatRoomPriorityParams: import("ajv").ValidateFunction<POSTLivechatRoomPriorityParams>;
type GETLivechatQueueParams = PaginatedRequest<{
    agentId?: string;
    departmentId?: string;
    includeOfflineAgents?: string;
}>;
export declare const isGETLivechatQueueParams: import("ajv").ValidateFunction<GETLivechatQueueParams>;
type GETLivechatPrioritiesParams = PaginatedRequest<{
    text?: string;
}>;
export declare const isGETLivechatPrioritiesParams: import("ajv").ValidateFunction<GETLivechatPrioritiesParams>;
type DELETELivechatPriorityParams = {
    priorityId: string;
};
export declare const isDELETELivechatPriorityParams: import("ajv").ValidateFunction<DELETELivechatPriorityParams>;
type POSTLivechatPriorityParams = {
    name: string;
    level: string;
};
export declare const isPOSTLivechatPriorityParams: import("ajv").ValidateFunction<POSTLivechatPriorityParams>;
type GETLivechatInquiriesListParams = PaginatedRequest<{
    department?: string;
}>;
export declare const isGETLivechatInquiriesListParams: import("ajv").ValidateFunction<GETLivechatInquiriesListParams>;
type POSTLivechatInquiriesTakeParams = {
    inquiryId: string;
    userId?: string;
};
export declare const isPOSTLivechatInquiriesTakeParams: import("ajv").ValidateFunction<POSTLivechatInquiriesTakeParams>;
type GETLivechatInquiriesQueuedParams = PaginatedRequest<{
    department?: string;
}>;
export declare const isGETLivechatInquiriesQueuedParams: import("ajv").ValidateFunction<GETLivechatInquiriesQueuedParams>;
type GETLivechatInquiriesQueuedForUserParams = PaginatedRequest<{
    department?: string;
}>;
export declare const isGETLivechatInquiriesQueuedForUserParams: import("ajv").ValidateFunction<GETLivechatInquiriesQueuedForUserParams>;
type GETLivechatInquiriesGetOneParams = {
    roomId: string;
};
export declare const isGETLivechatInquiriesGetOneParams: import("ajv").ValidateFunction<GETLivechatInquiriesGetOneParams>;
type GETDashboardTotalizers = {
    start: string;
    end: string;
    departmentId?: string;
};
export declare const isGETDashboardTotalizerParams: import("ajv").ValidateFunction<GETDashboardTotalizers>;
type GETDashboardsAgentStatusParams = {
    departmentId?: string;
};
export declare const isGETDashboardsAgentStatusParams: import("ajv").ValidateFunction<GETDashboardsAgentStatusParams>;
type PUTLivechatPriority = {
    name: string;
} | {
    reset: boolean;
};
export declare const isPUTLivechatPriority: import("ajv").ValidateFunction<PUTLivechatPriority>;
type POSTomnichannelIntegrations = {
    LivechatWebhookUrl: string;
    LivechatSecretToken: string;
    LivechatHttpTimeout: number;
    LivechatWebhookOnStart: boolean;
    LivechatWebhookOnClose: boolean;
    LivechatWebhookOnChatTaken: boolean;
    LivechatWebhookOnChatQueued: boolean;
    LivechatWebhookOnForward: boolean;
    LivechatWebhookOnOfflineMsg: boolean;
    LivechatWebhookOnVisitorMessage: boolean;
    LivechatWebhookOnAgentMessage: boolean;
};
export declare const isPOSTomnichannelIntegrations: import("ajv").ValidateFunction<POSTomnichannelIntegrations>;
type POSTLivechatTranscriptRequestParams = {
    email: string;
    subject: string;
};
export declare const isPOSTLivechatTranscriptRequestParams: import("ajv").ValidateFunction<POSTLivechatTranscriptRequestParams>;
type POSTLivechatTriggersParams = {
    name: string;
    description: string;
    enabled: boolean;
    runOnce: boolean;
    conditions: ILivechatTriggerCondition[];
    actions: ILivechatTriggerAction[];
    _id?: string;
};
export declare const isPOSTLivechatTriggersParams: import("ajv").ValidateFunction<POSTLivechatTriggersParams>;
type POSTLivechatAppearanceParams = {
    _id: string;
    value: string | boolean | number;
}[];
export declare const isPOSTLivechatAppearanceParams: import("ajv").ValidateFunction<POSTLivechatAppearanceParams>;
type GETDashboardConversationsByType = {
    start: string;
    end: string;
    sort?: string;
};
export declare const isGETDashboardConversationsByType: import("ajv").ValidateFunction<GETDashboardConversationsByType>;
type LivechatAnalyticsAgentOverviewProps = {
    name: string;
    from: string;
    to: string;
    departmentId?: string;
};
export declare const isLivechatAnalyticsAgentOverviewProps: import("ajv").ValidateFunction<LivechatAnalyticsAgentOverviewProps>;
type LivechatAnalyticsOverviewProps = {
    name: string;
    from: string;
    to: string;
    departmentId?: string;
};
export declare const isLivechatAnalyticsOverviewProps: import("ajv").ValidateFunction<LivechatAnalyticsOverviewProps>;
export type OmnichannelEndpoints = {
    '/v1/livechat/appearance': {
        GET: () => {
            appearance: ISetting[];
        };
        POST: (params: POSTLivechatAppearanceParams) => void;
    };
    '/v1/livechat/visitors.info': {
        GET: (params: LivechatVisitorsInfo) => {
            visitor: ILivechatVisitor;
        };
    };
    '/v1/livechat/room.onHold': {
        POST: (params: LivechatRoomOnHold) => void;
    };
    '/v1/livechat/room.resumeOnHold': {
        POST: (params: LivechatRoomResumeOnHold) => void;
    };
    '/v1/livechat/room.join': {
        GET: (params: LiveChatRoomJoin) => void;
    };
    '/v1/livechat/room.forward': {
        POST: (params: LiveChatRoomForward) => void;
    };
    '/v1/livechat/room.saveInfo': {
        POST: (params: LiveChatRoomSaveInfo) => void;
    };
    '/v1/livechat/monitors': {
        GET: (params: LivechatMonitorsListProps) => PaginatedResult<{
            monitors: ILivechatMonitor[];
        }>;
    };
    '/v1/livechat/monitors/:username': {
        GET: () => ILivechatMonitor;
    };
    '/v1/livechat/tags': {
        GET: (params: LivechatTagsListProps) => PaginatedResult<{
            tags: ILivechatTag[];
        }>;
    };
    '/v1/livechat/tags/:tagId': {
        GET: () => ILivechatTag;
    };
    '/v1/livechat/department': {
        GET: (params?: LivechatDepartmentProps) => PaginatedResult<{
            departments: ILivechatDepartment[];
        }>;
        POST: (params: {
            department: Partial<ILivechatDepartment>;
            agents: string[];
        }) => {
            department: ILivechatDepartment;
            agents: any[];
        };
    };
    '/v1/livechat/department/:_id': {
        GET: (params: LivechatDepartmentId) => {
            department: ILivechatDepartment | null;
            agents?: ILivechatDepartmentAgents[];
        };
        PUT: (params: {
            department: LivechatDepartmentDTO;
            agents: {
                upsert?: {
                    agentId: string;
                    count?: number;
                    order?: number;
                }[];
                remove?: {
                    agentId: string;
                    count?: number;
                    order?: number;
                };
            }[];
        }) => {
            department: ILivechatDepartment | null;
            agents: ILivechatDepartmentAgents[];
        };
        DELETE: () => void;
    };
    '/v1/livechat/departments/archived': {
        GET: (params?: LivechatDepartmentProps) => PaginatedResult<{
            departments: ILivechatDepartment[];
        }>;
    };
    '/v1/livechat/department/:_id/archive': {
        POST: () => void;
    };
    '/v1/livechat/department/:_id/unarchive': {
        POST: () => void;
    };
    '/v1/livechat/department.autocomplete': {
        GET: (params: LivechatDepartmentAutocomplete) => {
            items: ILivechatDepartment[];
        };
    };
    '/v1/livechat/department/:_id/agents': {
        GET: (params: LivechatDepartmentDepartmentIdAgentsGET) => PaginatedResult<{
            agents: ILivechatDepartmentAgents[];
        }>;
        POST: (params: LivechatDepartmentDepartmentIdAgentsPOST) => void;
    };
    '/v1/livechat/units/:unitId/departments/available': {
        GET: (params: LivechatDepartmentsAvailableByUnitIdProps) => PaginatedResult<{
            departments: ILivechatDepartment[];
        }>;
    };
    '/v1/livechat/departments.by-unit/': {
        GET: (params: LivechatDepartmentsByUnitProps) => PaginatedResult<{
            departments: ILivechatDepartment[];
        }>;
    };
    '/v1/livechat/units/:unitId/departments': {
        GET: (params: LivechatDepartmentsByUnitIdProps) => PaginatedResult<{
            departments: ILivechatDepartment[];
        }>;
    };
    '/v1/livechat/department.listByIds': {
        GET: (params: {
            ids: string[];
            fields?: Record<string, unknown>;
        }) => {
            departments: ILivechatDepartment[];
        };
    };
    '/v1/livechat/department/isDepartmentCreationAvailable': {
        GET: () => {
            isDepartmentCreationAvailable: boolean;
        };
    };
    '/v1/livechat/custom-fields': {
        GET: (params?: LivechatCustomFieldsProps) => PaginatedResult<{
            customFields: ILivechatCustomField[];
        }>;
    };
    '/v1/livechat/custom-fields/:_id': {
        GET: () => {
            customField: ILivechatCustomField | null;
        };
    };
    '/v1/livechat/:rid/messages': {
        GET: (params: LivechatRidMessagesProps) => PaginatedResult<{
            messages: IMessage[];
        }>;
    };
    '/v1/livechat/users/:type': {
        GET: (params: LivechatUsersManagerGETProps) => PaginatedResult<{
            users: (ILivechatAgent & {
                departments: string[];
            })[];
        }>;
        POST: (params: POSTLivechatUsersTypeProps) => {
            success: boolean;
        };
    };
    '/v1/livechat/users/:type/:_id': {
        GET: () => {
            user: Pick<ILivechatAgent, '_id' | 'username' | 'name' | 'status' | 'statusLivechat' | 'emails' | 'livechat'> | null;
        };
        DELETE: () => void;
    };
    '/v1/livechat/users/manager': {
        GET: (params: LivechatUsersManagerGETProps) => PaginatedResult<{
            users: ILivechatAgent[];
        }>;
        POST: (params: POSTLivechatUsersTypeProps) => {
            success: boolean;
        };
    };
    '/v1/livechat/users/user': {
        GET: (params: LivechatUsersManagerGETProps) => PaginatedResult<{
            users: ILivechatAgent[];
        }>;
        POST: (params: POSTLivechatUsersTypeProps) => {
            success: boolean;
        };
    };
    '/v1/livechat/users/manager/:_id': {
        GET: () => {
            user: Pick<ILivechatAgent, '_id' | 'username' | 'name' | 'status' | 'statusLivechat' | 'emails' | 'livechat'> | null;
        };
        DELETE: () => void;
    };
    '/v1/livechat/users/user/:_id': {
        GET: () => {
            user: Pick<ILivechatAgent, '_id' | 'username' | 'name' | 'status' | 'statusLivechat' | 'emails' | 'livechat'> | null;
        };
        DELETE: () => void;
    };
    '/v1/livechat/users/agent': {
        GET: (params: PaginatedRequest<{
            text?: string;
            onlyAvailable?: boolean;
            excludeId?: string;
            showIdleAgents?: boolean;
        }>) => PaginatedResult<{
            users: (ILivechatAgent & {
                departments: string[];
            })[];
        }>;
        POST: (params: LivechatUsersManagerPOSTProps) => {
            success: boolean;
        };
    };
    '/v1/livechat/users/agent/:_id': {
        GET: (params?: PaginatedRequest<{
            text: string;
        }>) => {
            user: Pick<ILivechatAgent, '_id' | 'username' | 'name' | 'status' | 'statusLivechat' | 'emails' | 'livechat'>;
        };
        DELETE: () => {
            success: boolean;
        };
    };
    '/v1/livechat/visitor': {
        POST: (params: {
            visitor: ILivechatVisitorDTO;
        }) => {
            visitor: ILivechatVisitor;
        };
    };
    '/v1/livechat/visitor/:token': {
        GET: (params?: LivechatVisitorTokenGet) => {
            visitor: ILivechatVisitor;
        };
        DELETE: (params: LivechatVisitorTokenDelete) => {
            visitor: {
                _id: string;
                ts: string;
            };
        };
    };
    '/v1/livechat/visitor/:token/room': {
        GET: (params: LivechatVisitorTokenRoom) => {
            rooms: IOmnichannelRoom[];
        };
    };
    '/v1/livechat/visitor.callStatus': {
        POST: (params: LivechatVisitorCallStatus) => {
            token: string;
            callStatus: string;
        };
    };
    '/v1/livechat/visitor.status': {
        POST: (params: LivechatVisitorStatus) => {
            token: string;
            status: string;
        };
    };
    '/v1/livechat/agents/:uid/departments': {
        GET: (params: {
            enableDepartmentsOnly: 'true' | 'false' | '0' | '1';
        }) => {
            departments: ILivechatDepartmentAgents[];
        };
    };
    '/v1/livechat/agent.status': {
        POST: (params: POSTLivechatAgentStatusProps) => {
            status: ILivechatAgent['statusLivechat'];
        };
    };
    '/v1/canned-responses': {
        GET: (params: CannedResponsesProps) => PaginatedResult<{
            cannedResponses: IOmnichannelCannedResponse[];
        }>;
        POST: (params: POSTCannedResponsesProps) => void;
        DELETE: (params: DELETECannedResponsesProps) => void;
    };
    '/v1/canned-responses/:_id': {
        GET: () => {
            cannedResponse: IOmnichannelCannedResponse;
        };
    };
    '/v1/canned-responses.get': {
        GET: () => {
            responses: IOmnichannelCannedResponse[];
        };
    };
    '/v1/livechat/webrtc.call': {
        GET: (params: GETWebRTCCall) => {
            videoCall: {
                rid: string;
                provider: string;
                callStatus: 'ringing' | 'ongoing';
            };
        };
    };
    '/v1/livechat/webrtc.call/:callId': {
        PUT: (params: PUTWebRTCCallId) => {
            status: string | undefined;
        };
    };
    '/v1/livechat/sla': {
        GET: (params: LivechatPrioritiesProps) => PaginatedResult<{
            sla: IOmnichannelServiceLevelAgreements[];
        }>;
        POST: (params: CreateOrUpdateLivechatSlaProps) => {
            sla: Omit<IOmnichannelServiceLevelAgreements, '_updatedAt'>;
        };
    };
    '/v1/livechat/sla/:slaId': {
        GET: () => IOmnichannelServiceLevelAgreements;
        PUT: (params: CreateOrUpdateLivechatSlaProps) => {
            sla: Omit<IOmnichannelServiceLevelAgreements, '_updatedAt'>;
        };
        DELETE: () => void;
    };
    '/v1/livechat/priorities': {
        GET: (params: GETLivechatPrioritiesParams) => PaginatedResult<{
            priorities: ILivechatPriority[];
        }>;
    };
    '/v1/livechat/priorities/:priorityId': {
        GET: () => ILivechatPriority | void;
        PUT: (params: PUTLivechatPriority) => void;
    };
    '/v1/livechat/priorities.reset': {
        POST: () => void;
        GET: () => {
            reset: boolean;
        };
    };
    '/v1/livechat/visitors.search': {
        GET: (params: GETLivechatVisitorsSearch) => PaginatedResult<{
            visitors: (ILivechatVisitor & {
                fname?: string;
            })[];
        }>;
    };
    '/v1/omnichannel/contact': {
        POST: (params: POSTOmnichannelContactProps) => {
            contact: string;
        };
        GET: (params: GETOmnichannelContactProps) => {
            contact: ILivechatVisitor | null;
        };
    };
    '/v1/omnichannel/contact.search': {
        GET: (params: GETOmnichannelContactSearchProps) => {
            contact: ILivechatVisitor | null;
        };
    };
    '/v1/livechat/agent.info/:rid/:token': {
        GET: () => {
            agent: ILivechatAgent | {
                hiddenInfo: true;
            };
        };
    };
    '/v1/livechat/agent.next/:token': {
        GET: (params: GETAgentNextToken) => {
            agent: ILivechatAgent | {
                hiddenInfo: true;
            };
        } | void;
    };
    '/v1/livechat/config': {
        GET: (params: GETLivechatConfigParams) => {
            config: {
                [k: string]: string | boolean;
            } & {
                room?: IOmnichannelRoom;
                agent?: ILivechatAgent;
            };
        };
    };
    '/v1/livechat/custom.field': {
        POST: (params: POSTLivechatCustomFieldParams) => {
            field: {
                key: string;
                value: string;
                overwrite: boolean;
            };
        };
    };
    '/v1/livechat/custom.fields': {
        POST: (params: POSTLivechatCustomFieldsParams) => {
            fields: {
                Key: string;
                value: string;
                overwrite: boolean;
            }[];
        };
    };
    '/v1/livechat/transfer.history/:rid': {
        GET: () => PaginatedResult<{
            history: IOmnichannelSystemMessage['transferData'][];
        }>;
    };
    '/v1/livechat/transcript': {
        POST: (params: POSTLivechatTranscriptParams) => {
            message: string;
        };
    };
    '/v1/livechat/transcript/:rid': {
        DELETE: () => void;
        POST: (params: POSTLivechatTranscriptRequestParams) => void;
    };
    '/v1/livechat/offline.message': {
        POST: (params: POSTLivechatOfflineMessageParams) => {
            message: string;
        };
    };
    '/v1/livechat/page.visited': {
        POST: (params: POSTLivechatPageVisitedParams) => {
            page: Pick<IOmnichannelSystemMessage, 'msg' | 'navigation'>;
        } | void;
    };
    '/v1/livechat/message': {
        POST: (params: POSTLivechatMessageParams) => {
            message: IMessage;
        };
    };
    '/v1/livechat/message/:_id': {
        GET: (parms: GETLivechatMessageIdParams) => {
            message: IMessage | void;
        };
        PUT: (params: PUTLivechatMessageIdParams) => {
            message: IMessage | void;
        };
        DELETE: (params: DELETELivechatMessageIdParams) => {
            message: Pick<Serialized<IMessage>, 'ts' | '_id'>;
        };
    };
    '/v1/livechat/messages.history/:rid': {
        GET: (params: GETLivechatMessagesHistoryRidParams) => {
            messages: IMessage[];
        };
    };
    '/v1/livechat/messages': {
        POST: (params: GETLivechatMessagesParams) => {
            messages: {
                username: string;
                msg: string;
                ts: Date;
            }[];
        };
    };
    '/v1/livechat/room': {
        GET: (params: GETLivechatRoomParams) => {
            room: IOmnichannelRoom;
            newRoom: boolean;
        } | IOmnichannelRoom;
    };
    '/v1/livechat/room.close': {
        POST: (params: POSTLivechatRoomCloseParams) => {
            rid: string;
            comment: string;
        };
    };
    '/v1/livechat/room.closeByUser': {
        POST: (params: POSTLivechatRoomCloseByUserParams) => void;
    };
    '/v1/livechat/room.transfer': {
        POST: (params: POSTLivechatRoomTransferParams) => Deprecated<{
            room: IOmnichannelRoom;
        }>;
    };
    '/v1/livechat/room.survey': {
        POST: (params: POSTLivechatRoomSurveyParams) => {
            rid: string;
            data: unknown;
        };
    };
    '/v1/livechat/room.visitor': {
        PUT: (params: PUTLivechatRoomVisitorParams) => Deprecated<{
            room: IOmnichannelRoom;
        }>;
    };
    '/v1/livechat/visitors.pagesVisited/:roomId': {
        GET: (params: GETLivechatVisitorsPagesVisitedRoomIdParams) => PaginatedResult<{
            pages: IMessage[];
        }>;
    };
    '/v1/livechat/visitors.chatHistory/room/:roomId/visitor/:visitorId': {
        GET: (params: GETLivechatVisitorsChatHistoryRoomRoomIdVisitorVisitorIdParams) => PaginatedResult<{
            history: IOmnichannelRoom[];
        }>;
    };
    '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId': {
        GET: (params: GETLivechatVisitorsSearchChatsRoomRoomIdVisitorVisitorIdParams) => PaginatedResult<{
            history: VisitorSearchChatsResult[];
        }>;
    };
    '/v1/livechat/visitors.autocomplete': {
        GET: (params: GETLivechatVisitorsAutocompleteParams) => {
            items: (ILivechatVisitor & {
                custom_name: string;
            })[];
        };
    };
    '/v1/livechat/agents/:agentId/departments': {
        GET: (params?: GETLivechatAgentsAgentIdDepartmentsParams) => {
            departments: ILivechatDepartmentAgents[];
        };
    };
    '/v1/livechat/business-hour': {
        GET: (params: GETBusinessHourParams) => {
            businessHour: ILivechatBusinessHour;
        };
    };
    '/v1/livechat/triggers': {
        GET: (params: GETLivechatTriggersParams) => PaginatedResult<{
            triggers: WithId<ILivechatTrigger>[];
        }>;
        POST: (params: POSTLivechatTriggersParams) => void;
    };
    '/v1/livechat/triggers/:_id': {
        GET: () => {
            trigger: ILivechatTrigger;
        };
        DELETE: () => void;
    };
    '/v1/livechat/rooms': {
        GET: (params: GETLivechatRoomsParams) => PaginatedResult<{
            rooms: IOmnichannelRoom[];
        }>;
    };
    '/v1/livechat/room/:rid/priority': {
        POST: (params: POSTLivechatRoomPriorityParams) => void;
        DELETE: () => void;
    };
    '/v1/livechat/queue': {
        GET: (params: GETLivechatQueueParams) => PaginatedResult<{
            queue: {
                _id: string;
                user: {
                    _id: string;
                    userId: string;
                    username: string;
                    status: string;
                };
                department: {
                    _id: string;
                    name: string;
                };
                chats: number;
            }[];
        }>;
    };
    '/v1/livechat/integrations.settings': {
        GET: () => {
            settings: ISetting[];
            success: boolean;
        };
    };
    '/v1/livechat/upload/:rid': {
        POST: (params: {
            file: File;
        }) => IMessage & {
            newRoom: boolean;
            showConnecting: boolean;
        };
    };
    '/v1/livechat/inquiries.list': {
        GET: (params: GETLivechatInquiriesListParams) => PaginatedResult<{
            inquiries: ILivechatInquiryRecord[];
        }>;
    };
    '/v1/livechat/inquiries.take': {
        POST: (params: POSTLivechatInquiriesTakeParams) => {
            inquiry: ILivechatInquiryRecord;
        };
    };
    '/v1/livechat/inquiries.queued': {
        GET: (params: GETLivechatInquiriesQueuedParams) => PaginatedResult<{
            inquiries: ILivechatInquiryRecord[];
        }>;
    };
    '/v1/livechat/inquiries.queuedForUser': {
        GET: (params: GETLivechatInquiriesQueuedForUserParams) => PaginatedResult<{
            inquiries: ILivechatInquiryRecord[];
        }>;
    };
    '/v1/livechat/inquiries.getOne': {
        GET: (params: GETLivechatInquiriesGetOneParams) => {
            inquiry: ILivechatInquiryRecord | null;
        };
    };
    '/v1/livechat/analytics/dashboards/conversation-totalizers': {
        GET: (params: GETDashboardTotalizers) => {
            totalizers: {
                title: string;
                value: number;
            }[];
        };
    };
    '/v1/livechat/analytics/dashboards/agents-productivity-totalizers': {
        GET: (params: GETDashboardTotalizers) => {
            totalizers: {
                title: string;
                value: number;
            }[];
        };
    };
    '/v1/livechat/analytics/dashboards/chats-totalizers': {
        GET: (params: GETDashboardTotalizers) => {
            totalizers: {
                title: string;
                value: number;
            }[];
        };
    };
    '/v1/livechat/analytics/dashboards/productivity-totalizers': {
        GET: (params: GETDashboardTotalizers) => {
            totalizers: {
                title: string;
                value: number;
            }[];
        };
    };
    '/v1/livechat/analytics/dashboards/charts/chats': {
        GET: (params: GETDashboardTotalizers) => {
            open: number;
            closed: number;
            queued: number;
            onhold: number;
        };
    };
    '/v1/livechat/analytics/dashboards/charts/chats-per-agent': {
        GET: (params: GETDashboardTotalizers) => {
            [k: string]: {
                open: number;
                closed: number;
                onhold: number;
            };
        };
    };
    '/v1/livechat/analytics/dashboards/charts/chats-per-department': {
        GET: (params: GETDashboardTotalizers) => {
            [k: string]: {
                open: number;
                closed: number;
            };
        };
    };
    '/v1/livechat/analytics/dashboards/charts/timings': {
        GET: (params: GETDashboardTotalizers) => {
            response: {
                avg: number;
                longest: number;
            };
            reaction: {
                avg: number;
                longest: number;
            };
            chatDuration: {
                avg: number;
                longest: number;
            };
        };
    };
    '/v1/livechat/analytics/dashboards/charts/agents-status': {
        GET: (params: GETDashboardsAgentStatusParams) => {
            offline: number;
            away: number;
            busy: number;
            available: number;
        };
    };
    '/v1/livechat/rooms/filters': {
        GET: () => {
            filters: IOmnichannelRoom['source'][];
        };
    };
    '/v1/livechat/analytics/agent-overview': {
        GET: (params: LivechatAnalyticsAgentOverviewProps) => {
            head: {
                name: string;
            }[];
            data: {
                name: string;
                value: number;
            }[];
        };
    };
    '/v1/livechat/analytics/overview': {
        GET: (params: LivechatAnalyticsOverviewProps) => {
            title: string;
            value: string | number;
        }[];
    };
} & {
    '/v1/livechat/analytics/agents/average-service-time': {
        GET: (params: LivechatAnalyticsAgentsAverageServiceTimeProps) => PaginatedResult<{
            agents: {
                _id: string;
                username: string;
                name: string;
                active: boolean;
                averageServiceTimeInSeconds: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/agents/total-service-time': {
        GET: (params: LivechatAnalyticsAgentsTotalServiceTimeProps) => PaginatedResult<{
            agents: {
                _id: string;
                username: string;
                chats: number;
                serviceTimeDuration: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/agents/available-for-service-history': {
        GET: (params: LivechatAnalyticsAgentsAvailableForServiceHistoryProps) => PaginatedResult<{
            agents: ILivechatAgentActivity[];
        }>;
    };
    '/v1/livechat/analytics/departments/amount-of-chats': {
        GET: (params: LivechatAnalyticsDepartmentsAmountOfChatsProps) => PaginatedResult<{
            departments: IOmnichannelRoom[];
        }>;
    };
    '/v1/livechat/analytics/departments/average-service-time': {
        GET: (params: LivechatAnalyticsDepartmentsAverageServiceTimeProps) => PaginatedResult<{
            departments: {
                _id: string;
                averageServiceTimeInSeconds: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/average-chat-duration-time': {
        GET: (params: LivechatAnalyticsDepartmentsAverageChatDurationTimeProps) => PaginatedResult<{
            departments: {
                _id: string;
                averageChatDurationTimeInSeconds: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/total-service-time': {
        GET: (params: LivechatAnalyticsDepartmentsTotalServiceTimeProps) => PaginatedResult<{
            departments: {
                _id: string;
                serviceTimeDuration: number;
                chats: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/average-waiting-time': {
        GET: (params: LivechatAnalyticsDepartmentsAverageWaitingTimeProps) => PaginatedResult<{
            departments: {
                _id: string;
                averageWaitingTimeInSeconds: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/total-transferred-chats': {
        GET: (params: LivechatAnalyticsDepartmentsTotalTransferredChatsProps) => PaginatedResult<{
            departments: {
                _id: string;
                numberOfTransferredRooms: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/total-abandoned-chats': {
        GET: (params: LivechatAnalyticsDepartmentsTotalAbandonedChatsProps) => PaginatedResult<{
            departments: {
                _id: string;
                abandonedRooms: number;
            }[];
        }>;
    };
    '/v1/livechat/analytics/departments/percentage-abandoned-chats': {
        GET: (params: LivechatAnalyticsDepartmentsPercentageAbandonedChatsProps) => PaginatedResult<{
            departments: {
                _id: string;
                percentageOfAbandonedRooms: number;
            }[];
        }>;
    };
    '/v1/omnichannel/:rid/request-transcript': {
        POST: () => void;
    };
    '/v1/omnichannel/integrations': {
        POST: (params: POSTomnichannelIntegrations) => void;
    };
    '/v1/livechat/inquiry.setSLA': {
        PUT: (params: {
            roomId: string;
            sla: string;
        }) => void;
    };
    '/v1/livechat/analytics/dashboards/conversations-by-source': {
        GET: (params: GETDashboardConversationsByType) => ReportResult;
    };
    '/v1/livechat/analytics/dashboards/conversations-by-status': {
        GET: (params: GETDashboardConversationsByType) => ReportResult;
    };
    '/v1/livechat/analytics/dashboards/conversations-by-department': {
        GET: (params: GETDashboardConversationsByType) => ReportWithUnmatchingElements;
    };
    '/v1/livechat/analytics/dashboards/conversations-by-tags': {
        GET: (params: GETDashboardConversationsByType) => ReportWithUnmatchingElements;
    };
    '/v1/livechat/analytics/dashboards/conversations-by-agent': {
        GET: (params: GETDashboardConversationsByType) => ReportWithUnmatchingElements;
    };
    '/v1/livechat/webhook.test': {
        POST: () => void;
    };
};
export {};
//# sourceMappingURL=omnichannel.d.ts.map