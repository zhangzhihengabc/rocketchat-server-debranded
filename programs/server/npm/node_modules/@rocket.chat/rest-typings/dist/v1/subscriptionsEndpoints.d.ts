import type { ISubscription, IMessage, IRoom } from '@rocket.chat/core-typings';
type SubscriptionsGet = {
    updatedSince?: string;
};
type SubscriptionsGetOne = {
    roomId: IRoom['_id'];
};
type SubscriptionsRead = {
    rid: IRoom['_id'];
    readThreads?: boolean;
} | {
    roomId: IRoom['_id'];
    readThreads?: boolean;
};
type SubscriptionsUnread = {
    roomId: IRoom['_id'];
} | {
    firstUnreadMessage: Pick<IMessage, '_id'>;
};
export declare const isSubscriptionsGetProps: import("ajv").ValidateFunction<SubscriptionsGet>;
export declare const isSubscriptionsGetOneProps: import("ajv").ValidateFunction<SubscriptionsGetOne>;
export declare const isSubscriptionsReadProps: import("ajv").ValidateFunction<SubscriptionsRead>;
export declare const isSubscriptionsUnreadProps: import("ajv").ValidateFunction<SubscriptionsUnread>;
export type SubscriptionsEndpoints = {
    '/v1/subscriptions.get': {
        GET: (params: SubscriptionsGet) => {
            update: ISubscription[];
            remove: (Pick<ISubscription, '_id'> & {
                _deletedAt: Date;
            })[];
        };
    };
    '/v1/subscriptions.getOne': {
        GET: (params: SubscriptionsGetOne) => {
            subscription: ISubscription | null;
        };
    };
    '/v1/subscriptions.read': {
        POST: (params: SubscriptionsRead) => void;
    };
    '/v1/subscriptions.unread': {
        POST: (params: SubscriptionsUnread) => void;
    };
};
export {};
//# sourceMappingURL=subscriptionsEndpoints.d.ts.map