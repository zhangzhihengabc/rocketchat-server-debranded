/// <reference types="node" />
/// <reference types="node" />
import { proxifyWithWait } from './lib/proxify';
import type { IAccount, ILoginResult } from './types/IAccount';
import type { IAnalyticsService } from './types/IAnalyticsService';
import type { IAppsEngineService } from './types/IAppsEngineService';
import type { IAuthorization, RoomAccessValidator } from './types/IAuthorization';
import type { IAuthorizationLivechat } from './types/IAuthorizationLivechat';
import type { IAuthorizationVoip } from './types/IAuthorizationVoip';
import type { IBannerService } from './types/IBannerService';
import type { ICalendarService } from './types/ICalendarService';
import type { IDeviceManagementService } from './types/IDeviceManagementService';
import type { IEnterpriseSettings } from './types/IEnterpriseSettings';
import type { IImportService } from './types/IImportService';
import type { ILDAPService } from './types/ILDAPService';
import type { ILicense } from './types/ILicense';
import type { IMediaService, ResizeResult } from './types/IMediaService';
import type { IMessageReadsService } from './types/IMessageReadsService';
import type { IMessageService } from './types/IMessageService';
import type { IMeteor, AutoUpdateRecord } from './types/IMeteor';
import type { INPSService, NPSCreatePayload, NPSVotePayload } from './types/INPSService';
import type { IOmnichannelEEService } from './types/IOmnichannelEEService';
import type { IOmnichannelIntegrationService } from './types/IOmnichannelIntegrationService';
import type { IOmnichannelService } from './types/IOmnichannelService';
import type { IOmnichannelTranscriptService } from './types/IOmnichannelTranscriptService';
import type { IOmnichannelVoipService, FindVoipRoomsParams } from './types/IOmnichannelVoipService';
import type { IPresence } from './types/IPresence';
import type { IPushService } from './types/IPushService';
import type { IQueueWorkerService, HealthAggResult } from './types/IQueueWorkerService';
import type { IRoomService, ICreateRoomParams, ISubscriptionExtraData } from './types/IRoomService';
import type { ISAUMonitorService } from './types/ISAUMonitorService';
import type { ISettingsService } from './types/ISettingsService';
import type { ITeamService, ITeamUpdateData, ITeamMemberParams, ITeamMemberInfo, ITeamInfo, ITeamCreateParams, ITeamAutocompleteResult, IListRoomsFilter } from './types/ITeamService';
import type { ITelemetryEvent, TelemetryMap, TelemetryEvents } from './types/ITelemetryEvent';
import type { ITranslationService } from './types/ITranslationService';
import type { UiKitCoreAppPayload, IUiKitCoreApp, IUiKitCoreAppService } from './types/IUiKitCoreApp';
import type { ISendFileLivechatMessageParams, ISendFileMessageParams, IUploadFileParams, IUploadService } from './types/IUploadService';
import type { IVideoConfService, VideoConferenceJoinOptions } from './types/IVideoConfService';
import type { IVoipService } from './types/IVoipService';
export { asyncLocalStorage } from './lib/asyncLocalStorage';
export { MeteorError, isMeteorError } from './MeteorError';
export { api } from './api';
export { EventSignatures } from './Events';
export { LocalBroker } from './LocalBroker';
export { IBroker, IBrokerNode, BaseMetricOptions, IServiceMetrics } from './types/IBroker';
export { IServiceContext, ServiceClass, IServiceClass, ServiceClassInternal } from './types/ServiceClass';
export { IFederationService, IFederationServiceEE, IFederationJoinExternalPublicRoomInput } from './types/IFederationService';
export { AutoUpdateRecord, FindVoipRoomsParams, IAccount, IAnalyticsService, IAppsEngineService, IAuthorization, IAuthorizationLivechat, IAuthorizationVoip, IBannerService, ICreateRoomParams, IDeviceManagementService, IEnterpriseSettings, ILDAPService, ILicense, IListRoomsFilter, ILoginResult, IMediaService, IMeteor, INPSService, IOmnichannelService, IOmnichannelVoipService, IPresence, IPushService, IMessageReadsService, IRoomService, ISAUMonitorService, ISubscriptionExtraData, ITeamAutocompleteResult, ITeamCreateParams, ITeamInfo, ITeamMemberInfo, ITeamMemberParams, ITeamService, ITeamUpdateData, ITelemetryEvent, UiKitCoreAppPayload, IUiKitCoreApp, IUiKitCoreAppService, IVideoConfService, IVoipService, NPSCreatePayload, NPSVotePayload, proxifyWithWait, ResizeResult, RoomAccessValidator, TelemetryEvents, TelemetryMap, VideoConferenceJoinOptions, ISendFileLivechatMessageParams, ISendFileMessageParams, IUploadFileParams, IUploadService, ICalendarService, IOmnichannelTranscriptService, IQueueWorkerService, HealthAggResult, ITranslationService, IMessageService, ISettingsService, IOmnichannelEEService, IOmnichannelIntegrationService, IImportService, };
export declare const Authorization: {
    hasAllPermission: (userId: string, permissions: string[], scope?: string | undefined) => Promise<boolean>;
    hasPermission: (userId: string, permissionId: string, scope?: string | undefined) => Promise<boolean>;
    hasAtLeastOnePermission: (userId: string, permissions: string[], scope?: string | undefined) => Promise<boolean>;
    canAccessRoom: RoomAccessValidator;
    canAccessRoomId: (rid: string, uid?: string | undefined) => Promise<boolean>;
    getUsersFromPublicRoles: () => Promise<(import("@rocket.chat/core-typings").IRocketChatRecord & Pick<import("@rocket.chat/core-typings").IUser, "_id" | "roles" | "username">)[]>;
};
export declare const Apps: {
    isInitialized: () => Promise<boolean>;
    getApps: (query: import("@rocket.chat/apps-engine/server/IGetAppsFilter").IGetAppsFilter) => Promise<import("@rocket.chat/apps-engine/definition/metadata").IAppInfo[] | undefined>;
    getAppStorageItemById: (appId: string) => Promise<import("@rocket.chat/apps-engine/server/storage").IAppStorageItem | undefined>;
};
export declare const Presence: {
    newConnection: (uid: string | undefined, session: string | undefined, nodeId: string) => Promise<{
        uid: string;
        connectionId: string;
    } | undefined>;
    removeConnection: (uid: string | undefined, session: string | undefined, nodeId: string) => Promise<{
        uid: string;
        session: string;
    } | undefined>;
    removeLostConnections: (nodeID: string) => Promise<string[]>;
    setStatus: (uid: string, status: import("@rocket.chat/core-typings").UserStatus, statusText?: string | undefined) => Promise<boolean>;
    setConnectionStatus: (uid: string, status: import("@rocket.chat/core-typings").UserStatus, session: string) => Promise<boolean>;
    updateUserPresence: (uid: string) => Promise<void>;
    toggleBroadcast: (enabled: boolean) => Promise<void>;
    getConnectionCount: () => Promise<{
        current: number;
        max: number;
    }>;
    getPeakConnections: (reset?: boolean | undefined) => Promise<number>;
    resetPeakConnections: () => Promise<void>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const Account: {
    login: ({ resume, user, password }: {
        resume: string;
        user: {
            username: string;
        };
        password: string;
    }) => Promise<false | ILoginResult>;
    logout: ({ userId, token }: {
        userId: string;
        token: string;
    }) => Promise<void>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const License: {
    hasModule: (feature: string) => Promise<boolean>;
    hasValidLicense: () => Promise<boolean>;
    getModules: () => Promise<string[]>;
    getGuestPermissions: () => Promise<string[]>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const MeteorService: {
    getAutoUpdateClientVersions: () => Promise<Record<string, AutoUpdateRecord>>;
    getLoginServiceConfiguration: () => Promise<any[]>;
    callMethodWithToken: (userId: string | undefined, token: string | undefined, method: string, args: any[]) => Promise<any>;
    notifyGuestStatusChanged: (token: string, status: string) => Promise<void>;
    getURL: (path: string, params?: Record<string, any> | undefined, cloudDeepLinkUrl?: string | undefined) => Promise<string>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const Banner: {
    getBannersForUser: (userId: string, platform: import("@rocket.chat/core-typings").BannerPlatform, bannerId?: string | undefined) => Promise<import("@rocket.chat/core-typings").IBanner[]>;
    create: (banner: import("@rocket.chat/core-typings").Optional<import("@rocket.chat/core-typings").IBanner, "_id" | "_updatedAt">) => Promise<import("@rocket.chat/core-typings").IBanner>;
    dismiss: (userId: string, bannerId: string) => Promise<boolean>;
    discardDismissal: (bannerId: string) => Promise<boolean>;
    getById: (bannerId: string) => Promise<import("@rocket.chat/core-typings").IBanner | null>;
    disable: (bannerId: string) => Promise<boolean>;
    enable: (bannerId: string, doc?: Partial<Omit<import("@rocket.chat/core-typings").IBanner, "_id">> | undefined) => Promise<boolean>;
};
export declare const UiKitCoreApp: {
    isRegistered: (appId: string) => Promise<boolean>;
    blockAction: (payload: UiKitCoreAppPayload) => Promise<unknown>;
    viewClosed: (payload: UiKitCoreAppPayload) => Promise<unknown>;
    viewSubmit: (payload: UiKitCoreAppPayload) => Promise<unknown>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const NPS: {
    create: (nps: NPSCreatePayload) => Promise<boolean>;
    vote: (vote: NPSVotePayload) => Promise<void>;
    sendResults: () => Promise<void>;
    closeOpenSurveys: () => Promise<void>;
};
export declare const Team: {
    create: (uid: string, params: ITeamCreateParams) => Promise<import("@rocket.chat/core-typings").ITeam>;
    addRooms: (uid: string, rooms: string[], teamId: string) => Promise<import("@rocket.chat/core-typings").IRoom[]>;
    removeRoom: (uid: string, rid: string, teamId: string, canRemoveAnyRoom: boolean) => Promise<import("@rocket.chat/core-typings").IRoom>;
    listRooms: (uid: string, teamId: string, filter: IListRoomsFilter, pagination: import("@rocket.chat/core-typings").IPaginationOptions) => Promise<import("@rocket.chat/core-typings").IRecordsWithTotal<import("@rocket.chat/core-typings").IRoom>>;
    listRoomsOfUser: (uid: string, teamId: string, userId: string, allowPrivateTeam: boolean, showCanDeleteOnly: boolean, pagination: import("@rocket.chat/core-typings").IPaginationOptions) => Promise<import("@rocket.chat/core-typings").IRecordsWithTotal<import("@rocket.chat/core-typings").IRoom>>;
    updateRoom: (uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom: boolean) => Promise<import("@rocket.chat/core-typings").IRoom>;
    list: (uid: string, paginationOptions?: import("@rocket.chat/core-typings").IPaginationOptions | undefined, queryOptions?: import("@rocket.chat/core-typings").IQueryOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").IRecordsWithTotal<import("@rocket.chat/core-typings").ITeam>>;
    listAll: (options?: import("@rocket.chat/core-typings").IPaginationOptions | undefined) => Promise<import("@rocket.chat/core-typings").IRecordsWithTotal<import("@rocket.chat/core-typings").ITeam>>;
    listByNames: (names: string[], options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").ITeam[]>;
    listByIds: (ids: string[], options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").ITeam[]>;
    search: (userId: string, term: string | RegExp, options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").ITeam[]>;
    members: (uid: string, teamId: string, canSeeAll: boolean, options?: import("@rocket.chat/core-typings").IPaginationOptions | undefined, queryOptions?: import("mongodb").Filter<import("@rocket.chat/core-typings").IUser> | undefined) => Promise<import("@rocket.chat/core-typings").IRecordsWithTotal<ITeamMemberInfo>>;
    addMember: (inviter: Pick<import("@rocket.chat/core-typings").IUser, "_id" | "username">, userId: string, teamId: string) => Promise<boolean>;
    addMembers: (uid: string, teamId: string, members: ITeamMemberParams[]) => Promise<void>;
    updateMember: (teamId: string, members: ITeamMemberParams) => Promise<void>;
    removeMember: (teamId: string, userId: string) => Promise<void>;
    removeMembers: (uid: string, teamId: string, members: ITeamMemberParams[]) => Promise<boolean>;
    getInfoByName: (teamName: string) => Promise<Partial<import("@rocket.chat/core-typings").ITeam> | null>;
    getInfoById: (teamId: string) => Promise<Partial<import("@rocket.chat/core-typings").ITeam> | null>;
    deleteById: (teamId: string) => Promise<boolean>;
    deleteByName: (teamName: string) => Promise<boolean>;
    unsetTeamIdOfRooms: (uid: string, teamId: string) => Promise<void>;
    getOneById: {
        (teamId: string, options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined): Promise<import("@rocket.chat/core-typings").ITeam | null>;
        <P extends import("bson").Document>(teamId: string, options?: import("mongodb").FindOptions<P extends import("@rocket.chat/core-typings").ITeam ? import("@rocket.chat/core-typings").ITeam : P> | undefined): Promise<import("@rocket.chat/core-typings").ITeam | P | null>;
    };
    getOneByName: (teamName: string | RegExp, options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").ITeam | null>;
    getOneByMainRoomId: (teamId: string) => Promise<Pick<import("@rocket.chat/core-typings").ITeam, "_id"> | null>;
    getOneByRoomId: (teamId: string) => Promise<import("@rocket.chat/core-typings").ITeam | null>;
    getMatchingTeamRooms: (teamId: string, rids: string[]) => Promise<string[]>;
    autocomplete: (uid: string, name: string) => Promise<ITeamAutocompleteResult[]>;
    getAllPublicTeams: (options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeam> | undefined) => Promise<import("@rocket.chat/core-typings").ITeam[]>;
    getMembersByTeamIds: (teamIds: string[], options: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeamMember>) => Promise<import("@rocket.chat/core-typings").ITeamMember[]>;
    update: (uid: string, teamId: string, updateData: ITeamUpdateData) => Promise<void>;
    listTeamsBySubscriberUserId: (uid: string, options?: import("mongodb").FindOptions<import("@rocket.chat/core-typings").ITeamMember> | undefined) => Promise<import("@rocket.chat/core-typings").ITeamMember[] | null>;
    insertMemberOnTeams: (userId: string, teamIds: string[]) => Promise<void>;
    removeMemberFromTeams: (userId: string, teamIds: string[]) => Promise<void>;
    removeAllMembersFromTeam: (teamId: string) => Promise<void>;
    removeRolesFromMember: (teamId: string, userId: string, roles: string[]) => Promise<boolean>;
    getStatistics: () => Promise<import("@rocket.chat/core-typings").ITeamStats>;
    findBySubscribedUserIds: (userId: string, callerId?: string | undefined) => Promise<import("@rocket.chat/core-typings").ITeam[]>;
    addRolesToMember: (teamId: string, userId: string, roles: string[]) => Promise<boolean>;
};
export declare const MessageReads: {
    readThread: (userId: string, threadId: string) => Promise<void>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const Room: {
    addMember: (uid: string, rid: string) => Promise<boolean>;
    create: (uid: string, params: ICreateRoomParams) => Promise<import("@rocket.chat/core-typings").IRoom>;
    createDirectMessage: (data: {
        to: string;
        from: string;
    }) => Promise<{
        rid: string;
    }>;
    createDirectMessageWithMultipleUsers: (members: string[], creatorId: string) => Promise<{
        rid: string;
    }>;
    addUserToRoom: (roomId: string, user: string | Pick<import("@rocket.chat/core-typings").IUser, "_id" | "username">, inviter?: Pick<import("@rocket.chat/core-typings").IUser, "_id" | "username"> | undefined, silenced?: boolean | undefined) => Promise<boolean | undefined>;
    removeUserFromRoom: (roomId: string, user: import("@rocket.chat/core-typings").IUser, options?: {
        byUser: Pick<import("@rocket.chat/core-typings").IUser, "_id" | "username">;
    } | undefined) => Promise<void>;
    getValidRoomName: (displayName: string, roomId?: string | undefined, options?: {
        allowDuplicates?: boolean | undefined;
        nameValidationRegex?: string | undefined;
    } | undefined) => Promise<string>;
    saveRoomTopic: (roomId: string, roomTopic: string | undefined, user: {
        username: string;
        _id: string;
    }, sendMessage?: boolean | undefined) => Promise<void>;
    getRouteLink: (room: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IRoom, "name" | "t" | "_id">) => Promise<string | boolean>;
    join: (param: {
        room: import("@rocket.chat/core-typings").IRoom;
        user: Pick<import("@rocket.chat/core-typings").IUser, "_id">;
        joinCode?: string | undefined;
    }) => Promise<boolean | undefined>;
};
export declare const Media: {
    resizeFromBuffer: (input: Buffer, width: number, height: number, keepType: boolean, blur: boolean, enlarge: boolean, fit?: keyof import("sharp").FitEnum | undefined) => Promise<ResizeResult>;
    resizeFromStream: (input: import("stream").Readable, width: number, height: number, keepType: boolean, blur: boolean, enlarge: boolean, fit?: keyof import("sharp").FitEnum | undefined) => Promise<ResizeResult>;
    isImage: (buff: Buffer) => Promise<boolean>;
    stripExifFromImageStream: (stream: import("stream").Stream) => Promise<import("stream").Readable>;
    stripExifFromBuffer: (buffer: Buffer) => Promise<Buffer>;
};
export declare const Voip: {
    getServerConfigData: (serverType: import("@rocket.chat/core-typings").ServerType) => Promise<import("@rocket.chat/core-typings").IVoipCallServerConfig | import("@rocket.chat/core-typings").IVoipManagementServerConfig>;
    getConnectorVersion: () => Promise<string>;
    getQueueSummary: () => Promise<import("@rocket.chat/core-typings").IVoipConnectorResult>;
    getQueuedCallsForThisExtension: (requestParams: any) => Promise<import("@rocket.chat/core-typings").IVoipConnectorResult>;
    getQueueMembership: (requestParams: any) => Promise<import("@rocket.chat/core-typings").IVoipConnectorResult>;
    getExtensionList: () => Promise<import("@rocket.chat/core-typings").IVoipConnectorResult>;
    getExtensionDetails: (requestParams: any) => Promise<import("@rocket.chat/core-typings").IVoipConnectorResult>;
    getRegistrationInfo: (requestParams: any) => Promise<{
        result: import("@rocket.chat/core-typings").IRegistrationInfo;
    }>;
    checkManagementConnection: (host: string, port: string, userName: string, password: string) => Promise<import("@rocket.chat/core-typings").IManagementServerConnectionStatus>;
    checkCallserverConnection: (websocketUrl: string, protocol?: string | undefined) => Promise<import("@rocket.chat/core-typings").IManagementServerConnectionStatus>;
    cachedQueueDetails: () => Promise<() => Promise<{
        name: string;
        members: string[];
    }[]>>;
    init: () => Promise<void>;
    stop: () => Promise<void>;
    refresh: () => Promise<void>;
};
export declare const LivechatVoip: {
    getFreeExtensions: () => Promise<string[]>;
    getExtensionAllocationDetails: () => Promise<import("@rocket.chat/core-typings").IAgentExtensionMap[]>;
    getNewRoom: (guest: import("@rocket.chat/core-typings").ILivechatVisitor, agent: {
        agentId: string;
        username: string;
    }, rid: string, direction: "inbound" | "outbound", options: import("mongodb").FindOptions<import("@rocket.chat/core-typings").IVoipRoom>) => Promise<import("@rocket.chat/core-typings").IRoomCreationResponse>;
    findRoom: (token: string, rid: string) => Promise<import("@rocket.chat/core-typings").IVoipRoom | null>;
    closeRoom: (closer: import("@rocket.chat/core-typings").ILivechatAgent | import("@rocket.chat/core-typings").ILivechatVisitor, room: import("@rocket.chat/core-typings").IVoipRoom, user: import("@rocket.chat/core-typings").IUser, sysMessageId?: "voip-call-wrapup" | "voip-call-ended-unexpectedly" | undefined, options?: {
        comment?: string | null | undefined;
        tags?: string[] | null | undefined;
    } | undefined) => Promise<boolean>;
    handleEvent: (event: import("@rocket.chat/core-typings").VoipClientEvents, room: import("@rocket.chat/core-typings").IRoom, user: import("@rocket.chat/core-typings").IUser, comment?: string | undefined, sysMessageId?: "voip-call-wrapup" | "voip-call-ended-unexpectedly" | undefined) => Promise<void>;
    getExtensionListWithAgentData: () => Promise<import("@rocket.chat/core-typings").IVoipExtensionWithAgentInfo[]>;
    findVoipRooms: (filter: FindVoipRoomsParams) => Promise<import("@rocket.chat/rest-typings").PaginatedResult<{
        rooms: import("@rocket.chat/core-typings").IVoipRoom[];
    }>>;
    getAvailableAgents: (includeExtension?: string | undefined, text?: string | undefined, count?: number | undefined, offset?: number | undefined, sort?: Record<string, unknown> | undefined) => Promise<{
        agents: import("@rocket.chat/core-typings").ILivechatAgent[];
        total: number;
    }>;
};
export declare const Analytics: {
    saveSeatRequest: () => Promise<void>;
    getSeatRequestCount: () => Promise<number>;
    resetSeatRequestCount: () => Promise<void>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const LDAP: {
    loginRequest: (username: string, password: string) => Promise<import("@rocket.chat/core-typings").LDAPLoginResult>;
    loginAuthenticatedUserRequest: (username: string) => Promise<import("@rocket.chat/core-typings").LDAPLoginResult>;
    testConnection: () => Promise<void>;
    testSearch: (username: string) => Promise<void>;
};
export declare const SAUMonitor: {
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const DeviceManagement: {
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const VideoConf: {
    create: (data: import("@rocket.chat/core-typings").VideoConferenceCreateData, useAppUser?: boolean | undefined) => Promise<import("@rocket.chat/core-typings").VideoConferenceInstructions>;
    start: (caller: string, rid: string, options: {
        title?: string | undefined;
        allowRinging?: boolean | undefined;
    }) => Promise<import("@rocket.chat/core-typings").VideoConferenceInstructions>;
    join: (uid: string | undefined, callId: string, options: VideoConferenceJoinOptions) => Promise<string>;
    getInfo: (callId: string, uid: string | undefined) => Promise<import("@rocket.chat/ui-kit").LayoutBlock[]>;
    cancel: (uid: string, callId: string) => Promise<void>;
    get: (callId: string) => Promise<Omit<import("@rocket.chat/core-typings").VideoConference, "providerData"> | null>;
    getUnfiltered: (callId: string) => Promise<import("@rocket.chat/core-typings").VideoConference | null>;
    list: (roomId: string, pagination?: {
        offset?: number | undefined;
        count?: number | undefined;
    } | undefined) => Promise<import("@rocket.chat/rest-typings").PaginatedResult<{
        data: import("@rocket.chat/core-typings").VideoConference[];
    }>>;
    setProviderData: (callId: string, data: Record<string, any> | undefined) => Promise<void>;
    setEndedBy: (callId: string, endedBy: string) => Promise<void>;
    setEndedAt: (callId: string, endedAt: Date) => Promise<void>;
    setStatus: (callId: string, status: import("@rocket.chat/core-typings").VideoConferenceStatus) => Promise<void>;
    addUser: (callId: string, userId?: string | undefined, ts?: Date | undefined) => Promise<void>;
    listProviders: () => Promise<{
        key: string;
        label: string;
    }[]>;
    listCapabilities: () => Promise<{
        providerName: string;
        capabilities: import("@rocket.chat/core-typings").VideoConferenceCapabilities;
    }>;
    listProviderCapabilities: (providerName: string) => Promise<import("@rocket.chat/core-typings").VideoConferenceCapabilities>;
    declineLivechatCall: (callId: string) => Promise<boolean>;
    diagnoseProvider: (uid: string, rid: string, providerName?: string | undefined) => Promise<string | undefined>;
    getStatistics: () => Promise<{
        videoConference: {
            started: number;
            ended: number;
        };
        direct: {
            calling: number;
            started: number;
            ended: number;
        };
        livechat: {
            started: number;
            ended: number;
        };
        settings: {
            provider: string;
            dms: boolean;
            channels: boolean;
            groups: boolean;
            teams: boolean;
        };
    }>;
    validateAction: (event: string, caller: string, params: {
        callId: string;
        uid: string;
        rid: string;
    }) => Promise<boolean>;
};
export declare const Upload: {
    uploadFile: (params: IUploadFileParams) => Promise<import("@rocket.chat/core-typings").IUpload>;
    sendFileMessage: (params: ISendFileMessageParams) => Promise<boolean | undefined>;
    sendFileLivechatMessage: (params: ISendFileLivechatMessageParams) => Promise<boolean | undefined>;
    getFileBuffer: ({ file }: {
        userId: string;
        file: import("@rocket.chat/core-typings").IUpload;
    }) => Promise<Buffer>;
};
export declare const Calendar: {
    create: (data: Omit<import("@rocket.chat/model-typings").InsertionModel<import("@rocket.chat/core-typings").ICalendarEvent>, "notificationSent" | "reminderTime">) => Promise<string>;
    import: (data: Omit<import("@rocket.chat/model-typings").InsertionModel<import("@rocket.chat/core-typings").ICalendarEvent>, "notificationSent">) => Promise<string>;
    get: (eventId: string) => Promise<import("@rocket.chat/core-typings").ICalendarEvent | null>;
    list: (uid: string, date: Date) => Promise<import("@rocket.chat/core-typings").ICalendarEvent[]>;
    update: (eventId: string, data: Partial<import("@rocket.chat/core-typings").ICalendarEvent>) => Promise<import("mongodb").UpdateResult>;
    delete: (eventId: string) => Promise<import("mongodb").DeleteResult>;
    findImportedEvent: (externalId: string, uid: string) => Promise<import("@rocket.chat/core-typings").ICalendarEvent | null>;
    parseDescriptionForMeetingUrl: (description: string) => Promise<string | undefined>;
    setupNextNotification: () => Promise<void>;
};
export declare const QueueWorker: {
    queueWork: <T extends Record<string, unknown>>(queue: "work" | "workComplete", to: string, data: T) => Promise<void>;
    queueInfo: () => Promise<HealthAggResult[]>;
};
export declare const OmnichannelTranscript: {
    requestTranscript: ({ details }: {
        details: {
            userId: string;
            rid: string;
        };
    }) => Promise<void>;
    workOnPdf: ({ template, details }: {
        template: string;
        details: any;
    }) => Promise<void>;
};
export declare const Message: {
    sendMessage: ({ fromId, rid, msg }: {
        fromId: string;
        rid: string;
        msg: string;
    }) => Promise<import("@rocket.chat/core-typings").IMessage>;
    saveSystemMessage: <T = import("@rocket.chat/core-typings").IMessage>(type: import("@rocket.chat/core-typings").MessageTypesValues, rid: string, message: string, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">, extraData?: Partial<T> | undefined) => Promise<string>;
    beforeSave: (param: {
        message: import("@rocket.chat/core-typings").IMessage;
        room: import("@rocket.chat/core-typings").IRoom;
        user: import("@rocket.chat/core-typings").IUser;
    }) => Promise<import("@rocket.chat/core-typings").IMessage>;
    sendMessageWithValidation: (user: import("@rocket.chat/core-typings").IUser, message: Partial<import("@rocket.chat/core-typings").IMessage>, room: Partial<import("@rocket.chat/core-typings").IRoom>, upsert?: boolean | undefined) => Promise<import("@rocket.chat/core-typings").IMessage>;
    deleteMessage: (user: import("@rocket.chat/core-typings").IUser, message: import("@rocket.chat/core-typings").IMessage) => Promise<void>;
    updateMessage: (message: import("@rocket.chat/core-typings").IMessage, user: import("@rocket.chat/core-typings").IUser, originalMsg?: import("@rocket.chat/core-typings").IMessage | undefined) => Promise<void>;
    reactToMessage: (userId: string, reaction: string, messageId: string, shouldReact?: boolean | undefined) => Promise<void>;
};
export declare const Translation: {
    translateText: (text: string, targetLanguage: string) => Promise<string>;
    translate: (text: string, user: import("@rocket.chat/core-typings").IUser) => Promise<string>;
    translateToServerLanguage: (text: string) => Promise<string>;
};
export declare const Settings: {
    get: <T extends import("@rocket.chat/core-typings").SettingValue>(settingId: string) => Promise<T>;
};
export declare const OmnichannelIntegration: {
    getSmsService: (name: string) => Promise<import("@rocket.chat/core-typings").ISMSProvider>;
    registerSmsService: (name: string, service: import("@rocket.chat/core-typings").ISMSProviderConstructor) => Promise<void>;
    isConfiguredSmsService: (name: string) => Promise<boolean>;
};
export declare const Federation: {
    createDirectMessageRoomAndInviteUser: (internalInviterId: string, internalRoomId: string, externalInviteeId: string) => Promise<void>;
    verifyMatrixIds: (matrixIds: string[]) => Promise<Map<string, string>>;
};
export declare const FederationEE: {
    createDirectMessageRoom: (internalUserId: string, invitees: string[]) => Promise<void>;
    searchPublicRooms: (serverName?: string | undefined, roomName?: string | undefined, pageToken?: string | undefined, count?: number | undefined) => Promise<import("@rocket.chat/rest-typings").FederationPaginatedResult<{
        rooms: import("@rocket.chat/rest-typings").IFederationPublicRooms[];
    }>>;
    getSearchedServerNamesByInternalUserId: (internalUserId: string) => Promise<{
        name: string;
        default: boolean;
        local: boolean;
    }[]>;
    addSearchedServerNameByInternalUserId: (internalUserId: string, serverName: string) => Promise<void>;
    removeSearchedServerNameByInternalUserId: (internalUserId: string, serverName: string) => Promise<void>;
    scheduleJoinExternalPublicRoom: (internalUserId: string, externalRoomId: string, roomName?: string | undefined, pageToken?: string | undefined) => Promise<void>;
    joinExternalPublicRoom: (input: import("./types/IFederationService").IFederationJoinExternalPublicRoomInput) => Promise<void>;
    verifyMatrixIds: (matrixIds: string[]) => Promise<Map<string, string>>;
};
export declare const Omnichannel: {
    getQueueWorker: () => Promise<import("@rocket.chat/core-typings").IOmnichannelQueue>;
    isWithinMACLimit: (_room: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IOmnichannelRoom, "v">) => Promise<boolean>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const OmnichannelEEService: {
    placeRoomOnHold: (room: Pick<import("@rocket.chat/core-typings").IOmnichannelRoom, "u" | "t" | "_id" | "open" | "onHold" | "lastMessage">, comment: string, onHoldBy: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => Promise<void>;
    resumeRoomOnHold: (room: Pick<import("@rocket.chat/core-typings").IOmnichannelRoom, "u" | "t" | "_id" | "open" | "onHold" | "lastMessage" | "servedBy">, comment: string, resumeBy: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">, clientAction?: boolean | undefined) => Promise<void>;
    getName: () => Promise<string | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[]>;
    removeAllListeners: () => Promise<void>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void>;
    isInternal: () => Promise<boolean>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
export declare const Import: {
    clear: () => Promise<void>;
    newOperation: (userId: string, name: string, key: string) => Promise<import("@rocket.chat/core-typings").IImport>;
    status: () => Promise<import("@rocket.chat/core-typings").ImportStatus>;
    addUsers: (users: Omit<import("@rocket.chat/core-typings").IImportUser, "_id" | "services" | "customFields">[]) => Promise<void>;
    run: (userId: string) => Promise<void>;
};
export declare const EnterpriseSettings: {
    changeSettingValue: (record: import("@rocket.chat/core-typings").ISetting) => Promise<Error | import("@rocket.chat/core-typings").SettingValue>;
    getName: () => Promise<string | Error | undefined>;
    getEvents: () => Promise<{
        eventName: keyof import("./Events").EventSignatures;
        listeners: ((...args: any[]) => void)[];
    }[] | Error>;
    removeAllListeners: () => Promise<void | Error>;
    setApi: (api: import("./types/IApiService").IApiService) => Promise<void | Error>;
    onEvent: (event: keyof import("./Events").EventSignatures, handler: ((params: {
        rid: string;
        callId: string;
    }) => void) | ((params: Record<string, string[]>) => void) | ((info: {
        localService: boolean;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }) => void) | ((permissions: string[]) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((connection: import("@rocket.chat/core-typings").ISocketConnection) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((bannerId: string) => void) | ((userId: string, banner: import("@rocket.chat/core-typings").IBanner) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((emoji: import("@rocket.chat/core-typings").IEmoji) => void) | ((data: {
        module: string;
        valid: boolean;
    }) => void) | (() => void) | ((actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>) => void) | ((data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }) => void) | ((data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: AutoUpdateRecord) => void) | ((uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop) => void) | ((uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction) => void) | ((uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }) => void) | ((uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">) => void) | ((uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }) => void) | ((rid: string, data: string | undefined) => void) | ((rid: string, data: {
        _id: string;
    }) => void) | ((rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }) => void) | ((uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }) => void) | ((data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }) => void) | ((room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">) => void) | ((data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }) => void) | (([streamer, eventName, payload]: [string, string, any[]]) => void) | ((data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "_id">) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">) => void) | ((user: Partial<import("@rocket.chat/core-typings").IUser>) => void) | ((update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }) => void) | ((userStatus: import("@rocket.chat/core-typings").IUserStatus) => void) | ((data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }) => void) | ((data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }) => void) | ((data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }) => void) | ((data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }) => void) | ((data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }) => void) | ((data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }) => void) | ((roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }) => void) | ((userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature) => void) | ((userId: string, data: {
        roomId: string;
    }) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }) => void) | ((enabled: boolean) => void) | ((update: Record<string, any>) => void) | ((data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string) => void) | ((appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus) => void) | ((appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | ((command: string) => void) | (() => void)) => Promise<void | Error>;
    emit: (...params: [event: keyof import("./Events").EventSignatures, params: {
        rid: string;
        callId: string;
    }] | [event: keyof import("./Events").EventSignatures, params: Record<string, string[]>] | [event: keyof import("./Events").EventSignatures, info: {
        localService: boolean;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, info: {
        userId: string;
        connection: import("@rocket.chat/core-typings").ISocketConnection;
    }] | [event: keyof import("./Events").EventSignatures, permissions: string[]] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, connection: import("@rocket.chat/core-typings").ISocketConnection] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, bannerId: string] | [event: keyof import("./Events").EventSignatures, userId: string, banner: import("@rocket.chat/core-typings").IBanner] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, emoji: import("@rocket.chat/core-typings").IEmoji] | [event: keyof import("./Events").EventSignatures, data: {
        module: string;
        valid: boolean;
    }] | [event: keyof import("./Events").EventSignatures] | [event: keyof import("./Events").EventSignatures, actions: Record<Partial<"activeUsers" | "guestUsers" | "roomsPerGuest" | "privateApps" | "marketplaceApps" | "monthlyActiveContacts">, boolean>] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        inquiry: import("@rocket.chat/core-typings").IInquiry;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: AutoUpdateRecord] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").INotificationDesktop] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings/dist/uikit").ServerInteraction] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        invite: Omit<import("@rocket.chat/core-typings").IInvite, "_updatedAt">;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, rid: string, message: import("@rocket.chat/core-typings").AtLeast<import("@rocket.chat/core-typings").IMessage, "msg">] | [event: keyof import("./Events").EventSignatures, uid: string, data: {
        type: "changed";
        account: Partial<import("@rocket.chat/core-typings").IWebdavAccount>;
    } | {
        type: "removed";
        account: {
            _id: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: string | undefined] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        _id: string;
    }] | [event: keyof import("./Events").EventSignatures, rid: string, data: {
        rid: string;
        excludePinned: boolean;
        ignoreDiscussion: boolean;
        ts: Record<string, Date>;
        users: string[];
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        soundData: import("@rocket.chat/core-typings").ICustomSound;
    }] | [event: keyof import("./Events").EventSignatures, uid: string, data: import("@rocket.chat/core-typings").ICalendarNotification] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: any;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        room: Partial<import("@rocket.chat/core-typings").IRoom>;
    }] | [event: keyof import("./Events").EventSignatures, room: Pick<import("@rocket.chat/core-typings").IRoom, "_id" | "avatarETag">] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        setting: Partial<import("@rocket.chat/core-typings").ISetting>;
    }] | [event: keyof import("./Events").EventSignatures, [string, string, any[]]] | [event: keyof import("./Events").EventSignatures, data: {
        action: string;
        subscription: Partial<import("@rocket.chat/core-typings").ISubscription>;
    }] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "_id">] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username">] | [event: keyof import("./Events").EventSignatures, user: Partial<import("@rocket.chat/core-typings").IUser>] | [event: keyof import("./Events").EventSignatures, update: {
        type: "changed" | "removed" | "added";
        _id: string;
        u?: {
            _id: string;
            username: string | undefined;
            name?: string | undefined;
        } | undefined;
        scope?: string | undefined;
    }] | [event: keyof import("./Events").EventSignatures, userStatus: import("@rocket.chat/core-typings").IUserStatus] | [event: keyof import("./Events").EventSignatures, data: {
        user: Partial<import("@rocket.chat/core-typings").IUser>;
        isTyping: boolean;
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        userId: string;
        action: string;
        params: {
            callId: string;
            uid: string;
            rid: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        user: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "roles" | "username" | "status" | "statusText">;
        previousStatus: import("@rocket.chat/core-typings").UserStatus | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        message: import("@rocket.chat/core-typings").IMessage;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "inserted" | "updated";
        role: import("@rocket.chat/core-typings").IRole;
    } | {
        clientAction: "removed";
        role: {
            _id: string;
            name: string;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        room: import("@rocket.chat/core-typings").IRoom | Pick<import("@rocket.chat/core-typings").IRoom, "_id">;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "inserted" | "updated";
        subscription: Pick<import("@rocket.chat/core-typings").ISubscription, "name" | "rid" | "ts" | "u" | "unread" | "t" | "_updatedAt" | "roles" | "ls" | "lr" | "fname" | "code" | "f" | "open" | "alert" | "prid" | "userMentions" | "groupMentions" | "archived" | "audioNotificationValue" | "desktopNotifications" | "mobilePushNotifications" | "emailNotifications" | "desktopPrefOrigin" | "mobilePrefOrigin" | "emailPrefOrigin" | "unreadAlert" | "blocked" | "blocker" | "autoTranslate" | "autoTranslateLanguage" | "disableNotifications" | "hideUnreadStatus" | "hideMentionStatus" | "muteGroupMentions" | "ignored" | "E2EKey" | "E2ESuggestedKey" | "tunread" | "tunreadGroup" | "tunreadUser" | "department" | "v" | "onHold">;
    } | {
        clientAction: "removed";
        subscription: {
            _id: string;
            u?: Pick<import("@rocket.chat/core-typings").IUser, "name" | "_id" | "username"> | undefined;
            rid?: string | undefined;
        };
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        inquiry: import("@rocket.chat/core-typings").ILivechatInquiryRecord;
        diff?: Record<string, any> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        setting: import("@rocket.chat/core-typings").ISetting;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        id: string;
    } & ({
        clientAction: "inserted";
        data: import("@rocket.chat/core-typings").IUser;
    } | {
        clientAction: "removed";
    } | {
        clientAction: "updated";
        diff: Record<string, number>;
        unset: Record<string, number>;
    })] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILoginServiceConfiguration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data?: Partial<import("@rocket.chat/core-typings").IInstanceStatus> | undefined;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegrationHistory>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IIntegration>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IEmailInbox>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatDepartmentAgents>;
        diff?: Record<string, any> | undefined;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, roomId: string, data: {
        type: "agentStatus";
        status: string;
    } | {
        type: "queueData";
        data: {
            [k: string]: unknown;
        } | undefined;
    } | {
        type: "agentData";
        data: import("@rocket.chat/core-typings").ILivechatAgent | {
            hiddenInfo: boolean;
        } | undefined;
    } | {
        type: "visitorData";
        visitor: import("@rocket.chat/core-typings").ILivechatVisitor;
    }] | [event: keyof import("./Events").EventSignatures, userId: string, data: import("@rocket.chat/core-typings").VoipEventDataSignature] | [event: keyof import("./Events").EventSignatures, userId: string, data: {
        roomId: string;
    }] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").IPbxEvent>;
        id: string;
    }] | [event: keyof import("./Events").EventSignatures, enabled: boolean] | [event: keyof import("./Events").EventSignatures, update: Record<string, any>] | [event: keyof import("./Events").EventSignatures, data: {
        clientAction: "changed" | "removed" | "inserted" | "updated";
        data: Partial<import("@rocket.chat/core-typings").ILivechatPriority>;
        id: string;
        diff?: Record<string, string> | undefined;
    }] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string] | [event: keyof import("./Events").EventSignatures, appId: string, status: import("@rocket.chat/apps-engine/definition/AppStatus").AppStatus] | [event: keyof import("./Events").EventSignatures, appId: string, setting: import("@rocket.chat/apps-engine/definition/settings").ISetting] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string] | [event: keyof import("./Events").EventSignatures, command: string]) => Promise<void | Error>;
    isInternal: () => Promise<boolean | Error>;
    created: () => Promise<void>;
    started: () => Promise<void>;
    stopped: () => Promise<void>;
};
