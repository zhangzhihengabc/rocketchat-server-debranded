import type { EventSignatures } from './Events';
import type { IBroker, IBrokerNode } from './types/IBroker';
import type { ServiceClass, IServiceClass } from './types/ServiceClass';
export declare class LocalBroker implements IBroker {
    private methods;
    private events;
    private services;
    call(method: string, data: any): Promise<any>;
    waitAndCall(method: string, data: any): Promise<any>;
    destroyService(instance: ServiceClass): void;
    createService(instance: IServiceClass): void;
    onBroadcast(callback: (eventName: string, args: unknown[]) => void): void;
    broadcast<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    broadcastLocal<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    broadcastToServices<T extends keyof EventSignatures>(_services: string[], event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    nodeList(): Promise<IBrokerNode[]>;
    start(): Promise<void>;
}
