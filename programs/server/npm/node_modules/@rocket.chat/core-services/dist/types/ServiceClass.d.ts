/// <reference types="node" />
import { EventEmitter } from 'events';
import type { EventSignatures } from '../Events';
import type { IApiService } from './IApiService';
import type { IBroker, IBrokerNode } from './IBroker';
export interface IServiceContext {
    id: string;
    broker: IBroker;
    nodeID: string | null;
    requestID: string | null;
    ctx?: any;
}
export interface IServiceClass {
    getName(): string | undefined;
    onNodeConnected?({ node, reconnected }: {
        node: IBrokerNode;
        reconnected: boolean;
    }): void;
    onNodeUpdated?({ node }: {
        node: IBrokerNode;
    }): void;
    onNodeDisconnected?({ node, unexpected }: {
        node: IBrokerNode;
        unexpected: boolean;
    }): Promise<void>;
    getEvents(): {
        eventName: keyof EventSignatures;
        listeners: {
            (...args: any[]): void;
        }[];
    }[];
    removeAllListeners(): void;
    setApi(api: IApiService): void;
    onEvent<T extends keyof EventSignatures>(event: T, handler: EventSignatures[T]): void;
    emit<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): void;
    isInternal(): boolean;
    created(): Promise<void>;
    started(): Promise<void>;
    stopped(): Promise<void>;
}
export declare abstract class ServiceClass implements IServiceClass {
    protected name?: string;
    protected events: EventEmitter;
    protected internal: boolean;
    protected api?: IApiService;
    constructor();
    setApi(api: IApiService): void;
    getEvents(): {
        eventName: keyof EventSignatures;
        listeners: {
            (...args: any[]): void;
        }[];
    }[];
    removeAllListeners(): void;
    getName(): string | undefined;
    isInternal(): boolean;
    get context(): IServiceContext | undefined;
    onEvent<T extends keyof EventSignatures>(event: T, handler: EventSignatures[T]): void;
    emit<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): void;
    created(): Promise<void>;
    started(): Promise<void>;
    stopped(): Promise<void>;
}
/**
 * An internal service is a service that is registered only on monolith node.
 * Services that run on their own node should use @ServiceClass instead.
 */
export declare abstract class ServiceClassInternal extends ServiceClass {
    protected internal: boolean;
}
