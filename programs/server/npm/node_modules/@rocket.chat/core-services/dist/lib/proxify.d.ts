type Prom<T> = {
    [K in keyof T as T[K] extends (...params: any) => any ? K : never]: T[K] extends (...params: any) => Promise<any> ? T[K] : T[K] extends (...params: infer P) => infer R ? (...params: P) => Promise<R> : never;
};
type PromOrError<T> = {
    [K in keyof T as T[K] extends (...params: any) => any ? K : never]: T[K] extends (...params: any) => Promise<any> ? T[K] : T[K] extends (...params: infer P) => infer R ? (...params: P) => Promise<R | Error> : never;
};
export declare function proxifyWithWait<T>(namespace: string): Prom<T>;
export declare function proxify<T>(namespace: string): PromOrError<T>;
export {};
