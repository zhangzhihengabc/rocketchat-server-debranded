import type { EventSignatures } from '../Events';
import type { IApiService } from '../types/IApiService';
import type { IBroker, IBrokerNode } from '../types/IBroker';
import type { IServiceClass } from '../types/ServiceClass';
export declare class Api implements IApiService {
    private services;
    private broker?;
    setBroker(broker: IBroker): void;
    destroyService(instance: IServiceClass): void;
    registerService(instance: IServiceClass, serviceDependencies?: string[]): void;
    call(method: string, data?: unknown): Promise<any>;
    waitAndCall(method: string, data: any): Promise<any>;
    broadcast<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    broadcastToServices<T extends keyof EventSignatures>(services: string[], event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    broadcastLocal<T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>): Promise<void>;
    nodeList(): Promise<IBrokerNode[]>;
    start(): Promise<void>;
}
