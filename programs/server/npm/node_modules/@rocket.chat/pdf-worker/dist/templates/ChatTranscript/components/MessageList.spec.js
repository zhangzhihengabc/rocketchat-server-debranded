"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const ChatTranscript_fixtures_1 = require("../ChatTranscript.fixtures");
const MessageList_1 = require("./MessageList");
jest.mock('@react-pdf/renderer', () => ({
    Image: () => (0, jsx_runtime_1.jsx)("div", { children: "Image" }),
    StyleSheet: { create: () => ({ style: '' }) },
    Text: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
    View: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
    Files: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
}));
describe('components/MessageList', () => {
    it('should render correctly', () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MessageList_1.MessageList, { messages: [ChatTranscript_fixtures_1.validMessage], invalidFileMessage: '' }));
        expect(getByText(ChatTranscript_fixtures_1.validMessage.msg)).toBeInTheDocument();
    });
    it('should render divider', () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MessageList_1.MessageList, { messages: [{ ...ChatTranscript_fixtures_1.validMessage, divider: 'divider' }], invalidFileMessage: '' }));
        expect(getByText(ChatTranscript_fixtures_1.validMessage.msg)).toBeInTheDocument();
        expect(getByText('divider')).toBeInTheDocument();
    });
    it('should render file', () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MessageList_1.MessageList, { messages: [{ ...ChatTranscript_fixtures_1.validMessage, files: [ChatTranscript_fixtures_1.validFile] }], invalidFileMessage: '' }));
        expect(getByText(ChatTranscript_fixtures_1.validMessage.msg)).toBeInTheDocument();
        expect(getByText(ChatTranscript_fixtures_1.validFile.name)).toBeInTheDocument();
    });
    it('should render invalid file message', () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MessageList_1.MessageList, { messages: [{ ...ChatTranscript_fixtures_1.validMessage, files: [ChatTranscript_fixtures_1.invalidFile] }], invalidFileMessage: 'invalid message' }));
        expect(getByText(ChatTranscript_fixtures_1.validMessage.msg)).toBeInTheDocument();
        expect(getByText('invalid message')).toBeInTheDocument();
    });
});
//# sourceMappingURL=MessageList.spec.js.map