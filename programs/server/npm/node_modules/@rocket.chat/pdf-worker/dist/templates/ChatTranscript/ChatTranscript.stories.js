"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatTranscriptPDFTemplate = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const renderer_1 = require("@react-pdf/renderer");
const _1 = require(".");
const ChatTranscript_1 = require("../../strategies/ChatTranscript");
const ChatTranscript_fixtures_1 = require("./ChatTranscript.fixtures");
renderer_1.Font.register({
    family: 'Inter',
    fonts: [
        { src: '/inter400.ttf' },
        { src: '/inter400-italic.ttf', fontStyle: 'italic' },
        { src: '/inter500.ttf', fontWeight: 500 },
        { src: '/inter500-italic.ttf', fontWeight: 500, fontStyle: 'italic' },
        { src: '/inter700.ttf', fontWeight: 700 },
        { src: '/inter700-italic.ttf', fontWeight: 700, fontStyle: 'italic' },
    ],
});
renderer_1.Font.register({
    family: 'FiraCode',
    fonts: [{ src: '/fira-code700.ttf', fontWeight: 700 }],
});
renderer_1.Font.registerHyphenationCallback((word) => [word]);
exports.default = {
    title: 'ChatTranscriptPDFTemplate',
    component: _1.ChatTranscriptPDF,
};
const data = new ChatTranscript_1.ChatTranscript().parseTemplateData(ChatTranscript_fixtures_1.exampleData);
const ChatTranscriptPDFTemplate = () => ((0, jsx_runtime_1.jsx)(renderer_1.PDFViewer, { width: '100%', height: '800', children: (0, jsx_runtime_1.jsx)(_1.ChatTranscriptPDF, { ...data }) }));
exports.ChatTranscriptPDFTemplate = ChatTranscriptPDFTemplate;
//# sourceMappingURL=ChatTranscript.stories.js.map