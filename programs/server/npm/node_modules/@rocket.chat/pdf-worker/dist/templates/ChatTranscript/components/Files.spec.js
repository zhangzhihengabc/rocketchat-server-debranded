"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const ChatTranscript_fixtures_1 = require("../ChatTranscript.fixtures");
const Files_1 = require("./Files");
jest.mock('@react-pdf/renderer', () => ({
    StyleSheet: { create: () => ({ style: '' }) },
    Image: () => (0, jsx_runtime_1.jsx)("img", { src: '' }),
    Text: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
    View: ({ children }) => (0, jsx_runtime_1.jsx)("div", { children: children }),
}));
describe('components/Files', () => {
    it('should renders file name and invalid message when buffer is null', () => {
        const { getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Files_1.Files, { files: [ChatTranscript_fixtures_1.invalidFile], invalidMessage: 'invalid' }));
        const invalidText = getByText('invalid');
        const fileName = getByText(ChatTranscript_fixtures_1.invalidFile.name);
        expect(invalidText).toBeInTheDocument();
        expect(fileName).toBeInTheDocument();
    });
    it('should renders file name and image when buffer is not null', () => {
        const { getByRole, getByText } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Files_1.Files, { files: [ChatTranscript_fixtures_1.validFile], invalidMessage: '' }));
        const image = getByRole('img');
        const fileName = getByText(ChatTranscript_fixtures_1.validFile.name);
        expect(image).toBeInTheDocument();
        expect(fileName).toBeInTheDocument();
    });
});
//# sourceMappingURL=Files.spec.js.map