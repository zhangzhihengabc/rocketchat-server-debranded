import moment from 'moment-timezone';
import type { Agenda, RepeatOptions } from './Agenda';
import type { IJob, IJobAttributes } from './definition/IJob';
export type JobArgs = {
    agenda: Agenda;
} & IJob;
export declare class Job {
    agenda: Agenda;
    attrs: IJobAttributes;
    constructor({ agenda, priority, ...args }: JobArgs);
    toJSON(): Partial<IJob>;
    computeNextRunAt(): Job;
    dateForTimezone(date: Date, timezone?: string | null): moment.Moment;
    private _computeFromInterval;
    private _computeFromRepeatAt;
    repeatEvery(interval: string | number, options?: RepeatOptions): Job;
    repeatAt(time: string): Job;
    disable(): Job;
    enable(): Job;
    unique(unique: IJobAttributes['unique'], opts?: IJobAttributes['uniqueOpts']): Job;
    schedule(time: string | Date): Job;
    priority(priority: string): Job;
    fail(reason: Error | string): Job;
    run(): Promise<Job>;
    isRunning(): boolean;
    save(...args: Array<any>): Promise<void>;
    remove(): Promise<number>;
    touch(...args: Array<any>): Promise<void>;
}
