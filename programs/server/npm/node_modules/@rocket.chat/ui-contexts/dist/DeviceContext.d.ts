/// <reference types="react" />
export type Device = {
    id: string;
    label: string;
    type: string;
};
export interface IExperimentalHTMLAudioElement extends HTMLAudioElement {
    setSinkId: (sinkId: string) => void;
}
type EnabledDeviceContextValue = {
    enabled: true;
    availableAudioOutputDevices: Device[];
    availableAudioInputDevices: Device[];
    selectedAudioOutputDevice?: Device;
    selectedAudioInputDevice?: Device;
    setAudioOutputDevice: (data: {
        outputDevice: Device;
        HTMLAudioElement: IExperimentalHTMLAudioElement;
    }) => void;
    setAudioInputDevice: (device: Device) => void;
};
type DisabledDeviceContextValue = {
    enabled: false;
};
export type DeviceContextValue = EnabledDeviceContextValue | DisabledDeviceContextValue;
export declare const isDeviceContextEnabled: (context: DeviceContextValue) => context is EnabledDeviceContextValue;
export declare const DeviceContext: import("react").Context<DeviceContextValue>;
export {};
//# sourceMappingURL=DeviceContext.d.ts.map