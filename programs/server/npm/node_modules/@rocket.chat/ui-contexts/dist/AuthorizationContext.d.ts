/// <reference types="react" />
import type { IRole, IRoom } from '@rocket.chat/core-typings';
import type { IEmitter } from '@rocket.chat/emitter';
import type { ObjectId } from 'mongodb';
export type IRoles = {
    [_id: string]: IRole;
};
export type RoleStore = IEmitter<{
    change: IRoles;
}> & {
    roles: IRoles;
};
export type AuthorizationContextValue = {
    queryPermission(permission: string | ObjectId, scope?: string | ObjectId, scopedRoles?: IRole['_id'][]): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => boolean];
    queryAtLeastOnePermission(permission: (string | ObjectId)[], scope?: string | ObjectId, scopedRoles?: IRole['_id'][]): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => boolean];
    queryAllPermissions(permission: (string | ObjectId)[], scope?: string | ObjectId, scopedRoles?: IRole['_id'][]): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => boolean];
    queryRole(role: string | ObjectId, scope?: IRoom['_id'], ignoreSubscriptions?: boolean): [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => boolean];
    roleStore: RoleStore;
};
export declare const AuthorizationContext: import("react").Context<AuthorizationContextValue>;
//# sourceMappingURL=AuthorizationContext.d.ts.map