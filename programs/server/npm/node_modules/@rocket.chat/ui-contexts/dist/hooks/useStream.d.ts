import type { StreamNames, StreamerEvents, StreamKeys, StreamerCallbackArgs } from '@rocket.chat/ddp-client/src/types/streams';
export type ServerStreamFunction<N extends StreamNames, K extends StreamKeys<N>> = (args: K, callback: (...args: StreamerCallbackArgs<N, K>) => void) => () => void;
type StreamsConfigs<N extends StreamNames> = StreamerEvents[N][number];
type StreamerCallback<S extends StreamNames, N extends StreamsConfigs<S> = StreamsConfigs<S>> = <E extends N['key']>(eventName: E, cb: (...event: StreamerCallbackArgs<S, E>) => void) => () => void;
export declare function useStream<N extends StreamNames>(streamName: N, options?: {
    retransmit?: boolean;
    retransmitToSelf?: boolean;
}): StreamerCallback<N>;
export declare function useSingleStream<N extends StreamNames>(streamName: N, options?: {
    retransmit?: boolean;
    retransmitToSelf?: boolean;
}): StreamerCallback<N>;
export {};
//# sourceMappingURL=useStream.d.ts.map