/// <reference types="react" />
import type { IServerInfo, Serialized } from '@rocket.chat/core-typings';
import type { ServerMethodName, ServerMethodParameters, ServerMethodReturn } from '@rocket.chat/ddp-client/src/types/methods';
import type { StreamKeys, StreamNames, StreamerCallbackArgs } from '@rocket.chat/ddp-client/src/types/streams';
import type { Method, OperationParams, OperationResult, PathFor, PathPattern, UrlParams } from '@rocket.chat/rest-typings';
export type UploadResult = {
    success: boolean;
    status: string;
    [key: string]: unknown;
};
export type ServerContextValue = {
    info?: IServerInfo;
    absoluteUrl: (path: string) => string;
    callMethod?: <MethodName extends ServerMethodName>(methodName: MethodName, ...args: ServerMethodParameters<MethodName>) => Promise<ServerMethodReturn<MethodName>>;
    callEndpoint: <TMethod extends Method, TPathPattern extends PathPattern>(args: {
        method: TMethod;
        pathPattern: TPathPattern;
        keys: UrlParams<TPathPattern>;
        params: OperationParams<TMethod, TPathPattern>;
    }) => Promise<Serialized<OperationResult<TMethod, TPathPattern>>>;
    uploadToEndpoint: (endpoint: PathFor<'POST'>, formData: any) => Promise<UploadResult> | {
        promise: Promise<UploadResult>;
    };
    getStream: <N extends StreamNames, K extends StreamKeys<N>>(streamName: N, _options?: {
        retransmit?: boolean | undefined;
        retransmitToSelf?: boolean | undefined;
    }) => (eventName: K, callback: (...args: StreamerCallbackArgs<N, K>) => void) => () => void;
    getSingleStream: <N extends StreamNames, K extends StreamKeys<N>>(streamName: N, _options?: {
        retransmit?: boolean | undefined;
        retransmitToSelf?: boolean | undefined;
    }) => (eventName: K, callback: (...args: StreamerCallbackArgs<N, K>) => void) => () => void;
};
export declare const ServerContext: import("react").Context<ServerContextValue>;
//# sourceMappingURL=ServerContext.d.ts.map