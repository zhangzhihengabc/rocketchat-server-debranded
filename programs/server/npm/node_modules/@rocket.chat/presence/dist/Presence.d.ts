import type { IPresence, IBrokerNode } from '@rocket.chat/core-services';
import { ServiceClass } from '@rocket.chat/core-services';
import { UserStatus } from '@rocket.chat/core-typings';
export declare class Presence extends ServiceClass implements IPresence {
    protected name: string;
    private broadcastEnabled;
    private hasLicense;
    private lostConTimeout?;
    private connsPerInstance;
    private peakConnections;
    constructor();
    onNodeDisconnected({ node }: {
        node: IBrokerNode;
    }): Promise<void>;
    started(): Promise<void>;
    stopped(): Promise<void>;
    toggleBroadcast(enabled: boolean): Promise<void>;
    getConnectionCount(): {
        current: number;
        max: number;
    };
    newConnection(uid: string | undefined, session: string | undefined, nodeId: string): Promise<{
        uid: string;
        connectionId: string;
    } | undefined>;
    removeConnection(uid: string | undefined, session: string | undefined): Promise<{
        uid: string;
        session: string;
    } | undefined>;
    removeLostConnections(nodeID?: string): Promise<string[]>;
    setStatus(uid: string, statusDefault: UserStatus, statusText?: string): Promise<boolean>;
    setConnectionStatus(uid: string, status: UserStatus, session: string): Promise<boolean>;
    updateUserPresence(uid: string): Promise<void>;
    private broadcast;
    private validateAvailability;
    private getTotalConnections;
    getPeakConnections(reset?: boolean): number;
    resetPeakConnections(): void;
}
