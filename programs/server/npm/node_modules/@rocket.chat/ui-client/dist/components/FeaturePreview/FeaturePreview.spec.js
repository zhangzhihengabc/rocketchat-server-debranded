var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { mockAppRoot } from '@rocket.chat/mock-providers';
import { render, screen } from '@testing-library/react';
import { FeaturePreview, FeaturePreviewOff, FeaturePreviewOn } from './FeaturePreview';
import '@testing-library/jest-dom';
test('should renders off if the feature is disabled', () => __awaiter(void 0, void 0, void 0, function* () {
    render(_jsxs(FeaturePreview, { feature: 'quickReactions', children: [_jsx(FeaturePreviewOn, { children: "on" }), _jsx(FeaturePreviewOff, { children: "off" })] }), {
        wrapper: mockAppRoot().withSetting('Accounts_AllowFeaturePreview', true).build(),
    });
    expect(screen.getByText('off')).toBeInTheDocument();
}));
test('should renders on if the feature is enabled', () => __awaiter(void 0, void 0, void 0, function* () {
    render(_jsxs(FeaturePreview, { feature: 'quickReactions', children: [_jsx(FeaturePreviewOn, { children: "on" }), _jsx(FeaturePreviewOff, { children: "off" })] }), {
        wrapper: mockAppRoot()
            .withSetting('Accounts_AllowFeaturePreview', true)
            .withUserPreference('featuresPreview', [{ name: 'quickReactions', value: true }])
            .build(),
    });
    expect(screen.getByText('on')).toBeInTheDocument();
}));
//# sourceMappingURL=FeaturePreview.spec.js.map