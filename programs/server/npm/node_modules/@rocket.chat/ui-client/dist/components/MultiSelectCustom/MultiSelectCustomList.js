import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, CheckBox, Icon, Option, SearchInput, Tile } from '@rocket.chat/fuselage';
import { useTranslation } from '@rocket.chat/ui-contexts';
import { Fragment, useCallback, useState } from 'react';
import { useFilteredOptions } from './useFilteredOptions';
const MultiSelectCustomList = ({ options, onSelected, searchBarText, }) => {
    const t = useTranslation();
    const [text, setText] = useState('');
    const handleChange = useCallback((event) => setText(event.currentTarget.value), []);
    const filteredOptions = useFilteredOptions(text, options);
    return (_jsxs(Tile, { overflow: 'auto', pb: 'x12', pi: 0, elevation: '2', w: 'full', bg: 'light', borderRadius: 'x2', children: [searchBarText && (_jsx(Option, { children: _jsx(SearchInput, { name: 'select-search', placeholder: t(searchBarText), autoComplete: 'off', addon: _jsx(Icon, { name: 'magnifier', size: 'x20' }), onChange: handleChange, value: text }) })), filteredOptions.map((option) => (_jsx(Fragment, { children: option.isGroupTitle ? (_jsx(Box, { mi: 'x12', mb: 'x4', fontScale: 'p2b', color: 'default', children: t(option.text) })) : (_jsx(Option, { children: _jsxs(Box, { pis: 'x4', pb: 'x4', w: 'full', display: 'flex', justifyContent: 'space-between', is: 'label', children: [t(option.text), _jsx(CheckBox, { checked: option.checked, pi: 0, name: option.text, id: option.id, onChange: () => onSelected(option) })] }) }, option.id)) }, option.id)))] }));
};
export default MultiSelectCustomList;
//# sourceMappingURL=MultiSelectCustomList.js.map