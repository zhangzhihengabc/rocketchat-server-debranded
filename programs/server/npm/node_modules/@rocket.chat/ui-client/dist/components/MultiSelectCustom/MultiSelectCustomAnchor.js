var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { css } from '@rocket.chat/css-in-js';
import { Box, Icon, Palette } from '@rocket.chat/fuselage';
import { useTranslation } from '@rocket.chat/ui-contexts';
import { forwardRef } from 'react';
const MultiSelectCustomAnchor = forwardRef(function MultiSelectCustomAnchor(_a, ref) {
    var { onClick, collapsed, selectedOptionsCount, selectedOptionsTitle, defaultTitle, maxCount } = _a, props = __rest(_a, ["onClick", "collapsed", "selectedOptionsCount", "selectedOptionsTitle", "defaultTitle", "maxCount"]);
    const t = useTranslation();
    const inputStyle = collapsed
        ? css `
				&,
				&:hover,
				&:active,
				&:focus {
					cursor: pointer;
					border-color: ${Palette.stroke['stroke-highlight'].toString()}!important;
					box-shadow: 0 0 0 2px ${Palette.shadow['shadow-highlight'].toString()};
				}
		  `
        : css `
				& {
					cursor: pointer;
				}
		  `;
    const isDirty = selectedOptionsCount > 0 && selectedOptionsCount !== maxCount - 1;
    return (_jsxs(Box, Object.assign({ ref: ref, onClick: onClick, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexDirection: 'row', borderColor: Palette.stroke['stroke-light'].toString(), borderWidth: 'x1', borderRadius: 4, bg: Palette.surface['surface-light'].toString(), h: 'x40', w: 'full', pb: 10, pi: 16, color: isDirty ? Palette.text['font-default'].toString() : Palette.text['font-annotation'].toString(), className: inputStyle }, props, { children: [isDirty ? `${t(selectedOptionsTitle)} (${selectedOptionsCount})` : t(defaultTitle), _jsx(Icon, { name: 'chevron-down', fontSize: 'x20', color: 'hint' })] })));
});
export default MultiSelectCustomAnchor;
//# sourceMappingURL=MultiSelectCustomAnchor.js.map