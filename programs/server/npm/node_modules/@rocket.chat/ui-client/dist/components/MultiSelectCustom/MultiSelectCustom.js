import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box } from '@rocket.chat/fuselage';
import { useOutsideClick, useToggle } from '@rocket.chat/fuselage-hooks';
import { useCallback, useRef } from 'react';
import MultiSelectCustomAnchor from './MultiSelectCustomAnchor';
import MultiSelectCustomList from './MultiSelectCustomList';
import MultiSelectCustomListWrapper from './MultiSelectCustomListWrapper';
const isValidReference = (reference, e) => {
    var _a;
    const isValidTarget = Boolean(e.target);
    const isValidReference = e.target !== reference.current && !((_a = reference.current) === null || _a === void 0 ? void 0 : _a.contains(e.target));
    return isValidTarget && isValidReference;
};
const onMouseEventPreventSideEffects = (e) => {
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();
};
export const MultiSelectCustom = ({ dropdownOptions, defaultTitle, selectedOptionsTitle, selectedOptions, setSelectedOptions, searchBarText, }) => {
    const reference = useRef(null);
    const target = useRef(null);
    const [collapsed, toggleCollapsed] = useToggle(false);
    const onClose = useCallback((e) => {
        if (isValidReference(reference, e)) {
            toggleCollapsed(false);
            return;
        }
        onMouseEventPreventSideEffects(e);
    }, [toggleCollapsed]);
    useOutsideClick([target], onClose);
    const onSelect = (item, e) => {
        e === null || e === void 0 ? void 0 : e.stopPropagation();
        item.checked = !item.checked;
        if (item.checked === true) {
            setSelectedOptions([...new Set([...selectedOptions, item])]);
            return;
        }
        // the user has disabled this option -> remove this from the selected options list
        setSelectedOptions(selectedOptions.filter((option) => option.id !== item.id));
    };
    const count = dropdownOptions.filter((option) => option.checked).length;
    return (_jsxs(Box, { display: 'flex', flexGrow: 1, position: 'relative', children: [_jsx(MultiSelectCustomAnchor, { ref: reference, onClick: toggleCollapsed, collapsed: collapsed, defaultTitle: defaultTitle, selectedOptionsTitle: selectedOptionsTitle, selectedOptionsCount: count, maxCount: dropdownOptions.length }), collapsed && (_jsx(MultiSelectCustomListWrapper, { ref: target, children: _jsx(MultiSelectCustomList, { options: dropdownOptions, onSelected: onSelect, searchBarText: searchBarText }) }))] }));
};
//# sourceMappingURL=MultiSelectCustom.js.map