import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Box } from '@rocket.chat/fuselage';
import { useUniqueId } from '@rocket.chat/fuselage-hooks';
import { useVerifyPassword } from '@rocket.chat/ui-contexts';
import { useTranslation } from 'react-i18next';
import { PasswordVerifierItem } from './PasswordVerifierItem';
export const PasswordVerifier = ({ password, id }) => {
    const { t } = useTranslation();
    const uniqueId = useUniqueId();
    const passwordVerifications = useVerifyPassword(password || '');
    if (!(passwordVerifications === null || passwordVerifications === void 0 ? void 0 : passwordVerifications.length)) {
        return null;
    }
    return (_jsxs(_Fragment, { children: [_jsx("span", { id: id, hidden: true, children: t('Password_Policy_Aria_Description') }), _jsxs(Box, { display: 'flex', flexDirection: 'column', mbs: 8, children: [_jsx(Box, { mbe: 8, fontScale: 'c2', id: uniqueId, "aria-hidden": true, children: t('Password_must_have') }), _jsx(Box, { display: 'flex', flexWrap: 'wrap', role: 'list', "aria-labelledby": uniqueId, children: passwordVerifications.map(({ isValid, limit, name }) => (_jsx(PasswordVerifierItem, { text: t(`${name}-label`, { limit }), isValid: isValid, "aria-invalid": !isValid }, name))) })] })] }));
};
//# sourceMappingURL=PasswordVerifier.js.map