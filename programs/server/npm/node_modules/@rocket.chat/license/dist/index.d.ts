import type { LicenseLimitKind, LicenseInfo, LimitContext } from '@rocket.chat/core-typings';
import { getAppsConfig, getMaxActiveUsers, getUnmodifiedLicenseAndModules } from './deprecated';
import { onLicense } from './events/deprecated';
import { onBehaviorToggled, onBehaviorTriggered, onInvalidFeature, onInvalidateLicense, onLimitReached, onModule, onChange, onToggledFeature, onValidFeature, onValidateLicense, onInstall, onInvalidate, onRemoveLicense } from './events/listeners';
import { overwriteClassOnLicense } from './events/overwriteClassOnLicense';
import { LicenseManager } from './license';
import { getModules, hasModule } from './modules';
import { getTags } from './tags';
import { getCurrentValueForLicenseLimit, setLicenseLimitCounter } from './validation/getCurrentValueForLicenseLimit';
import { validateFormat } from './validation/validateFormat';
export { DuplicatedLicenseError } from './errors/DuplicatedLicenseError';
export * from './MockedLicenseBuilder';
interface License {
    validateFormat: typeof validateFormat;
    hasModule: typeof hasModule;
    getModules: typeof getModules;
    getTags: typeof getTags;
    overwriteClassOnLicense: typeof overwriteClassOnLicense;
    setLicenseLimitCounter: typeof setLicenseLimitCounter;
    getCurrentValueForLicenseLimit: typeof getCurrentValueForLicenseLimit;
    isLimitReached: <T extends LicenseLimitKind>(action: T, context?: Partial<LimitContext<T>>) => Promise<boolean>;
    onValidFeature: typeof onValidFeature;
    onInvalidFeature: typeof onInvalidFeature;
    onToggledFeature: typeof onToggledFeature;
    onModule: typeof onModule;
    onValidateLicense: typeof onValidateLicense;
    onInvalidateLicense: typeof onInvalidateLicense;
    onLimitReached: typeof onLimitReached;
    onBehaviorTriggered: typeof onBehaviorTriggered;
    revalidateLicense: () => Promise<void>;
    getInfo: (info: {
        limits: boolean;
        currentValues: boolean;
        license: boolean;
    }) => Promise<LicenseInfo>;
    onLicense: typeof onLicense;
    getMaxActiveUsers: typeof getMaxActiveUsers;
    getAppsConfig: typeof getAppsConfig;
    getUnmodifiedLicenseAndModules: typeof getUnmodifiedLicenseAndModules;
}
export declare class LicenseImp extends LicenseManager implements License {
    constructor();
    validateFormat: (encryptedLicense: string) => Promise<boolean>;
    hasModule: typeof hasModule;
    getModules: typeof getModules;
    getTags: typeof getTags;
    overwriteClassOnLicense: typeof overwriteClassOnLicense;
    setLicenseLimitCounter: typeof setLicenseLimitCounter;
    getCurrentValueForLicenseLimit: typeof getCurrentValueForLicenseLimit;
    isLimitReached<T extends LicenseLimitKind>(action: T, context?: Partial<LimitContext<T>>): Promise<boolean>;
    onChange: typeof onChange;
    onInstall: typeof onInstall;
    onRemoveLicense: typeof onRemoveLicense;
    onInvalidate: typeof onInvalidate;
    onValidFeature: typeof onValidFeature;
    onInvalidFeature: typeof onInvalidFeature;
    onToggledFeature: typeof onToggledFeature;
    onModule: typeof onModule;
    onValidateLicense: typeof onValidateLicense;
    onInvalidateLicense: typeof onInvalidateLicense;
    onLimitReached: typeof onLimitReached;
    onBehaviorTriggered: typeof onBehaviorTriggered;
    onBehaviorToggled: typeof onBehaviorToggled;
    onLicense: typeof onLicense;
    getMaxActiveUsers: typeof getMaxActiveUsers;
    getAppsConfig: typeof getAppsConfig;
    getUnmodifiedLicenseAndModules: typeof getUnmodifiedLicenseAndModules;
}
declare const license: LicenseImp;
export { license as License };
