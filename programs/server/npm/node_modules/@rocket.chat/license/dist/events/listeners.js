"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onLimitReached = exports.onBehaviorToggled = exports.onBehaviorTriggered = exports.onInvalidateLicense = exports.onValidateLicense = exports.onModule = exports.onToggledFeature = exports.onInvalidFeature = exports.onValidFeature = exports.onInvalidate = exports.onRemoveLicense = exports.onInstall = exports.onChange = void 0;
const modules_1 = require("../modules");
/**
 * Invoked when the license changes some internal state. it's called to sync the license with other instances.
 */
function onChange(cb) {
    this.on('sync', cb);
}
exports.onChange = onChange;
function onInstall(cb) {
    if (this.hasValidLicense()) {
        cb();
    }
    this.on('installed', cb);
}
exports.onInstall = onInstall;
function onRemoveLicense(cb) {
    this.on('removed', cb);
}
exports.onRemoveLicense = onRemoveLicense;
function onInvalidate(cb) {
    if (!this.hasValidLicense()) {
        cb();
    }
    this.on('invalidate', cb);
}
exports.onInvalidate = onInvalidate;
function onValidFeature(feature, cb) {
    this.on(`valid:${feature}`, cb);
    if (modules_1.hasModule.call(this, feature)) {
        cb();
    }
    return () => {
        this.off(`valid:${feature}`, cb);
    };
}
exports.onValidFeature = onValidFeature;
function onInvalidFeature(feature, cb) {
    this.on(`invalid:${feature}`, cb);
    if (!modules_1.hasModule.call(this, feature)) {
        cb();
    }
    return () => {
        this.off(`invalid:${feature}`, cb);
    };
}
exports.onInvalidFeature = onInvalidFeature;
function onToggledFeature(feature, { up, down }) {
    let enabled = modules_1.hasModule.call(this, feature);
    const offValidFeature = onValidFeature.bind(this)(feature, () => {
        if (!enabled) {
            void up?.();
            enabled = true;
        }
    });
    const offInvalidFeature = onInvalidFeature.bind(this)(feature, () => {
        if (enabled) {
            void down?.();
            enabled = false;
        }
    });
    if (enabled) {
        void up?.();
    }
    return () => {
        offValidFeature();
        offInvalidFeature();
    };
}
exports.onToggledFeature = onToggledFeature;
function onModule(cb) {
    this.on('module', cb);
}
exports.onModule = onModule;
function onValidateLicense(cb) {
    this.on('validate', cb);
}
exports.onValidateLicense = onValidateLicense;
function onInvalidateLicense(cb) {
    this.on('invalidate', cb);
}
exports.onInvalidateLicense = onInvalidateLicense;
function onBehaviorTriggered(behavior, cb) {
    this.on(`behavior:${behavior}`, cb);
}
exports.onBehaviorTriggered = onBehaviorTriggered;
function onBehaviorToggled(behavior, cb) {
    this.on(`behaviorToggled:${behavior}`, cb);
}
exports.onBehaviorToggled = onBehaviorToggled;
function onLimitReached(limitKind, cb) {
    this.on(`limitReached:${limitKind}`, cb);
}
exports.onLimitReached = onLimitReached;
//# sourceMappingURL=listeners.js.map