import type { LicenseLimitKind, LicenseModule, BehaviorWithContext, LicenseBehavior } from '@rocket.chat/core-typings';
import type { LicenseManager } from '../license';
/**
 * Invoked when the license changes some internal state. it's called to sync the license with other instances.
 */
export declare function onChange(this: LicenseManager, cb: () => void): void;
export declare function onInstall(this: LicenseManager, cb: () => void): void;
export declare function onRemoveLicense(this: LicenseManager, cb: () => void): void;
export declare function onInvalidate(this: LicenseManager, cb: () => void): void;
export declare function onValidFeature(this: LicenseManager, feature: LicenseModule, cb: () => void): () => void;
export declare function onInvalidFeature(this: LicenseManager, feature: LicenseModule, cb: () => void): () => void;
export declare function onToggledFeature(this: LicenseManager, feature: LicenseModule, { up, down }: {
    up?: () => Promise<void> | void;
    down?: () => Promise<void> | void;
}): () => void;
export declare function onModule(this: LicenseManager, cb: (data: {
    module: LicenseModule;
    valid: boolean;
}) => void): void;
export declare function onValidateLicense(this: LicenseManager, cb: () => void): void;
export declare function onInvalidateLicense(this: LicenseManager, cb: () => void): void;
export declare function onBehaviorTriggered(this: LicenseManager, behavior: Exclude<LicenseBehavior, 'prevent_installation'>, cb: (data: {
    reason: BehaviorWithContext['reason'];
    limit?: LicenseLimitKind;
}) => void): void;
export declare function onBehaviorToggled(this: LicenseManager, behavior: Exclude<LicenseBehavior, 'prevent_installation'>, cb: (data: {
    reason: BehaviorWithContext['reason'];
    limit?: LicenseLimitKind;
}) => void): void;
export declare function onLimitReached(this: LicenseManager, limitKind: LicenseLimitKind, cb: () => void): void;
