"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.licenseInvalidated = exports.licenseValidated = exports.behaviorTriggeredToggled = exports.behaviorTriggered = exports.moduleRemoved = exports.moduleValidated = void 0;
const logger_1 = require("../logger");
function moduleValidated(module) {
    try {
        this.emit('module', { module, valid: true });
    }
    catch (error) {
        logger_1.logger.error({ msg: `Error running module (valid: true) event: ${module}`, error });
    }
    try {
        this.emit(`valid:${module}`);
    }
    catch (error) {
        logger_1.logger.error({ msg: `Error running module added event: ${module}`, error });
    }
}
exports.moduleValidated = moduleValidated;
function moduleRemoved(module) {
    try {
        this.emit('module', { module, valid: false });
    }
    catch (error) {
        logger_1.logger.error({ msg: `Error running module (valid: false) event: ${module}`, error });
    }
    try {
        this.emit(`invalid:${module}`);
    }
    catch (error) {
        logger_1.logger.error({ msg: `Error running module removed event: ${module}`, error });
    }
}
exports.moduleRemoved = moduleRemoved;
function behaviorTriggered(options) {
    const { behavior, reason, modules: _, ...rest } = options;
    try {
        this.emit(`behavior:${behavior}`, {
            reason,
            ...rest,
        });
    }
    catch (error) {
        logger_1.logger.error({ msg: 'Error running behavior triggered event', error });
    }
    if (!['prevent_action'].includes(behavior)) {
        return;
    }
    if (reason !== 'limit' || !(`limit` in rest) || !rest.limit) {
        return;
    }
    try {
        this.emit(`limitReached:${rest.limit}`);
    }
    catch (error) {
        logger_1.logger.error({ msg: 'Error running limit reached event', error });
    }
}
exports.behaviorTriggered = behaviorTriggered;
function behaviorTriggeredToggled(options) {
    const { behavior, reason, modules: _, ...rest } = options;
    try {
        this.emit(`behaviorToggled:${behavior}`, {
            reason,
            ...rest,
        });
    }
    catch (error) {
        logger_1.logger.error({ msg: 'Error running behavior triggered event', error });
    }
}
exports.behaviorTriggeredToggled = behaviorTriggeredToggled;
function licenseValidated() {
    try {
        this.emit('validate');
    }
    catch (error) {
        logger_1.logger.error({ msg: 'Error running license validated event', error });
    }
}
exports.licenseValidated = licenseValidated;
function licenseInvalidated() {
    try {
        this.emit('invalidate');
    }
    catch (error) {
        logger_1.logger.error({ msg: 'Error running license invalidated event', error });
    }
}
exports.licenseInvalidated = licenseInvalidated;
//# sourceMappingURL=emitter.js.map