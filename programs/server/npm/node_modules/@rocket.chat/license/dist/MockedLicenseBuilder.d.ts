import type { ILicenseTag, ILicenseV3, LicenseLimit, LicenseModule, LicensePeriod, Timestamp } from '@rocket.chat/core-typings';
export declare class MockedLicenseBuilder {
    information: {
        id?: string;
        autoRenew: boolean;
        visualExpiration?: Timestamp;
        notifyAdminsAt?: Timestamp;
        notifyUsersAt?: Timestamp;
        trial: boolean;
        offline: boolean;
        createdAt: Timestamp;
        grantedBy: {
            method: 'manual' | 'self-service' | 'sales' | 'support' | 'reseller';
            seller?: string;
        };
        grantedTo?: {
            name?: string;
            company?: string;
            email?: string;
        };
        legalText?: string;
        notes?: string;
        tags?: ILicenseTag[];
    };
    validation: {
        serverUrls: {
            value: string;
            type: 'url' | 'regex' | 'hash';
        }[];
        serverVersions?: {
            value: string;
        }[];
        serverUniqueId?: string;
        cloudWorkspaceId?: string;
        validPeriods: LicensePeriod[];
        legalTextAgreement?: {
            type: 'required' | 'not-required' | 'accepted';
            acceptedVia?: 'cloud';
        };
        statisticsReport: {
            required: boolean;
            allowedStaleInDays?: number;
        };
    };
    constructor();
    withExpiredDate(): this;
    withNotStartedDate(): this;
    resetValidPeriods(): this;
    withValidPeriod(period: LicensePeriod): this;
    withGrantedTo(grantedTo: {
        name?: string;
        company?: string;
        email?: string;
    }): this;
    grantedModules: {
        module: LicenseModule;
    }[];
    limits: {
        activeUsers?: LicenseLimit[];
        guestUsers?: LicenseLimit[];
        roomsPerGuest?: LicenseLimit<'prevent_action'>[];
        privateApps?: LicenseLimit[];
        marketplaceApps?: LicenseLimit[];
        monthlyActiveContacts?: LicenseLimit[];
    };
    cloudMeta?: Record<string, any>;
    withServerUrls(urls: {
        value: string;
        type: 'url' | 'regex' | 'hash';
    }): this;
    withServerVersions(versions: {
        value: string;
    }): this;
    withGratedModules(modules: LicenseModule[]): this;
    withNoGratedModules(modules: LicenseModule[]): this;
    withLimits<K extends keyof ILicenseV3['limits']>(key: K, value: ILicenseV3['limits'][K]): this;
    build(): ILicenseV3;
    sign(): Promise<string>;
}
