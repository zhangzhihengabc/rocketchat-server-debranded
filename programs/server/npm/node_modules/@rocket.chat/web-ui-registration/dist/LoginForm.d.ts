import type { ReactElement } from 'react';
import type { DispatchLoginRouter } from './hooks/useLoginRouter';
declare const LOGIN_SUBMIT_ERRORS: {
    readonly 'error-user-is-not-activated': {
        readonly type: "warning";
        readonly i18n: "registration.page.registration.waitActivationWarning";
    };
    readonly 'error-app-user-is-not-allowed-to-login': {
        readonly type: "danger";
        readonly i18n: "registration.page.login.errors.AppUserNotAllowedToLogin";
    };
    readonly 'user-not-found': {
        readonly type: "danger";
        readonly i18n: "registration.page.login.errors.wrongCredentials";
    };
    readonly 'error-login-blocked-for-ip': {
        readonly type: "danger";
        readonly i18n: "registration.page.login.errors.loginBlockedForIp";
    };
    readonly 'error-login-blocked-for-user': {
        readonly type: "danger";
        readonly i18n: "registration.page.login.errors.loginBlockedForUser";
    };
    readonly 'error-license-user-limit-reached': {
        readonly type: "warning";
        readonly i18n: "registration.page.login.errors.licenseUserLimitReached";
    };
    readonly 'error-invalid-email': {
        readonly type: "danger";
        readonly i18n: "registration.page.login.errors.invalidEmail";
    };
};
export type LoginErrors = keyof typeof LOGIN_SUBMIT_ERRORS;
export declare const LoginForm: ({ setLoginRoute }: {
    setLoginRoute: DispatchLoginRouter;
}) => ReactElement;
export default LoginForm;
//# sourceMappingURL=LoginForm.d.ts.map