export declare const useRegisterMethod: () => import("@tanstack/react-query").UseMutationResult<Promise<{
    user: {
        _id?: string | undefined;
        createdAt?: string | undefined;
        roles?: string[] | undefined;
        type?: string | undefined;
        active?: boolean | undefined;
        username?: string | undefined;
        nickname?: string | undefined;
        name?: string | undefined;
        services?: {
            password?: {
                exists?: boolean | undefined;
                bcrypt?: string | undefined;
            } | undefined;
            passwordHistory?: string[] | undefined;
            email?: {
                verificationTokens?: {
                    token: string;
                    address: string;
                    when: string;
                }[] | undefined;
            } | undefined;
            resume?: {
                loginTokens?: ({
                    when: string;
                    hashedToken: string;
                    twoFactorAuthorizedUntil?: string | undefined;
                    twoFactorAuthorizedHash?: string | undefined;
                } | {
                    type: "personalAccessToken";
                    createdAt: string;
                    lastTokenPart: string;
                    name: string;
                    bypassTwoFactor?: boolean | undefined;
                    hashedToken: string;
                    twoFactorAuthorizedUntil?: string | undefined;
                    twoFactorAuthorizedHash?: string | undefined;
                })[] | undefined;
            } | undefined;
            cloud?: {
                accessToken: string;
                refreshToken: string;
                expiresAt: string;
            } | undefined;
            google?: any;
            facebook?: any;
            github?: any;
            linkedin?: any;
            twitter?: any;
            gitlab?: any;
            totp?: {
                enabled: boolean;
                hashedBackup: string[];
                secret: string;
            } | undefined;
            email2fa?: {
                enabled: boolean;
                changedAt: string;
            } | undefined;
            emailCode?: {
                code: string;
                expire: string;
                attempts: number;
            } | undefined;
            saml?: {
                inResponseTo?: string | undefined;
                provider?: string | undefined;
                idp?: string | undefined;
                idpSession?: string | undefined;
                nameID?: string | undefined;
            } | undefined;
            ldap?: {
                id: string;
                idAttribute?: string | undefined;
            } | undefined;
            nextcloud?: {
                accessToken: string;
                refreshToken: string;
                serverURL: string;
            } | undefined;
            dolphin?: {
                NickName?: string | undefined;
            } | undefined;
        } | undefined;
        emails?: {
            address: string;
            verified?: boolean | undefined;
        }[] | undefined;
        status?: import("@rocket.chat/core-typings").UserStatus | undefined;
        statusConnection?: string | undefined;
        lastLogin?: string | undefined;
        bio?: string | undefined;
        avatarOrigin?: string | undefined;
        avatarETag?: string | undefined;
        avatarUrl?: string | undefined;
        utcOffset?: number | undefined;
        language?: string | undefined;
        statusDefault?: import("@rocket.chat/core-typings").UserStatus | undefined;
        statusText?: string | undefined;
        oauth?: {
            authorizedClients: string[];
        } | undefined;
        _updatedAt?: string | undefined;
        e2e?: {
            private_key: string;
            public_key: string;
        } | undefined;
        requirePasswordChange?: boolean | undefined;
        customFields?: {
            [x: string]: any;
        } | undefined;
        settings?: {
            profile: any;
            preferences?: {
                [x: string]: any;
            } | undefined;
        } | undefined;
        defaultRoom?: string | undefined;
        ldap?: boolean | undefined;
        extension?: string | undefined;
        inviteToken?: string | undefined;
        canViewAllInfo?: boolean | undefined;
        phone?: string | undefined;
        reason?: string | undefined;
        federated?: boolean | undefined;
        federation?: {
            avatarUrl?: string | undefined;
            searchedServerNames?: string[] | undefined;
        } | undefined;
        banners?: {
            [x: string]: {
                id: string;
                priority: number;
                title: string;
                text: string;
                textArguments?: string[] | undefined;
                modifiers: ("large" | "danger")[];
                link: string;
                read?: boolean | undefined;
            };
        } | undefined;
        importIds?: string[] | undefined;
        _pendingAvatarUrl?: string | undefined;
    };
}>, unknown, import("@rocket.chat/rest-typings").UserRegisterParamsPOST, unknown>;
//# sourceMappingURL=useRegisterMethod.d.ts.map