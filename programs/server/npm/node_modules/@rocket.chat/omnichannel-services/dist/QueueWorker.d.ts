import { ServiceClass } from '@rocket.chat/core-services';
import type { IQueueWorkerService, HealthAggResult } from '@rocket.chat/core-services';
import type { Logger } from '@rocket.chat/logger';
import type { Actions } from 'mongo-message-queue';
import MessageQueue from 'mongo-message-queue';
import type { Db } from 'mongodb';
export declare class QueueWorker extends ServiceClass implements IQueueWorkerService {
    private readonly db;
    protected name: string;
    protected retryCount: number;
    protected retryDelay: number;
    protected queue: MessageQueue;
    private logger;
    constructor(db: Db, loggerClass: typeof Logger);
    isServiceNotFoundMessage(message: string): boolean;
    isServiceRetryError(message: string): boolean;
    created(): Promise<void>;
    createIndexes(): Promise<void>;
    stopped(): Promise<void>;
    private isRetryableError;
    private workerCallback;
    private registerWorkers;
    private matchServiceCall;
    queueWork<T extends Record<string, unknown>>(queue: Actions, to: string, data: T): Promise<void>;
    queueInfo(): Promise<HealthAggResult[]>;
}
