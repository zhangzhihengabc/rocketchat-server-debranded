/// <reference types="node" />
import { ServiceClass } from '@rocket.chat/core-services';
import type { IOmnichannelTranscriptService } from '@rocket.chat/core-services';
import type { IMessage, IUser, IRoom, ILivechatVisitor, ILivechatAgent } from '@rocket.chat/core-typings';
import type { Logger } from '@rocket.chat/logger';
import type { Root } from '@rocket.chat/message-parser';
type WorkDetails = {
    rid: IRoom['_id'];
    userId: IUser['_id'];
};
type WorkDetailsWithSource = WorkDetails & {
    from: string;
};
type Quote = {
    name: string;
    ts?: Date;
    md: Root;
};
type MessageData = Pick<IMessage, '_id' | 'ts' | 'u' | 'msg' | 'md'> & {
    files: ({
        name?: string;
        buffer: Buffer | null;
        extension?: string;
    } | undefined)[];
    quotes: (Quote | undefined)[];
};
type WorkerData = {
    siteName: string;
    visitor: Pick<ILivechatVisitor, '_id' | 'username' | 'name' | 'visitorEmails'> | null;
    agent: ILivechatAgent | undefined;
    closedAt?: Date;
    messages: MessageData[];
    timezone: string;
    dateFormat: string;
    timeAndDateFormat: string;
    translations: {
        key: string;
        value: string;
    }[];
};
export declare class OmnichannelTranscript extends ServiceClass implements IOmnichannelTranscriptService {
    protected name: string;
    private worker;
    private log;
    maxNumberOfConcurrentJobs: number;
    currentJobNumber: number;
    constructor(loggerClass: typeof Logger);
    getTimezone(user?: {
        utcOffset?: string | number;
    }): Promise<string>;
    private getMessagesFromRoom;
    requestTranscript({ details }: {
        details: WorkDetails;
    }): Promise<void>;
    private getQuotesFromMessage;
    private getMessagesData;
    private getTranslations;
    workOnPdf({ details }: {
        details: WorkDetailsWithSource;
    }): Promise<void>;
    doRender({ data, details }: {
        data: WorkerData;
        details: WorkDetailsWithSource;
    }): Promise<void>;
    private pdfFailed;
    private pdfComplete;
}
export {};
