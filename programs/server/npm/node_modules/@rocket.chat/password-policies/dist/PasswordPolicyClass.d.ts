type PasswordPolicyType = {
    enabled: boolean;
    policy: [name: string, options?: Record<string, unknown>][];
};
export declare class PasswordPolicy {
    private regex;
    private enabled;
    private minLength;
    private maxLength;
    private forbidRepeatingCharacters;
    private mustContainAtLeastOneLowercase;
    private mustContainAtLeastOneUppercase;
    private mustContainAtLeastOneNumber;
    private mustContainAtLeastOneSpecialCharacter;
    private throwError;
    private forbidRepeatingCharactersCount;
    constructor({ enabled, minLength, maxLength, forbidRepeatingCharacters, forbidRepeatingCharactersCount, // the regex is this number minus one
    mustContainAtLeastOneLowercase, // /[A-Z]{3,}/ could do this instead of at least one
    mustContainAtLeastOneUppercase, mustContainAtLeastOneNumber, mustContainAtLeastOneSpecialCharacter, throwError, }: {
        enabled?: boolean | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        forbidRepeatingCharacters?: boolean | undefined;
        forbidRepeatingCharactersCount?: number | undefined;
        mustContainAtLeastOneLowercase?: boolean | undefined;
        mustContainAtLeastOneUppercase?: boolean | undefined;
        mustContainAtLeastOneNumber?: boolean | undefined;
        mustContainAtLeastOneSpecialCharacter?: boolean | undefined;
        throwError?: boolean | undefined;
    });
    error(error: string, message: string, reasons?: {
        error: string;
        message: string;
    }[]): boolean;
    sendValidationMessage(password: string): {
        name: string;
        isValid: boolean;
        limit?: number;
    }[];
    validate(password: string): boolean;
    getPasswordPolicy(): PasswordPolicyType;
}
export {};
//# sourceMappingURL=PasswordPolicyClass.d.ts.map