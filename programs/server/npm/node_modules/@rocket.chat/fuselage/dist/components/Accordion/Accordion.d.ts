import type { ComponentProps, ReactElement, ReactNode } from 'react';
import React from 'react';
import Box from '../Box';
type AccordionProps = ComponentProps<typeof Box> & {
    animated?: boolean;
    children: ReactNode;
};
export declare function Accordion(props: AccordionProps): ReactElement<AccordionProps>;
export declare namespace Accordion {
    var Item: ({ children, className, defaultExpanded, disabled, expanded: propExpanded, tabIndex, title, noncollapsible, onToggle, onToggleEnabled, ...props }: {
        children?: ReactNode;
        className?: string | undefined;
        defaultExpanded?: boolean | undefined;
        disabled?: boolean | undefined;
        expanded?: boolean | undefined;
        tabIndex?: number | undefined;
        title: ReactNode;
        noncollapsible?: boolean | undefined;
        onToggle?: ((e: React.KeyboardEvent<Element> | React.MouseEvent<Element, MouseEvent>) => void) | undefined;
        onToggleEnabled?: ((e: React.FormEvent<Element>) => void) | undefined;
    }) => JSX.Element;
}
export {};
//# sourceMappingURL=Accordion.d.ts.map