import React from 'react';
import type { AllHTMLAttributes } from 'react';
import type { StylingProps } from './stylingProps';
export declare const Box: React.ForwardRefExoticComponent<{
    is?: React.ElementType | undefined;
    className?: string | (<T extends readonly unknown[]>(...args: T) => string) | (string | false | 0 | (<T extends readonly unknown[]>(...args: T) => string) | null | undefined)[] | undefined;
    animated?: boolean | undefined;
    withRichContent?: boolean | "inlineWithoutBreaks" | undefined;
    htmlSize?: AllHTMLAttributes<HTMLElement>['size'];
} & Partial<StylingProps> & Omit<React.AllHTMLAttributes<HTMLElement>, "ref" | "is" | "className" | "size" | "elevation"> & Omit<React.SVGAttributes<SVGElement>, "elevation" | keyof React.AllHTMLAttributes<HTMLElement>> & React.RefAttributes<any>>;
declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    is?: React.ElementType | undefined;
    className?: string | (<T extends readonly unknown[]>(...args: T) => string) | (string | false | 0 | (<T extends readonly unknown[]>(...args: T) => string) | null | undefined)[] | undefined;
    animated?: boolean | undefined;
    withRichContent?: boolean | "inlineWithoutBreaks" | undefined;
    htmlSize?: number | undefined;
} & Partial<StylingProps> & Omit<React.AllHTMLAttributes<HTMLElement>, "ref" | "is" | "className" | "size" | "elevation"> & Omit<React.SVGAttributes<SVGElement>, "elevation" | keyof React.AllHTMLAttributes<HTMLElement>> & React.RefAttributes<any>>>;
export default _default;
//# sourceMappingURL=Box.d.ts.map