import type { KeyboardEvent } from 'react';
import type { OptionType } from './Options';
import { useVisible } from './useVisible';
export type UseCursorOnChange<T> = (option: T, visibilityHandler: ReturnType<typeof useVisible>) => void;
export declare const useCursor: <T extends readonly [value: unknown, label: unknown, selected?: unknown, disabled?: unknown, type?: "option" | "heading" | "divider" | undefined, url?: string | undefined] = OptionType>(initial: number, options: T[], onChange: UseCursorOnChange<T>) => [cursor: number, handleKeyDown: (e: KeyboardEvent) => void, handleKeyUp: (e: KeyboardEvent) => void, reset: () => void, visibilityHandler: [visible: import("../AnimatedVisibility/AnimatedVisibility").VisibilityType, hide: () => void, show: () => void]];
//# sourceMappingURL=useCursor.d.ts.map