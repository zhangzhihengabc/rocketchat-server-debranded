/// <reference types="react" />
import { ThreadMessage } from './ThreadMessage';
import { ThreadMessageBody } from './ThreadMessageBody';
import { ThreadMessageContainer } from './ThreadMessageContainer';
import { ThreadMessageEmoji } from './ThreadMessageEmoji';
import { ThreadMessageFollow } from './ThreadMessageFollow';
import { ThreadMessageIconThread } from './ThreadMessageIconThread';
import { ThreadMessageOrigin } from './ThreadMessageOrigin';
import { ThreadMessageRow } from './ThreadMessageRow';
import { ThreadMessageUnfollow } from './ThreadMessageUnfollow';
declare const ThreadMessageLeftContainer: (props: {
    children?: import("react").ReactNode;
}) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
declare const _default: ((props: import("react").AllHTMLAttributes<HTMLDivElement> & {
    clickable?: boolean | undefined;
    sequential?: boolean | undefined;
    className?: string | undefined;
    isSelected?: boolean | undefined;
    isEditing?: boolean | undefined;
    isPending?: boolean | undefined;
    highlight?: boolean | undefined;
} & import("react").RefAttributes<HTMLDivElement>) => JSX.Element) & {
    Row: (props: import("react").HTMLAttributes<HTMLDivElement>) => JSX.Element;
    Container: (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    LeftContainer: (props: {
        children?: import("react").ReactNode;
    }) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
    Origin: ({ children, system, }: {
        children?: import("react").ReactNode;
        system?: boolean | undefined;
    }) => JSX.Element;
    Message: (props: {
        children?: import("react").ReactNode;
    }) => JSX.Element;
    Follow: () => JSX.Element;
    Unfollow: () => JSX.Element;
    Icon: () => JSX.Element;
};
export default _default;
export { ThreadMessage, ThreadMessageBody, ThreadMessageContainer, ThreadMessageFollow, ThreadMessageIconThread, ThreadMessageOrigin, ThreadMessageRow, ThreadMessageEmoji, ThreadMessageUnfollow, ThreadMessageLeftContainer, };
//# sourceMappingURL=index.d.ts.map