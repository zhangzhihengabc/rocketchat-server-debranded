type Callback<R> = (error: unknown, result: R) => void;
type CallbackArgs<A extends any[], R> = [...args: A, cb: Callback<R>];
/**
 * A generic replacement of callback-style function type.
 */
type Fn<T, A extends any[], R> = (this: T, ...args: CallbackArgs<A, R>) => void;
/**
 * Generic wrapper of async function with conventional API signature
 * `function (...args, (error, result) => {})`.
 *
 * Returns `result` and throws `error` as exception if not null.
 *
 * @param fn the original callback style function
 * @return the wrapped function
 */
export declare function deasync<T, A extends any[], R>(fn: Fn<T, A, R>): (this: T, ...args: A) => R;
/**
 * Similar with the keyword `await` but synchronously.
 *
 * @param promise A Promise or any value to wait for
 * @return Returns the fulfilled value of the promise, or the value itself if it's not a Promise.
 */
export declare function awaitSync<T>(promise: T): Awaited<T>;
export {};
