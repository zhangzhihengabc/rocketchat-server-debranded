"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocation = void 0;
function getLocation(parsedJson, { dataPath, markIdentifier = false }) {
    const { jsonAST } = parsedJson;
    const path = Array.isArray(dataPath)
        ? dataPath
        :
            (dataPath.startsWith('.')
                ? dataPath.slice(1)
                : dataPath)
                .split('.')
                .filter(val => val);
    const pathAsString = () => path.join('.');
    const getParentPath = (index) => '.' + path.slice(0, index).join('.');
    const explainWhere = (index) => `${getParentPath(index)} [query: ${pathAsString()}]`;
    const { loc } = path
        .reduce((node, pathItem, index) => node.type === 'Object'
        ? (() => {
            const child = node.children.find(child => child.key.value === pathItem);
            if (!child) {
                throw new Error(`No such property ${pathItem} in ` +
                    `${explainWhere(index)}`);
            }
            const { key, value } = child;
            return markIdentifier && index === path.length - 1
                ? key
                : value;
        })()
        : node.type === 'Array'
            ? (() => {
                const itemIndex = Number(pathItem);
                if (isNaN(itemIndex)) {
                    throw new Error(`Invalid non-numeric array index "${pathItem}" ` +
                        `in array at ${explainWhere(index)}`);
                }
                else if (itemIndex < 0 || itemIndex >= node.children.length) {
                    throw new RangeError(`Index ${itemIndex} out-of-bounds in array of ` +
                        `size ${node.children.length} at ` +
                        `${explainWhere(index)}`);
                }
                node.children;
                return node.children[Number(pathItem)];
            })()
            : node, jsonAST);
    return { start: loc === null || loc === void 0 ? void 0 : loc.start, end: loc === null || loc === void 0 ? void 0 : loc.end };
}
exports.getLocation = getLocation;
