"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureNamed = exports.annotate = exports.suretype = exports.retype = exports.raw = exports.recursiveUnCast = exports.recursiveCast = exports.v = exports.RecursiveValidator = exports.RawValidator = exports.IfValidator = exports.AllOfValidator = exports.AnyOfValidator = exports.TupleValidator = exports.ArrayValidator = exports.ObjectValidator = exports.AnyValidator = exports.NullValidator = exports.StringValidator = exports.NumberValidator = exports.BooleanValidator = exports.BaseValidator = exports.CoreValidator = void 0;
const validator_1 = require("../validators/core/validator");
Object.defineProperty(exports, "CoreValidator", { enumerable: true, get: function () { return validator_1.CoreValidator; } });
const validator_2 = require("../validators/base/validator");
Object.defineProperty(exports, "BaseValidator", { enumerable: true, get: function () { return validator_2.BaseValidator; } });
const validator_3 = require("../validators/boolean/validator");
Object.defineProperty(exports, "BooleanValidator", { enumerable: true, get: function () { return validator_3.BooleanValidator; } });
const validator_4 = require("../validators/number/validator");
Object.defineProperty(exports, "NumberValidator", { enumerable: true, get: function () { return validator_4.NumberValidator; } });
const validator_5 = require("../validators/string/validator");
Object.defineProperty(exports, "StringValidator", { enumerable: true, get: function () { return validator_5.StringValidator; } });
const validator_6 = require("../validators/null/validator");
Object.defineProperty(exports, "NullValidator", { enumerable: true, get: function () { return validator_6.NullValidator; } });
const validator_7 = require("../validators/any/validator");
Object.defineProperty(exports, "AnyValidator", { enumerable: true, get: function () { return validator_7.AnyValidator; } });
const validator_8 = require("../validators/object/validator");
Object.defineProperty(exports, "ObjectValidator", { enumerable: true, get: function () { return validator_8.ObjectValidator; } });
const validator_9 = require("../validators/array/validator");
Object.defineProperty(exports, "ArrayValidator", { enumerable: true, get: function () { return validator_9.ArrayValidator; } });
const validator_10 = require("../validators/tuple/validator");
Object.defineProperty(exports, "TupleValidator", { enumerable: true, get: function () { return validator_10.TupleValidator; } });
const validator_11 = require("../validators/or/validator");
Object.defineProperty(exports, "AnyOfValidator", { enumerable: true, get: function () { return validator_11.AnyOfValidator; } });
const validator_12 = require("../validators/all-of/validator");
Object.defineProperty(exports, "AllOfValidator", { enumerable: true, get: function () { return validator_12.AllOfValidator; } });
const validator_13 = require("../validators/if/validator");
Object.defineProperty(exports, "IfValidator", { enumerable: true, get: function () { return validator_13.IfValidator; } });
const validator_14 = require("../validators/raw/validator");
Object.defineProperty(exports, "RawValidator", { enumerable: true, get: function () { return validator_14.RawValidator; } });
const validator_15 = require("../validators/recursive/validator");
Object.defineProperty(exports, "RecursiveValidator", { enumerable: true, get: function () { return validator_15.RecursiveValidator; } });
const validation_1 = require("../validation");
const annotations_1 = require("../annotations");
const string = () => new validator_5.StringValidator();
const number = () => new validator_4.NumberValidator();
const object = (obj) => new validator_8.ObjectValidator(obj);
const tuple = (types) => new validator_10.TupleValidator(types);
const array = (itemType) => new validator_9.ArrayValidator(itemType !== null && itemType !== void 0 ? itemType : any());
const arrayOrTuple = ((itemType) => typeof itemType === 'object' && itemType && Array.isArray(itemType)
    ? tuple(itemType)
    : array(itemType));
const boolean = () => new validator_3.BooleanValidator();
const _null = () => new validator_6.NullValidator();
const anyOf = (validators) => new validator_11.AnyOfValidator(validators);
const allOf = (validators) => new validator_12.AllOfValidator(validators);
const any = () => new validator_7.AnyValidator();
const unknown = () => new validator_7.AnyValidator();
const _if = (validator) => new validator_13.IfValidator(validator);
const recursive = () => new validator_15.RecursiveValidator();
exports.v = {
    string,
    number,
    object,
    array: arrayOrTuple,
    boolean,
    null: _null,
    anyOf,
    allOf,
    if: _if,
    any,
    unknown,
    recursive,
};
/**
 * Cast a recursive value (a value in a recursive type)
 */
const recursiveCast = (value) => value;
exports.recursiveCast = recursiveCast;
/**
 * Cast a value into a recursive value (inversion of recursiveCast)
 */
const recursiveUnCast = (value) => value;
exports.recursiveUnCast = recursiveUnCast;
const raw = (jsonSchema, fragment) => new validator_14.RawValidator(jsonSchema, fragment);
exports.raw = raw;
function retype(validator) {
    return {
        as() {
            return validator;
        }
    };
}
exports.retype = retype;
/**
 * Annotate a validator with a name and other decorations
 *
 * @param annotations Annotations
 * @param validator Target validator to annotate
 * @returns Annotated validator
 */
function suretype(annotations, validator) {
    return annotations_1.annotateValidator(validation_1.cloneValidator(validator, false), new annotations_1.AnnotationsHolder(annotations));
}
exports.suretype = suretype;
function annotate(annotations, validator) {
    return annotations_1.annotateValidator(validation_1.cloneValidator(validator, false), new annotations_1.AnnotationsHolder(annotations));
}
exports.annotate = annotate;
/**
 * Ensures a validator is annotated with a name. This will not overwrite the
 * name of a validator, only ensure it has one.
 *
 * @param name The name to annotate with, unless already annotated
 * @param validator The target validator
 * @returns Annotated validator
 */
function ensureNamed(name, validator) {
    const annotations = annotations_1.getAnnotations(validator);
    if (annotations === null || annotations === void 0 ? void 0 : annotations.name)
        return validator;
    return annotations_1.annotateValidator(validation_1.cloneValidator(validator, false), new annotations_1.AnnotationsHolder({ ...annotations, name }));
}
exports.ensureNamed = ensureNamed;
