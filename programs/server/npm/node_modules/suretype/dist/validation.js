"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniqValidators = exports.getValidatorSchema = exports.attachSchemaToValidator = exports.cloneValidator = exports.validatorType = exports.validatorToSchema = void 0;
const validator_1 = require("./validators/core/validator");
const validator_2 = require("./validators/raw/validator");
function validatorToSchema(validator, traverser) {
    return validator_1.exposeCoreValidator(validator).toSchema(traverser);
}
exports.validatorToSchema = validatorToSchema;
function validatorType(validator) {
    return validator_1.exposeCoreValidator(validator).type;
}
exports.validatorType = validatorType;
function cloneValidator(validator, clean) {
    return validator_1.exposeCoreValidator(validator).clone(clean);
}
exports.cloneValidator = cloneValidator;
const schemaLookup = new WeakMap();
function attachSchemaToValidator(validator, schema) {
    schemaLookup.set(validator, schema);
    return validator;
}
exports.attachSchemaToValidator = attachSchemaToValidator;
function getValidatorSchema(val) {
    if (val && val instanceof validator_1.CoreValidator)
        return val;
    // Maybe validator function
    if (val && val instanceof Function)
        return schemaLookup.get(val);
    return undefined;
}
exports.getValidatorSchema = getValidatorSchema;
function uniqValidators(validators) {
    validators = [...new Set(validators)];
    return [
        ...new Map(validators.map(validator => {
            const raw = validator_2.getRaw(validator);
            return raw
                ? [raw.toSchema(), raw]
                : [{}, validator];
        }))
            .values()
    ];
}
exports.uniqValidators = uniqValidators;
