export declare type Type = "string" | "number" | "integer" | "object" | "array" | "boolean" | "null";
export declare type AnyType = Type | "raw" | "any" | "any-of" | "all-of" | "if" | "recursive";
export declare type FilterProperties<T, Cond> = {
    [K in keyof T]: T[K] extends Cond ? K : never;
};
export declare type FilterNames<T, Cond> = FilterProperties<T, Cond>[keyof T];
export declare type SubType<T, Cond, Invert = false> = Invert extends true ? Omit<T, FilterNames<T, Cond>> : Pick<T, FilterNames<T, Cond>>;
export declare abstract class RecursiveValue {
}
