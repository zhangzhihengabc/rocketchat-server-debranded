import { Type } from "../types";
import { TreeTraverser } from "../core/validator";
import { ValueValidator } from "../value/validator";
export declare class NumberValidator<T extends number = number> extends ValueValidator<T, NumberValidator<T>> {
    protected type: Type;
    private _multipleOf;
    private _gt;
    private _gte;
    private _lt;
    private _lte;
    protected chainedGt(): number | undefined;
    protected chainedGte(): number | undefined;
    protected chainedLt(): number | undefined;
    protected chainedLte(): number | undefined;
    protected chainedMultipleOf(): number | undefined;
    const<V extends T>(value: V): NumberValidator<V>;
    enum<V extends T[]>(...values: V): NumberValidator<V[number]>;
    gt(n: number): this;
    gte(n: number): this;
    lt(n: number): this;
    lte(n: number): this;
    integer(): this;
    multipleOf(mul: number): this;
    protected toSchema(traverser: TreeTraverser): {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf?: undefined;
        anyOf?: undefined;
        default?: undefined;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf: Omit<any, "type">[];
        anyOf?: undefined;
        default?: undefined;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf?: undefined;
        anyOf: Omit<any, "type">[];
        default?: undefined;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf: Omit<any, "type">[];
        anyOf: Omit<any, "type">[];
        default?: undefined;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf?: undefined;
        anyOf?: undefined;
        default: T;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf: Omit<any, "type">[];
        anyOf?: undefined;
        default: T;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf?: undefined;
        anyOf: Omit<any, "type">[];
        default: T;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    } | {
        maximum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        minimum?: number | undefined;
        exclusiveMinimum?: number | undefined;
        multipleOf?: number | undefined;
        allOf: Omit<any, "type">[];
        anyOf: Omit<any, "type">[];
        default: T;
        examples?: string[] | undefined;
        description?: string | undefined;
        title?: string | undefined;
        type: Type;
    };
    protected clone(clean?: boolean): this;
}
