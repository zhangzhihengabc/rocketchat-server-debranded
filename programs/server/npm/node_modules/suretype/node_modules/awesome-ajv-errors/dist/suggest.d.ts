import { PrettifyContext, TypedValue, SimpleValueType } from './types';
export interface SuggestOptions {
    limit?: number | ((length: number) => number);
    referenceValue?: SimpleValueType;
}
export interface SuggestResult {
    suggestions: Array<TypedValue>;
    rest: Array<TypedValue>;
    best?: TypedValue;
    referenceValue?: SimpleValueType;
}
export declare function suggest<T extends Array<any> | undefined>(value: string, possibles: T, opts?: SuggestOptions): T extends Array<any> ? SuggestResult : undefined;
export interface FormatSuggestionsOptions {
    untyped?: boolean;
    referenceValue?: SimpleValueType;
    isSuggestion?: boolean;
    isConst?: boolean;
}
export declare function formatSuggestions(list: SuggestResult | Array<TypedValue> | undefined, context: PrettifyContext, opts?: FormatSuggestionsOptions): string;
export declare function formatBestSuggestion({ best, referenceValue }: SuggestResult, context: PrettifyContext): string | undefined;
export interface SuggestedType {
    type: string;
    value: string;
}
export declare function suggestTypedValue<T extends string | number>(value: T, types: Array<string>, context: PrettifyContext): SuggestedType | undefined;
