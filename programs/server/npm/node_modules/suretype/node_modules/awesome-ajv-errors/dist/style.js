"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatValue = exports.formatTypedValue = exports.printError = exports.printEnum = exports.pathDescription = exports.formatDataPath = exports.ensureColorUsage = exports.support = exports.link = exports.style = void 0;
const chalk_1 = require("chalk");
const types_1 = require("./types");
const util_1 = require("./util");
const terminalLink = require("terminal-link");
const styles = {
    title: chalk_1.red.bold,
    pathDescription: chalk_1.blue.italic,
    expr: chalk_1.white.italic,
    type: chalk_1.blue.bold,
    string: chalk_1.green,
    number: chalk_1.magenta,
    primitive: chalk_1.yellow,
    dimmed: chalk_1.dim,
    good: chalk_1.green,
    operator: chalk_1.white,
    link: chalk_1.blue,
    regex: chalk_1.magenta.italic
};
exports.style = {};
for (const key of Object.keys(styles))
    exports.style[key] =
        (text, context) => context.colors
            ? styles[key](text)
            : text;
function link(title, url, context) {
    return terminalLink(exports.style.link(title, context), url);
}
exports.link = link;
exports.support = Boolean(chalk_1.supportsColor && chalk_1.supportsColor.hasBasic);
const ensureColorUsage = (useColors) => useColors == null ? exports.support : useColors;
exports.ensureColorUsage = ensureColorUsage;
function formatDataPath(dataPath, context) {
    return dataPath.path
        .map(({ key, type }) => type === 'number'
        ?
            exports.style.operator('[', context) +
                exports.style.number(key, context) +
                exports.style.operator(']', context)
        :
            exports.style.operator('.', context) +
                exports.style.string(key, context))
        .join('');
}
exports.formatDataPath = formatDataPath;
function pathDescription(context, pathType) {
    const { dataPath } = context;
    if (dataPath.path.length === 0)
        return ['', exports.style.expr("root object", context), ''];
    const humanify = (dataPath) => dataPath.path.length === 1
        ? ['', formatDataPath(dataPath, context), ` ${pathType}`]
        : [`${pathType} at `, formatDataPath(dataPath, context), ''];
    return humanify(dataPath);
}
exports.pathDescription = pathDescription;
function printEnum(lines, { indent = 0, bullet = true } = {}) {
    const prefix = indent === 0 ? '' : ' '.repeat(indent);
    const bulletChar = bullet ? 'âˆ™ ' : '';
    return lines.map(line => `${prefix}    ${bulletChar}${line}`);
}
exports.printEnum = printEnum;
function printError(result) {
    return result.title + "\n\n" + result.codeFrame;
}
exports.printError = printError;
function formatTypedValue(typedValue, context, { untyped = false, includeType = false, } = {}) {
    const type = typedValue.type;
    const value = `${typedValue.value}`;
    const styledValue = type === 'string'
        ? untyped
            ? exports.style.pathDescription(value, context)
            : exports.style.string(util_1.enquote(value), context)
        : type === 'number'
            ? exports.style.number(value, context)
            : exports.style.primitive(value, context);
    if (!includeType && typedValue.isSimple)
        return styledValue;
    return styledValue +
        exports.style.title(' (as ', context) +
        exports.style.pathDescription(type, context) +
        exports.style.title(')', context);
}
exports.formatTypedValue = formatTypedValue;
function formatValue(value, context, opts) {
    return formatTypedValue(types_1.getTypedValue(value), context, opts);
}
exports.formatValue = formatValue;
