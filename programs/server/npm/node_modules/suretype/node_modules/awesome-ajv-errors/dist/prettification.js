"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettifyOne = exports.getPrettyError = exports._prettify = exports.prettify = void 0;
const util_1 = require("./util");
const data_path_1 = require("./data-path");
const style_1 = require("./style");
const jsonpos_1 = require("jsonpos");
const big_numbers_1 = require("./big-numbers");
const prettifications_1 = require("./prettifications");
function prettify(validate, opts) {
    if (typeof validate === 'function')
        return _prettify({
            errors: util_1.ensureArray(validate.errors),
            schema: validate.schema,
            data: opts === null || opts === void 0 ? void 0 : opts.data,
            colors: opts === null || opts === void 0 ? void 0 : opts.colors,
        });
    else
        return _prettify(validate);
}
exports.prettify = prettify;
function _prettify(opts) {
    const errors = mergeTypeErrors(util_1.ensureArray(opts.errors));
    if (errors.length === 0)
        return style_1.style.good("No errors", {
            colors: style_1.ensureColorUsage(opts.colors),
            dataPath: { orig: '', dotOnly: '', path: [] }
        });
    const parsedJson = jsonpos_1.getAstByObject(opts.data, 2);
    const preparedText = big_numbers_1.prepareText({ maxNumber: errors.length + 1 });
    return errors.map((error, index) => {
        const context = {
            errors: opts.errors,
            schema: opts.schema,
            data: opts.data,
            colors: style_1.ensureColorUsage(opts.colors),
            error,
            dataPath: data_path_1.parseDataPath(error.dataPath),
            parsedJson,
        };
        const errorLines = prettifyOne(context).split("\n");
        if (errors.length === 1)
            return errorLines.join("\n");
        return preparedText.printAsPrefix(index + 1, errorLines, { separator: '  ' })
            .join("\n");
    })
        .join("\n\n");
}
exports._prettify = _prettify;
function getPrettyError(context) {
    const handler = prettifications_1.handlers[context.error.keyword];
    return handler
        ? handler(context)
        : prettifications_1.handlers.unknownError(context);
}
exports.getPrettyError = getPrettyError;
function prettifyOne(context) {
    return style_1.printError(getPrettyError(context));
}
exports.prettifyOne = prettifyOne;
function mergeTypeErrors(errors) {
    const toRemove = new Set();
    errors.filter(error => error.keyword === 'anyOf').forEach(error => {
        error.typeErrors =
            errors
                .filter(typeError => typeError.dataPath === error.dataPath &&
                typeError.keyword === 'type');
        error.typeErrors.forEach(error => { toRemove.add(error); });
    });
    return errors.filter(error => !toRemove.has(error));
}
