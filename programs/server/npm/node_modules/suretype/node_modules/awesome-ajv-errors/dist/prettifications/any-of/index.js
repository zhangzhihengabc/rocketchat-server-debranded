"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettify = void 0;
const types_1 = require("../../types");
const style_1 = require("../../style");
const suggest_1 = require("../../suggest");
const code_1 = require("../../code");
const json_1 = require("../../json");
function prettify(context) {
    const { dataPath, error: { keyword, typeErrors = [] } } = types_1.getTypedContext(context);
    const [prePath, pathExpr, postPath] = style_1.pathDescription(context, 'value');
    const value = json_1.getValueByPath(context);
    const allowedTypes = typeErrors.map(typeError => typeError.params.type);
    const suggestion = suggest_1.suggestTypedValue(value, allowedTypes, context);
    const instead = typeErrors.length === 0
        ? 'unknown'
        : suggest_1.formatSuggestions(allowedTypes.map(value => ({
            value,
            type: 'string',
            isSimple: true,
        })), context, { untyped: true });
    const title = style_1.style.title(`The type of the ${prePath}`, context) +
        pathExpr +
        style_1.style.title(`${postPath} should `, context) +
        (keyword === 'not'
            ?
                style_1.style.title('NOT be ', context) +
                    style_1.style.pathDescription(types_1.getTypedValue(value).type, context)
            :
                style_1.style.title(`be `, context) +
                    instead);
    const codeFrame = code_1.printCode(keyword === 'not'
        ? 'change this type'
        : `change this value` +
            (!suggestion ? '' :
                ' to ' + suggestion.value +
                    ' (as ' + style_1.style.pathDescription(suggestion.type, context) +
                    ') perhaps?'), context.parsedJson, { dataPath: dataPath.dotOnly, markIdentifier: false });
    return { title, codeFrame };
}
exports.prettify = prettify;
