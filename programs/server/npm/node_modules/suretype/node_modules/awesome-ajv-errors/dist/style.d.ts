import { PrettifyContext, PrettificationCore, PrettyResult, TypedValue, SimpleValueType } from "./types";
import { DataPath } from "./data-path";
declare const styles: {
    title: import("chalk").Chalk;
    pathDescription: import("chalk").Chalk;
    expr: import("chalk").Chalk;
    type: import("chalk").Chalk;
    string: import("chalk").Chalk;
    number: import("chalk").Chalk;
    primitive: import("chalk").Chalk;
    dimmed: import("chalk").Chalk;
    good: import("chalk").Chalk;
    operator: import("chalk").Chalk;
    link: import("chalk").Chalk;
    regex: import("chalk").Chalk;
};
export declare type StyleContext = Omit<PrettifyContext, keyof PrettificationCore | 'error' | 'parsedJson'>;
declare type Style = {
    [key in keyof typeof styles]: (text: string, context: StyleContext) => string;
};
export declare const style: Style;
export declare function link(title: string, url: string, context: StyleContext): string;
export declare const support: boolean;
export declare const ensureColorUsage: (useColors?: boolean | undefined) => boolean;
export declare function formatDataPath(dataPath: DataPath, context: PrettifyContext): string;
export declare function pathDescription(context: PrettifyContext, pathType: string): [string, string, string];
export interface PrintEnumOptions {
    indent?: number;
    bullet?: boolean;
}
export declare function printEnum(lines: Array<string>, { indent, bullet }?: PrintEnumOptions): string[];
export declare function printError(result: PrettyResult): string;
export interface FormatTypedValueOptions {
    untyped?: boolean;
    includeType?: boolean;
}
export declare function formatTypedValue(typedValue: TypedValue, context: PrettifyContext, { untyped, includeType, }?: FormatTypedValueOptions): string;
export declare function formatValue(value: SimpleValueType, context: PrettifyContext, opts?: FormatTypedValueOptions): string;
export {};
