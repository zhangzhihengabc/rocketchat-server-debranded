"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettify = void 0;
const types_1 = require("../../types");
const style_1 = require("../../style");
const code_1 = require("../../code");
const suggest_1 = require("../../suggest");
const json_1 = require("../../json");
function prettify(context) {
    const { dataPath, error: { params: { allowedValue, allowedValues } } } = types_1.getTypedContext(context);
    const options = allowedValues !== null && allowedValues !== void 0 ? allowedValues : [allowedValue];
    const value = json_1.getValueByPath(context);
    const [prePath, pathExpr, postPath] = style_1.pathDescription(context, 'value');
    const suggestionResult = suggest_1.suggest(value, options, { referenceValue: value });
    const isConst = options.length === 1 &&
        (options[0] === null || typeof options[0] !== 'object');
    const title = style_1.style.title(`The ${prePath}`, context) +
        pathExpr +
        style_1.style.title(`${postPath} cannot be `, context) +
        style_1.formatValue(value, context) +
        suggest_1.formatSuggestions(suggestionResult, context, { isSuggestion: true, isConst });
    const codeFrame = code_1.printCode('replace this with ' +
        (isConst
            ? style_1.formatTypedValue(types_1.getTypedValue(options[0]), context)
            : ('an allowed value' +
                (!suggestionResult.best ? '' :
                    ' e.g. ' + suggest_1.formatBestSuggestion(suggestionResult, context)))), context.parsedJson, { dataPath: dataPath.dotOnly, markIdentifier: false });
    return { title, codeFrame };
}
exports.prettify = prettify;
