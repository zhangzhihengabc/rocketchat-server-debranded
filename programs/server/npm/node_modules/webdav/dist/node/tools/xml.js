"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGenericResponse = exports.generateLockXML = void 0;
var fast_xml_parser_1 = require("fast-xml-parser");
function generateLockXML(ownerHREF) {
    return getBuilder().build(namespace({
        lockinfo: {
            "@_xmlns:d": "DAV:",
            lockscope: {
                exclusive: {}
            },
            locktype: {
                write: {}
            },
            owner: {
                href: ownerHREF
            }
        }
    }, "d"));
}
exports.generateLockXML = generateLockXML;
function getBuilder() {
    return new fast_xml_parser_1.XMLBuilder({
        attributeNamePrefix: "@_",
        format: true,
        ignoreAttributes: false,
        suppressEmptyNode: true
    });
}
function getParser() {
    return new fast_xml_parser_1.XMLParser({
        removeNSPrefix: true,
        parseAttributeValue: true,
        parseTagValue: true
    });
}
function namespace(obj, ns) {
    var copy = __assign({}, obj);
    for (var key in copy) {
        if (!copy.hasOwnProperty(key)) {
            continue;
        }
        if (copy[key] && typeof copy[key] === "object" && key.indexOf(":") === -1) {
            copy["".concat(ns, ":").concat(key)] = namespace(copy[key], ns);
            delete copy[key];
        }
        else if (/^@_/.test(key) === false) {
            copy["".concat(ns, ":").concat(key)] = copy[key];
            delete copy[key];
        }
    }
    return copy;
}
function parseGenericResponse(xml) {
    return getParser().parse(xml);
}
exports.parseGenericResponse = parseGenericResponse;
