)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/EmojiPickerContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nimport type { EmojiByCategory } from '../../app/emoji/client';\n\ntype EmojiPickerContextValue = {\n\topen: (ref: Element, callback: (emoji: string) => void) => void;\n\tisOpen: boolean;\n\tclose: () => void;\n\temojiToPreview: { emoji: string; name: string } | null;\n\thandlePreview: (emoji: string, name: string) => void;\n\thandleRemovePreview: () => void;\n\taddRecentEmoji: (emoji: string) => void;\n\tgetEmojiListsByCategory: () => EmojiByCategory[];\n\trecentEmojis: string[];\n\tsetRecentEmojis: (emoji: string[]) => void;\n\tactualTone: number;\n\tcurrentCategory: string;\n\tsetCurrentCategory: (category: string) => void;\n\tcustomItemsLimit: number;\n\tsetCustomItemsLimit: (limit: number) => void;\n\tsetActualTone: (tone: number) => void;\n\tquickReactions: { emoji: string; image: string }[];\n};\n\nexport const EmojiPickerContext = createContext<EmojiPickerContextValue | undefined>(undefined);\nconst useEmojiPickerContext = (): EmojiPickerContextValue => {\n\tconst context = useContext(EmojiPickerContext);\n\tif (!context) {\n\t\tthrow new Error('Must be running in EmojiPicker Context');\n\t}\n\n\treturn context;\n};\n\nexport const useEmojiPicker = () => ({\n\topen: useEmojiPickerContext().open,\n\tisOpen: useEmojiPickerContext().isOpen,\n\tclose: useEmojiPickerContext().close,\n});\n\nexport const usePreviewEmoji = () => ({\n\temojiToPreview: useEmojiPickerContext().emojiToPreview,\n\thandlePreview: useEmojiPickerContext().handlePreview,\n\thandleRemovePreview: useEmojiPickerContext().handleRemovePreview,\n});\n\nexport const useEmojiPickerData = () => {\n\tconst {\n\t\tactualTone,\n\t\taddRecentEmoji,\n\t\tcurrentCategory,\n\t\tcustomItemsLimit,\n\t\tgetEmojiListsByCategory,\n\t\tquickReactions,\n\t\trecentEmojis,\n\t\tsetActualTone,\n\t\tsetCurrentCategory,\n\t\tsetCustomItemsLimit,\n\t\tsetRecentEmojis,\n\t} = useEmojiPickerContext();\n\n\treturn {\n\t\taddRecentEmoji,\n\t\tgetEmojiListsByCategory,\n\t\trecentEmojis,\n\t\tsetRecentEmojis,\n\t\tactualTone,\n\t\tcurrentCategory,\n\t\tsetCurrentCategory,\n\t\tcustomItemsLimit,\n\t\tsetCustomItemsLimit,\n\t\tsetActualTone,\n\t\tquickReactions,\n\t};\n};\n",null],"names":["module","export","EmojiPickerContext","useEmojiPicker","usePreviewEmoji","useEmojiPickerData","createContext","useContext","undefined","useEmojiPickerContext","context","Error","open","isOpen","close","emojiToPreview","handlePreview","handleRemovePreview","_useEmojiPickerContex","actualTone","addRecentEmoji","currentCategory","customItemsLimit","getEmojiListsByCategory","quickReactions","recentEmojis","setActualTone","setCurrentCategory","setCustomItemsLimit","setRecentEmojis"],"mappings":"uBAAAA,EAAOC,MAAE,CAAA,CAAAC,mBAAyB,WAAQ,OAAQA,CAAA,EAAAC,eAAAA,WAAA,OAAAA,CAAA,EAAAC,gBAAAA,WAAA,OAAAA,CAAA,EAAAC,mBAAAA,WAAA,OAAAA,CAAA,CAAA,GAAAL,EAAAA,IAAAA,CAAAA,QAAAA,CAAAM,cAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAwB3C,IAxB2CD,EAAAC,EAwBrCL,EAAqBI,EAAmDE,KAAAA,GAC/EC,EAAwB,WAC7B,IAAMC,EAAUH,EAAWL,GAC3B,GAAI,CAACQ,EACJ,MAAM,AAAIC,MAAM,0CAGjB,OAAOD,CACR,EAEaP,EAAiB,WAAA,MAAO,CACpCS,KAAMH,IAAwBG,IAAI,CAClCC,OAAQJ,IAAwBI,MAAM,CACtCC,MAAOL,IAAwBK,KAAAA,CAC/B,EAEYV,EAAkB,WAAA,MAAO,CACrCW,eAAgBN,IAAwBM,cAAc,CACtDC,cAAeP,IAAwBO,aAAa,CACpDC,oBAAqBR,IAAwBQ,mBAAAA,CAC7C,EAEYZ,EAAqB,WACjC,IAAAa,EAYIT,IAXHU,EAAUD,EAAVC,UAAU,CACVC,EAAcF,EAAdE,cAAc,CACdC,EAAeH,EAAfG,eAAe,CACfC,EAAgBJ,EAAhBI,gBAAgB,CAChBC,EAAuBL,EAAvBK,uBAAuB,CACvBC,EAAcN,EAAdM,cAAc,CACdC,EAAYP,EAAZO,YAAY,CACZC,EAAaR,EAAbQ,aAAa,CACbC,EAAkBT,EAAlBS,kBAAkB,CAClBC,EAAmBV,EAAnBU,mBAAmB,CAIpB,MAAO,CACNR,eAAAA,EACAG,wBAAAA,EACAE,aAAAA,EACAI,gBAPeX,EAAfW,eAAe,CAQfV,WAAAA,EACAE,gBAAAA,EACAM,mBAAAA,EACAL,iBAAAA,EACAM,oBAAAA,EACAF,cAAAA,EACAF,eAAAA,EAEF"}