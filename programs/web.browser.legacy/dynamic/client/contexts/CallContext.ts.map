)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/contexts/CallContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\nimport type { Device } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useHasLicenseModule } from '../../ee/client/hooks/useHasLicenseModule';\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextReady = {\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\tnetworkStatus: 'online' | 'offline';\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\n\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\n\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\n\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\n\tregister: () => void;\n\tunregister: () => void;\n};\n\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n\terror: Error | unknown;\n};\n\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n\toutBoundCallsAllowed: undefined,\n\toutBoundCallsEnabled: undefined,\n\toutBoundCallsEnabledForUser: undefined,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\tconst { voipClient } = context;\n\n\tconst [subscribe, getSnapshot] = useMemo(() => {\n\t\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\n\n\t\tconst callback = (cb: () => void): (() => void) =>\n\t\t\tvoipClient.on('stateChanged', () => {\n\t\t\t\tcaller = voipClient.callerInfo;\n\t\t\t\tcb();\n\t\t\t});\n\n\t\tconst getSnapshot = (): VoIpCallerInfo => caller;\n\t\treturn [callback, getSnapshot];\n\t}, [voipClient]);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueName only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioOutputDevice;\n};\n\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioInputDevice;\n};\n\nexport const useCallRegisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.register;\n};\n\nexport const useCallUnregisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.unregister;\n};\n\nexport const useVoipOutboundStates = (): {\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n} => {\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst callerInfo = useCallerInfo();\n\n\treturn {\n\t\toutBoundCallsAllowed: isEnterprise,\n\t\toutBoundCallsEnabled: isEnterprise,\n\t\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\n\t};\n};\n\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n\t}\n\n\treturn context.networkStatus;\n};\n",null],"names":["module","link","default","_slicedToArray","export","CallContext","useIsVoipEnterprise","useIsCallEnabled","useIsCallReady","useIsCallError","useCallActions","useCallerInfo","useCallCreateRoom","useCallOpenRoom","useCallClient","useQueueName","useQueueCounter","useOpenedRoomInfo","useChangeAudioOutputDevice","useChangeAudioInputDevice","useCallRegisterClient","useCallUnregisterClient","useVoipOutboundStates","useVoipNetworkStatus","createContext","useContext","useMemo","useSyncExternalStore","useHasLicenseModule","isCallContextReady","context","ready","enabled","outBoundCallsAllowed","undefined","outBoundCallsEnabled","outBoundCallsEnabledForUser","_useContext","Boolean","_useContext2","error","Error","actions","voipClient","_useMemo2","caller","callerInfo","cb","on","createRoom","openRoom","queueName","queueCounter","openedRoomInfo","changeAudioOutputDevice","changeAudioInputDevice","register","unregister","isEnterprise","includes","state","networkStatus"],"mappings":"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"}