)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/hooks/lists/useStreamUpdatesForMessageList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { useStream } from '@rocket.chat/ui-contexts';\nimport { useEffect } from 'react';\n\nimport type { MessageList } from '../../lib/lists/MessageList';\nimport type { FieldExpression, Query } from '../../lib/minimongo';\nimport { createFilterFromQuery } from '../../lib/minimongo';\n\ntype NotifyRoomRidDeleteMessageBulkEvent = {\n\trid: IMessage['rid'];\n\texcludePinned: boolean;\n\tignoreDiscussion: boolean;\n\tts: FieldExpression<Date>;\n\tusers: string[];\n};\n\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\n\tconst query: Query<IMessage> = { ts: params.ts };\n\n\tif (params.excludePinned) {\n\t\tquery.pinned = { $ne: true };\n\t}\n\n\tif (params.ignoreDiscussion) {\n\t\tquery.drid = { $exists: false };\n\t}\n\tif (params.users?.length) {\n\t\tquery['u.username'] = { $in: params.users };\n\t}\n\n\treturn createFilterFromQuery<IMessage>(query);\n};\n\nexport const useStreamUpdatesForMessageList = (messageList: MessageList, uid: IUser['_id'] | null, rid: IRoom['_id'] | null): void => {\n\tconst subscribeToRoomMessages = useStream('room-messages');\n\tconst subscribeToNotifyRoom = useStream('notify-room');\n\n\tuseEffect(() => {\n\t\tif (!uid || !rid) {\n\t\t\tmessageList.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages(rid, (message) => {\n\t\t\tmessageList.handle(message);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom(`${rid}/deleteMessage`, ({ _id: mid }) => {\n\t\t\tmessageList.remove(mid);\n\t\t});\n\n\t\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(`${rid}/deleteMessageBulk`, (params) => {\n\t\t\tconst matchDeleteCriteria = createDeleteCriteria(params);\n\t\t\tmessageList.prune(matchDeleteCriteria);\n\t\t});\n\n\t\treturn (): void => {\n\t\t\tunsubscribeFromRoomMessages();\n\t\t\tunsubscribeFromDeleteMessage();\n\t\t\tunsubscribeFromDeleteMessageBulk();\n\t\t};\n\t}, [subscribeToRoomMessages, subscribeToNotifyRoom, uid, rid, messageList]);\n};\n",null],"names":["module","export","useStreamUpdatesForMessageList","useStream","useEffect","createFilterFromQuery","createDeleteCriteria","params","_params$users","query","ts","excludePinned","pinned","$ne","ignoreDiscussion","drid","$exists","users","length","$in","messageList","uid","rid","subscribeToRoomMessages","subscribeToNotifyRoom","clear","unsubscribeFromRoomMessages","message","handle","unsubscribeFromDeleteMessage","_ref","mid","_id","remove","unsubscribeFromDeleteMessageBulk","matchDeleteCriteria","prune"],"mappings":"uBACAA,EAAOC,MAAE,CAAA,CAAAC,+BAAiB,WAA2B,OAAAA,CAAA,CAAA,GAAAF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAG,UAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAH,EAAAA,IAAAA,CAAAA,QAAAA,CAAAI,UAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAJ,EAAAA,IAAAA,CAAAA,sBAAAA,CAAAK,sBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAerD,IAfqDF,EAAAC,EAAAC,EAe/CC,EAAuB,SAACC,CAA2C,EACxE,IAD8GC,EACxGC,EAAyB,CAAEC,GAAIH,EAAOG,EAAAA,AAAE,EAa9C,OAXIH,EAAOI,aAAa,EACvBF,CAAAA,EAAMG,MAAM,CAAG,CAAEC,IAAK,CAAA,CAAI,CAAA,EAGvBN,EAAOO,gBAAgB,EAC1BL,CAAAA,EAAMM,IAAI,CAAG,CAAEC,QAAS,CAAA,CAAK,CAAA,EAEd,OAAhBR,CAAAA,EAAID,EAAOU,KAAK,AAALA,GAAKT,AAAA,KAAA,IAAAA,GAAZA,EAAcU,MAAM,EACvBT,CAAAA,CAAK,CAAC,aAAa,CAAG,CAAEU,IAAKZ,EAAOU,KAAAA,AAAK,CAAA,EAGnCZ,EAAgCI,EACxC,EAEaP,EAAiC,SAACkB,CAAwB,CAAEC,CAAwB,CAAEC,CAAwB,EAC1H,IAAMC,EAA0BpB,EAAU,iBACpCqB,EAAwBrB,EAAU,eAExCC,EAAU,WACT,GAAI,CAACiB,GAAO,CAACC,EAAK,CACjBF,EAAYK,KAAK,GACjB,OAGD,IAAMC,EAA8BH,EAAwBD,EAAK,SAACK,CAAO,EACxEP,EAAYQ,MAAM,CAACD,EACpB,GAEME,EAA+BL,EAAyBF,EAAG,iBAAkB,SAAAQ,CAAA,EAAiB,IAATC,EAAGD,EAARE,GAAG,CACxFZ,EAAYa,MAAM,CAACF,EACpB,GAEMG,EAAmCV,EAAyBF,EAAG,qBAAsB,SAACf,CAAM,EACjG,IAAM4B,EAAsB7B,EAAqBC,GACjDa,EAAYgB,KAAK,CAACD,EACnB,GAEA,OAAO,WACNT,IACAG,IACAK,GACD,CACD,EAAG,CAACX,EAAyBC,EAAuBH,EAAKC,EAAKF,EAAY,CAC3E"}