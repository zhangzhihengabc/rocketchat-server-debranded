)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IWebdavNode, IWebdavAccountIntegration } from '@rocket.chat/core-typings';\nimport type { SelectOption } from '@rocket.chat/fuselage';\nimport { Modal, Box, IconButton, Select } from '@rocket.chat/fuselage';\nimport { useMutableCallback, useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport { useMethod, useToastMessageDispatch, useTranslation, useSetModal } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, MouseEvent } from 'react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { fileUploadIsValidContentType } from '../../../../../app/utils/client';\nimport FilterByText from '../../../../components/FilterByText';\nimport { useSort } from '../../../../components/GenericTable/hooks/useSort';\nimport FileUploadModal from '../../modals/FileUploadModal';\nimport FilePickerBreadcrumbs from './FilePickerBreadcrumbs';\nimport WebdavFilePickerGrid from './WebdavFilePickerGrid';\nimport WebdavFilePickerTable from './WebdavFilePickerTable';\nimport { sortWebdavNodes } from './lib/sortWebdavNodes';\n\nexport type WebdavSortOptions = 'name' | 'size' | 'dataModified';\n\ntype WebdavFilePickerModalProps = {\n\tonUpload: (file: File, description?: string) => Promise<void>;\n\tonClose: () => void;\n\taccount: IWebdavAccountIntegration;\n};\n\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst [currentFolder, setCurrentFolder] = useState('/');\n\tconst [parentFolders, setParentFolders] = useState<string[]>([]);\n\tconst [webdavNodes, setWebdavNodes] = useState<IWebdavNode[]>([]);\n\tconst [filterText, setFilterText] = useState('');\n\tconst debouncedFilter = useDebouncedValue(filterText, 500);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n\t\tif (!Array.isArray(nodes) || !nodes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst promises = nodes\n\t\t\t.map((node, index) => {\n\t\t\t\tif (node.type !== 'file') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn getWebdavFilePreview(accountId, node.filename)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res?.data) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst imgURL = URL.createObjectURL(blob);\n\t\t\t\t\t\tnodes[index].preview = imgURL;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => e);\n\t\t\t})\n\t\t\t.filter(Boolean);\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => nodes)\n\t\t\t.catch((e) => e);\n\t});\n\n\tconst handleFilterNodes = useCallback(\n\t\t(webdavNodes: IWebdavNode[]): void => {\n\t\t\tconst regex = new RegExp(`\\\\b${debouncedFilter}`, 'i');\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\treturn setWebdavNodes(filteredNodes);\n\t\t},\n\t\t[debouncedFilter],\n\t);\n\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\tonClose();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst parentFolders = currentFolder.split('/').filter((s) => s);\n\n\t\t// determine parent directory to go to\n\t\tlet targetFolder = '/';\n\t\tfor (let i = 0; i <= Number(index); i++) {\n\t\t\ttargetFolder += parentFolders[i];\n\t\t\ttargetFolder += '/';\n\t\t}\n\t\tsetCurrentFolder(targetFolder);\n\t};\n\n\tconst handleBack = (): void => {\n\t\tlet newCurrentFolder = currentFolder;\n\t\t// determine parent directory to go back\n\t\tlet parentFolder = '/';\n\t\tif (newCurrentFolder && newCurrentFolder !== '/') {\n\t\t\tif (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n\t\t\t\tnewCurrentFolder = newCurrentFolder.slice(0, -1);\n\t\t\t}\n\t\t\tparentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n\t\t}\n\t\tsetCurrentFolder(parentFolder);\n\t};\n\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {\n\t\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tonClose();\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await getFileFromWebdav(account._id, webdavNode);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\n\t\t\tsetModal(\n\t\t\t\t<FileUploadModal\n\t\t\t\t\tfileName={webdavNode.basename}\n\t\t\t\t\tonSubmit={(_, description): Promise<void> => uploadFile(file, description)}\n\t\t\t\t\tfile={file}\n\t\t\t\t\tonClose={(): void => setModal(null)}\n\t\t\t\t\tinvalidContentType={Boolean(file.type && !fileUploadIsValidContentType(file.type))}\n\t\t\t\t/>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\thandleGetWebdavFileList();\n\t}, [handleGetWebdavFileList]);\n\n\tuseEffect(() => {\n\t\tsetParentFolders(currentFolder?.split('/').filter((s) => s) || []);\n\t}, [currentFolder]);\n\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>\n\t\t\t\t<Modal.Close title={t('Close')} onClick={onClose} />\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Box display='flex' justifyContent='space-between'>\n\t\t\t\t\t<FilePickerBreadcrumbs parentFolders={parentFolders} handleBreadcrumb={handleBreadcrumb} handleBack={handleBack} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{typeView === 'list' && <IconButton icon='squares' small title={t('Grid_view')} onClick={(): void => setTypeView('grid')} />}\n\t\t\t\t\t\t{typeView === 'grid' && <IconButton icon='th-list' small title={t('List_view')} onClick={(): void => setTypeView('list')} />}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t\t<FilterByText onChange={({ text }): void => setFilterText(text)}>\n\t\t\t\t\t\t{typeView === 'grid' && (\n\t\t\t\t\t\t\t<Select value={sortBy} onChange={(value): void => handleSort(value as WebdavSortOptions)} options={options} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FilterByText>\n\t\t\t\t</Box>\n\t\t\t\t{typeView === 'list' && (\n\t\t\t\t\t<WebdavFilePickerTable\n\t\t\t\t\t\twebdavNodes={webdavNodes}\n\t\t\t\t\t\tsortBy={sortBy}\n\t\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\t\tonSort={handleSort}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{typeView === 'grid' && <WebdavFilePickerGrid webdavNodes={webdavNodes} onNodeClick={handleNodeClick} isLoading={isLoading} />}\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Footer />\n\t\t</Modal>\n\t);\n};\n\nexport default WebdavFilePickerModal;\n",null],"names":["_regeneratorRuntime","_slicedToArray","Modal","Box","IconButton","Select","useMutableCallback","useDebouncedValue","useMethod","useToastMessageDispatch","useTranslation","useSetModal","React","useState","useEffect","useCallback","fileUploadIsValidContentType","FilterByText","useSort","FileUploadModal","FilePickerBreadcrumbs","WebdavFilePickerGrid","WebdavFilePickerTable","sortWebdavNodes","module","link","default","v","exportDefault","_ref","onUpload","onClose","account","t","setModal","getWebdavFilePreview","getWebdavFileList","getFileFromWebdav","dispatchToastMessage","_useState2","typeView","setTypeView","_useSort","sortBy","sortDirection","setSort","_useState4","currentFolder","setCurrentFolder","_useState6","parentFolders","setParentFolders","_useState8","webdavNodes","setWebdavNodes","_useState10","filterText","setFilterText","debouncedFilter","_useState12","isLoading","setIsLoading","showFilePreviews","accountId","nodes","promises","async","_context","prev","next","Array","isArray","length","abrupt","map","node","index","type","filename","then","res","data","blob","Blob","imgURL","URL","createObjectURL","preview","catch","e","filter","Boolean","Promise","all","stop","handleFilterNodes","regex","RegExp","_ref2","basename","match","handleGetWebdavFileList","result","_result","nodesWithPreviews","_context2","awrap","_id","sent","t0","message","finish","handleNodeClick","webdavNode","handleUpload","uploadFile","file","_context4","_callee3","description","_callee3$","_context3","_await$getFileFromWeb","File","mime","createElement","fileName","onSubmit","_","invalidContentType","split","s","handleSort","Header","Title","name","Close","title","onClick","Content","display","justifyContent","handleBreadcrumb","currentTarget","dataset","targetFolder","i","Number","handleBack","newCurrentFolder","parentFolder","slice","substr","lastIndexOf","icon","small","flexDirection","onChange","_ref3","text","value","options","onSort","onNodeClick","Footer"],"mappings":"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"}