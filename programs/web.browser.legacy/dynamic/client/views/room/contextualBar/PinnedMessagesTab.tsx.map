)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/contextualBar/PinnedMessagesTab.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport { useEndpoint, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport type { ReactElement } from 'react';\nimport React from 'react';\n\nimport { mapMessageFromApi } from '../../../lib/utils/mapMessageFromApi';\nimport { useRoom } from '../contexts/RoomContext';\nimport MessageListTab from './MessageListTab';\n\nconst PinnedMessagesTab = (): ReactElement => {\n\tconst getPinnedMessages = useEndpoint('GET', '/v1/chat.getPinnedMessages');\n\n\tconst room = useRoom();\n\n\tconst pinnedMessagesQueryResult = useQuery(['rooms', room._id, 'pinned-messages'] as const, async () => {\n\t\tconst messages: IMessage[] = [];\n\n\t\tfor (\n\t\t\tlet offset = 0, result = await getPinnedMessages({ roomId: room._id, offset: 0 });\n\t\t\tresult.count > 0;\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\toffset += result.count, result = await getPinnedMessages({ roomId: room._id, offset })\n\t\t) {\n\t\t\tmessages.push(...result.messages.map(mapMessageFromApi));\n\t\t}\n\n\t\treturn messages;\n\t});\n\n\tconst t = useTranslation();\n\n\treturn (\n\t\t<MessageListTab\n\t\t\ticonName='pin'\n\t\t\ttitle={t('Pinned_Messages')}\n\t\t\temptyResultMessage={t('No_pinned_messages')}\n\t\t\tcontext='pinned'\n\t\t\tqueryResult={pinnedMessagesQueryResult}\n\t\t/>\n\t);\n};\n\nexport default PinnedMessagesTab;\n",null],"names":["_regeneratorRuntime","_toConsumableArray","useEndpoint","useTranslation","useQuery","React","mapMessageFromApi","useRoom","MessageListTab","module","default","v","link","exportDefault","getPinnedMessages","room","pinnedMessagesQueryResult","_id","messages","offset","result","async","_context","prev","next","awrap","roomId","sent","count","push","apply","map","abrupt","stop","Promise","t","createElement","iconName","title","emptyResultMessage","context","queryResult"],"mappings":"uBAUA,IATAA,EAAuEC,EAAvEC,EAASC,EAA8DC,EAAAC,EAAAC,EAAAC,EAAAC,EAAjDC,EAAAA,IAAAA,CAAc,6BAAQ,CAAAC,QAA2B,SAAAC,CAAA,EAAAX,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAC,QAAAA,SAAAA,CAAAA,EAAAT,EAAAA,CAAA,CAAA,EAAA,GAAjDQ,EAAgBG,IAAAA,CAAAA,2BAAgC,CAACV,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAL,SAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,QAAAA,CAAA,QAAA,SAAAE,CAAA,EAAAN,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAH,kBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,0BAAAA,CAAAF,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,mBAAAA,CAAA,QAAA,SAAAE,CAAA,EAAAH,EAAAA,CAAA,CAAA,EAAA,GAAvEC,EAAOI,aAAa,CASM,WACzB,IAAMC,EAAoBZ,EAAY,MAAO,8BAEvCa,EAAOR,IAEPS,EAA4BZ,EAAS,CAAC,QAASW,EAAKE,GAAG,CAAE,kBAA2B,CAAE,WAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAApB,EAAAqB,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAI5E,OAHTN,EAAuB,EAAE,CAG1BC,EAAS,EAACG,EAAAE,IAAA,CAAA,EAAAxB,EAAAyB,KAAA,CAAiBX,EAAkB,CAAEY,OAAQX,EAAKE,GAAG,CAAEE,OAAQ,CAAC,GAAG,MAAA,EAAjEC,EAAME,EAAAK,IAAA,MAAA,EAAA,GAAA,CACtBP,CAAAA,EAAOQ,KAAK,CAAG,CAAA,EAAC,CAAAN,EAAAE,IAAA,CAAA,GAAA,KAAA,CAIhBN,EAASW,IAAI,CAAAC,KAAA,CAAbZ,EAAQjB,EAASmB,EAAOF,QAAQ,CAACa,GAAG,CAACzB,IAAoB,MAAA,EAFnC,OAAtBa,GAAUC,EAAOQ,KAAK,CAAAN,EAAAE,IAAA,CAAA,GAAAxB,EAAAyB,KAAA,CAAiBX,EAAkB,CAAEY,OAAQX,EAAKE,GAAG,CAAEE,OAAAA,CAAM,GAAG,MAAA,GAA9DC,EAAME,EAAAK,IAAA,CAAAL,EAAAE,IAAA,CAAA,EAAA,KAAA,MAAA,GAAA,OAAAF,EAAAU,MAAA,CAAA,SAKxBd,EAAQ,MAAA,GAAA,IAAA,MAAA,OAAAI,EAAAW,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,GAGVC,EAAIhC,IAEV,OACCE,EAAA+B,aAAA,CAAC5B,EAAc,CACd6B,SAAS,MACTC,MAAOH,EAAE,mBACTI,mBAAoBJ,EAAE,sBACtBK,QAAQ,SACRC,YAAazB,CAA0B,EAG1C"}