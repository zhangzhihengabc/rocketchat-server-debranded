)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/MessageList/MessageList.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { isThreadMessage } from '@rocket.chat/core-typings';\nimport { MessageDivider } from '@rocket.chat/fuselage';\nimport { useSetting, useTranslation, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, ComponentProps } from 'react';\nimport React, { Fragment, memo } from 'react';\n\nimport { MessageTypes } from '../../../../app/ui-utils/client';\nimport RoomMessage from '../../../components/message/variants/RoomMessage';\nimport SystemMessage from '../../../components/message/variants/SystemMessage';\nimport ThreadMessagePreview from '../../../components/message/variants/ThreadMessagePreview';\nimport { useFormatDate } from '../../../hooks/useFormatDate';\nimport { useRoomSubscription } from '../contexts/RoomContext';\nimport { useFirstUnreadMessageId } from '../hooks/useFirstUnreadMessageId';\nimport { SelectedMessagesProvider } from '../providers/SelectedMessagesProvider';\nimport { useMessages } from './hooks/useMessages';\nimport { isMessageNewDay } from './lib/isMessageNewDay';\nimport { isMessageSequential } from './lib/isMessageSequential';\nimport MessageListProvider from './providers/MessageListProvider';\n\ntype MessageListProps = {\n\trid: IRoom['_id'];\n\tscrollMessageList: ComponentProps<typeof MessageListProvider>['scrollMessageList'];\n};\n\nexport const MessageList = ({ rid, scrollMessageList }: MessageListProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst messages = useMessages({ rid });\n\tconst subscription = useRoomSubscription();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst formatDate = useFormatDate();\n\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider scrollMessageList={scrollMessageList}>\n\t\t\t<SelectedMessagesProvider>\n\t\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\t\tconst sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n\n\t\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\n\t\t\t\t\tconst showUnreadDivider = firstUnreadMessageId === message._id;\n\n\t\t\t\t\tconst showDivider = newDay || showUnreadDivider;\n\n\t\t\t\t\tconst shouldShowAsSequential = sequential && !newDay;\n\n\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\tconst visible = !isThreadMessage(message) && !system;\n\n\t\t\t\t\tconst unread = Boolean(subscription?.tunread?.includes(message._id));\n\t\t\t\t\tconst mention = Boolean(subscription?.tunreadUser?.includes(message._id));\n\t\t\t\t\tconst all = Boolean(subscription?.tunreadGroup?.includes(message._id));\n\t\t\t\t\tconst ignoredUser = Boolean(subscription?.ignored?.includes(message.u._id));\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t\t{showDivider && (\n\t\t\t\t\t\t\t\t<MessageDivider unreadLabel={showUnreadDivider ? t('Unread_Messages').toLowerCase() : undefined}>\n\t\t\t\t\t\t\t\t\t{newDay && formatDate(message.ts)}\n\t\t\t\t\t\t\t\t</MessageDivider>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{visible && (\n\t\t\t\t\t\t\t\t<RoomMessage\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\t\tsequential={shouldShowAsSequential}\n\t\t\t\t\t\t\t\t\tunread={unread}\n\t\t\t\t\t\t\t\t\tmention={mention}\n\t\t\t\t\t\t\t\t\tall={all}\n\t\t\t\t\t\t\t\t\tignoredUser={ignoredUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{isThreadMessage(message) && (\n\t\t\t\t\t\t\t\t<ThreadMessagePreview\n\t\t\t\t\t\t\t\t\tdata-mid={message._id}\n\t\t\t\t\t\t\t\t\tdata-tmid={message.tmid}\n\t\t\t\t\t\t\t\t\tdata-unread={showUnreadDivider}\n\t\t\t\t\t\t\t\t\tdata-sequential={sequential}\n\t\t\t\t\t\t\t\t\tsequential={shouldShowAsSequential}\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{system && <SystemMessage showUserAvatar={showUserAvatar} message={message} />}\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</SelectedMessagesProvider>\n\t\t</MessageListProvider>\n\t);\n};\n\nexport default memo(MessageList);\n",null],"names":["module","export","MessageList","isThreadMessage","MessageDivider","useSetting","useTranslation","useUserPreference","v","React","Fragment","memo","MessageTypes","RoomMessage","SystemMessage","ThreadMessagePreview","useFormatDate","useRoomSubscription","useFirstUnreadMessageId","SelectedMessagesProvider","useMessages","isMessageNewDay","isMessageSequential","MessageListProvider","_ref","rid","scrollMessageList","t","messages","subscription","showUserAvatar","messageGroupingPeriod","Number","formatDate","firstUnreadMessageId","createElement","map","message","index","_ref2","_subscription$tunread","_subscription$tunread2","_subscription$tunread3","_subscription$ignored","previous","sequential","newDay","showUnreadDivider","_id","showDivider","shouldShowAsSequential","system","isSystemMessage","visible","unread","Boolean","tunread","includes","mention","tunreadUser","all","tunreadGroup","ignoredUser","ignored","u","key","unreadLabel","toLowerCase","undefined","ts","tmid","exportDefault"],"mappings":"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"}