)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/MessageList/contexts/SelectedMessagesContext.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { createContext, useCallback, useContext } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { selectedMessageStore } from '../../providers/SelectedMessagesProvider';\n\ntype SelectMessageContextValue = {\n\tselectedMessageStore: typeof selectedMessageStore;\n};\n\nexport const SelectedMessageContext = createContext({\n\tselectedMessageStore,\n} as SelectMessageContextValue);\n\nexport const useIsSelectedMessage = (mid: string): boolean => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on(mid, callback),\n\t\t[selectedMessageStore, mid],\n\t);\n\n\tconst getSnapshot = (): boolean => selectedMessageStore.isSelected(mid);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useIsSelecting = (): boolean => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on('toggleIsSelecting', callback),\n\t\t[selectedMessageStore],\n\t);\n\n\tconst getSnapshot = (): boolean => selectedMessageStore.getIsSelecting();\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useToggleSelect = (mid: string): (() => void) => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\treturn useCallback(() => {\n\t\tselectedMessageStore.toggle(mid);\n\t}, [mid, selectedMessageStore]);\n};\n\nexport const useCountSelected = (): number => {\n\tconst { selectedMessageStore } = useContext(SelectedMessageContext);\n\n\tconst subscribe = useCallback(\n\t\t(callback: () => void): (() => void) => selectedMessageStore.on('change', callback),\n\t\t[selectedMessageStore],\n\t);\n\n\tconst getSnapshot = (): number => selectedMessageStore.count();\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n",null],"names":["module","export","SelectedMessageContext","useIsSelectedMessage","useIsSelecting","useToggleSelect","useCountSelected","createContext","useCallback","useContext","useSyncExternalStore","selectedMessageStore","mid","_useContext","callback","on","isSelected","_useContext2","getIsSelecting","_useContext3","toggle","_useContext4","count"],"mappings":"uBAAAA,EAAOC,MAAE,CAAA,CAAAC,uBAA4B,WAAY,OAAMA,CAAQ,EAAAC,qBAAAA,WAAA,OAAAA,CAAA,EAAAC,eAAAA,WAAA,OAAAA,CAAA,EAAAC,gBAAAA,WAAA,OAAAA,CAAA,EAAAC,iBAAAA,WAAA,OAAAA,CAAA,CAAA,GAAAN,EAAAA,IAAAA,CAAAA,QAAAA,CAAAO,cAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAT,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAU,qBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAV,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAW,qBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GASxD,IATwDJ,EAAAC,EAAAC,EAAAC,EAAAC,EASlDT,EAAyBK,EAAc,CACnDI,qBAAAA,IAGYR,EAAuB,SAACS,CAAW,EAC/C,IAAQD,EAAoBE,AAAKJ,EAAWP,GAApCS,oBAAoB,CAS5B,OAAOD,EAPWF,EACjB,SAACM,CAAoB,EAAA,OAAmBH,EAAqBI,EAAE,CAACH,EAAKE,EAAS,EAC9E,CAACH,EAAsBC,EAAI,EAGR,WAAA,OAAeD,EAAqBK,UAAU,CAACJ,EAAI,EAGxE,EAEaR,EAAiB,WAC7B,IAAQO,EAAoBM,AAAKR,EAAWP,GAApCS,oBAAoB,CAS5B,OAAOD,EAPWF,EACjB,SAACM,CAAoB,EAAA,OAAmBH,EAAqBI,EAAE,CAAC,oBAAqBD,EAAS,EAC9F,CAACH,EAAqB,EAGH,WAAA,OAAeA,EAAqBO,cAAc,EAAE,EAGzE,EAEab,EAAkB,SAACO,CAAW,EAC1C,IAAQD,EAAoBQ,AAAKV,EAAWP,GAApCS,oBAAoB,CAC5B,OAAOH,EAAY,WAClBG,EAAqBS,MAAM,CAACR,EAC7B,EAAG,CAACA,EAAKD,EAAqB,CAC/B,EAEaL,EAAmB,WAC/B,IAAQK,EAAoBU,AAAKZ,EAAWP,GAApCS,oBAAoB,CAS5B,OAAOD,EAPWF,EACjB,SAACM,CAAoB,EAAA,OAAmBH,EAAqBI,EAAE,CAAC,SAAUD,EAAS,EACnF,CAACH,EAAqB,EAGH,WAAA,OAAcA,EAAqBW,KAAK,EAAE,EAG/D"}