)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/room/MessageList/hooks/useMessages.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport { useStableArray } from '@rocket.chat/fuselage-hooks';\nimport { useSetting, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { Mongo } from 'meteor/mongo';\nimport { useCallback, useMemo } from 'react';\n\nimport { ChatMessage } from '../../../../../app/models/client';\nimport { useReactiveValue } from '../../../../hooks/useReactiveValue';\nimport { useRoom } from '../../contexts/RoomContext';\n\nconst mergeHideSysMessages = (\n\tsysMesArray1: Array<MessageTypesValues>,\n\tsysMesArray2: Array<MessageTypesValues>,\n): Array<MessageTypesValues> => {\n\treturn Array.from(new Set([...sysMesArray1, ...sysMesArray2]));\n};\n\nexport const useMessages = ({ rid }: { rid: IRoom['_id'] }): IMessage[] => {\n\tconst showThreadsInMainChannel = useUserPreference<boolean>('showThreadsInMainChannel', false);\n\tconst hideSysMesSetting = useSetting<MessageTypesValues[]>('Hide_System_Messages') ?? [];\n\tconst room = useRoom();\n\tconst hideRoomSysMes: Array<MessageTypesValues> = Array.isArray(room.sysMes) ? room.sysMes : [];\n\n\tconst hideSysMessages = useStableArray(mergeHideSysMessages(hideSysMesSetting, hideRoomSysMes));\n\n\tconst query: Mongo.Selector<IMessage> = useMemo(\n\t\t() => ({\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $nin: hideSysMessages },\n\t\t\t...(!showThreadsInMainChannel && {\n\t\t\t\t$or: [{ tmid: { $exists: false } }, { tshow: { $eq: true } }],\n\t\t\t}),\n\t\t}),\n\t\t[rid, hideSysMessages, showThreadsInMainChannel],\n\t);\n\n\treturn useReactiveValue(\n\t\tuseCallback(\n\t\t\t() =>\n\t\t\t\tChatMessage.find(query, {\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tts: 1,\n\t\t\t\t\t},\n\t\t\t\t}).fetch(),\n\t\t\t[query],\n\t\t),\n\t);\n};\n",null],"names":["module","link","default","_objectSpread","_toConsumableArray","export","useMessages","useStableArray","useSetting","useUserPreference","useCallback","useMemo","ChatMessage","useReactiveValue","useRoom","_ref","_useSetting","rid","showThreadsInMainChannel","hideSysMesSetting","room","hideRoomSysMes","Array","isArray","sysMes","hideSysMessages","from","Set","concat","query","_hidden","$ne","t","$nin","$or","tmid","$exists","tshow","$eq","find","sort","ts","fetch"],"mappings":"uBACSA,EAAgBC,IAAAA,CAAAA,uCAAoC,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAAH,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAE,QAAAA,SAAAA,CAAAA,EAAAE,EAAAA,CAAA,CAAA,EAAA,GAA7DJ,EAAOK,MAAE,CAAA,CAAAC,YAAgB,WAAM,OAAAA,CAAA,CAAA,GAA8BN,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAO,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAP,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAQ,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,kBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAT,EAAAA,IAAAA,CAAAA,QAAAA,CAAAU,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAX,EAAAA,IAAAA,CAAAA,mCAAAA,CAAAY,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAZ,EAAAA,IAAAA,CAAAA,qCAAAA,CAAAa,iBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAb,EAAAA,IAAAA,CAAAA,6BAAAA,CAAAc,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAgBtD,IAhBPX,EAA6DC,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAgBhDR,EAAc,SAAAS,CAAA,EAA+C,IAAAC,EAA5CC,EAAGF,EAAHE,GAAG,CAC1BC,EAA2BT,EAA2B,2BAA4B,CAAA,GAClFU,EAAiB,AAA2D,OAA3DH,CAAAA,EAAGR,EAAiC,uBAAsB,GAACQ,AAAA,KAAA,IAAAA,EAAAA,EAAI,EAAE,CAClFI,EAAON,IACPO,EAA4CC,MAAMC,OAAO,CAACH,EAAKI,MAAM,EAAIJ,EAAKI,MAAM,CAAG,EAAE,CAEzFC,EAAkBlB,EATjBe,MAAMI,IAAI,CAAC,IAAIC,IAAG,EAAA,CAAAC,MAAA,CAAAxB,EASmCe,GATlBf,EASqCiB,OAEzEQ,EAAkClB,EACvC,WAAA,OAAAR,EAAA,CACCc,IAAAA,EACAa,QAAS,CAAEC,IAAK,CAAA,CAAI,EACpBC,EAAG,CAAEC,KAAMR,CAAe,CAAE,EACxB,CAACP,GAA4B,CAChCgB,IAAK,CAAC,CAAEC,KAAM,CAAEC,QAAS,CAAA,CAAK,CAAE,EAAI,CAAEC,MAAO,CAAEC,IAAK,CAAA,CAAI,CAAE,EAAE,EAC5D,EAEF,CAACrB,EAAKQ,EAAiBP,EAAyB,EAGjD,OAAOL,EACNH,EACC,WAAA,OACCE,EAAY2B,IAAI,CAACV,EAAO,CACvBW,KAAM,CACLC,GAAI,KAEHC,KAAK,EAAE,EACX,CAACb,EAAM,EAGV"}