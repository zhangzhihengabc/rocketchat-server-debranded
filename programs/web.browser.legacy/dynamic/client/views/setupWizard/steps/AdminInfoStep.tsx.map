)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/setupWizard/steps/AdminInfoStep.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { AdminInfoPage } from '@rocket.chat/onboarding-ui';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { useSetting, useTranslation } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, ComponentProps } from 'react';\nimport React from 'react';\n\nimport { useSetupWizardContext } from '../contexts/SetupWizardContext';\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\nconst usernameBlackList = ['all', 'here', 'admin'].map(toRegExp);\nconst hasBlockedName = (username: string): boolean =>\n\t!!usernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(escapeRegExp(username).trim()));\n\nconst AdminInfoStep = (): ReactElement => {\n\tconst t = useTranslation();\n\tconst regexpForUsernameValidation = useSetting('UTF8_User_Names_Validation');\n\tconst usernameRegExp = new RegExp(`^${regexpForUsernameValidation}$`);\n\n\tconst { currentStep, validateEmail, registerAdminUser, maxSteps } = useSetupWizardContext();\n\n\t// TODO: check if username exists\n\tconst validateUsername = (username: string): boolean | string => {\n\t\tif (!usernameRegExp.test(username) || hasBlockedName(username)) {\n\t\t\treturn t('Invalid_username');\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst handleSubmit: ComponentProps<typeof AdminInfoPage>['onSubmit'] = async (data) => {\n\t\tregisterAdminUser(data);\n\t};\n\n\treturn (\n\t\t<AdminInfoPage\n\t\t\tvalidatePassword={(password): boolean => password.length > 0}\n\t\t\tpasswordRulesHint=''\n\t\t\tvalidateUsername={validateUsername}\n\t\t\tvalidateEmail={validateEmail}\n\t\t\tcurrentStep={currentStep}\n\t\t\tstepCount={maxSteps}\n\t\t\tonSubmit={handleSubmit}\n\t\t/>\n\t);\n};\n\nexport default AdminInfoStep;\n",null],"names":["module","link","default","_regeneratorRuntime","AdminInfoPage","escapeRegExp","useSetting","useTranslation","v","React","useSetupWizardContext","usernameBlackList","map","username","RegExp","trim","exportDefault","t","usernameRegExp","_useSetupWizardContex","currentStep","validateEmail","registerAdminUser","maxSteps","createElement","validatePassword","password","length","passwordRulesHint","validateUsername","test","some","restrictedUsername","stepCount","onSubmit","data","async","_context","prev","next","stop","Promise"],"mappings":"uBAAwBA,EAAMC,IAAA,CAAA,6BAA6B,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAlDH,EAAeC,IAAA,CAAM,6BAA6B,CAAAG,cAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAJ,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAK,aAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAL,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAM,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAP,EAAAA,IAAAA,CAAAA,QAAAA,CAAA,QAAA,SAAAQ,CAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAAT,EAAAA,IAAAA,CAAAA,iCAAAA,CAAAU,sBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAS3D,IATAP,EAAAC,EAA2DC,EAAAC,EAAAC,EAAAE,EAAAC,EASrDC,EAAoB,CAAC,MAAO,OAAQ,QAAQ,CAACC,GAAG,CADrC,SAACC,CAAgB,EAAA,OAAa,AAAIC,OAAM,IAAKT,EAAaQ,GAAUE,IAAI,GAAE,IAAK,IAAI,GARpGf,EAAOgB,aAAE,CAaa,WACrB,IAAMC,EAAIV,IAEJW,EAAiB,AAAIJ,OAAM,IADGR,EAAW,8BACkB,KAEjEa,EAAoET,IAA5DU,EAAWD,EAAXC,WAAW,CAAEC,EAAaF,EAAbE,aAAa,CAAEC,EAAiBH,EAAjBG,iBAAiB,CAAEC,EAAQJ,EAARI,QAAQ,CAe/D,OACCd,EAAAe,aAAA,CAACpB,EAAa,CACbqB,iBAAkB,SAACC,CAAQ,EAAA,OAAcA,EAASC,MAAM,CAAG,CAAC,EAC5DC,kBAAkB,GAClBC,iBAhBuB,SAAChB,CAAgB,QACzC,CAAI,CAAA,CAACK,EAAeY,IAAI,CAACjB,IAX1B,AAAEF,EAAkBgB,MAAM,EAAIhB,EAAkBoB,IAAI,CAAC,SAACC,CAAkB,EAAA,OAAKA,EAAmBF,IAAI,CAACzB,EAW/CQ,GAXsEE,IAAI,GAAG,EAWrE,GACrDE,EAAE,mBAIX,EAWEI,cAAeA,EACfD,YAAaA,EACba,UAAWV,EACXW,SAZqE,SAAOC,CAAI,EAAA,OAAAhC,EAAAiC,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EACjFjB,EAAkBa,EAAM,MAAA,EAAA,IAAA,MAAA,OAAAE,EAAAG,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,CAWA,EAG1B"}