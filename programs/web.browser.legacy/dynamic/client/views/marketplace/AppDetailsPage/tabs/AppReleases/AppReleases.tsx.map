)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/marketplace/AppDetailsPage/tabs/AppReleases/AppReleases.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { App } from '@rocket.chat/core-typings';\nimport { Accordion } from '@rocket.chat/fuselage';\nimport { useEndpoint, useToastMessageDispatch, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport type { ReactElement } from 'react';\nimport React from 'react';\n\nimport AccordionLoading from '../../../AccordionLoading';\nimport AppReleasesItem from './AppReleasesItem';\n\n// TODO: replace useEndpointData\nconst AppReleases = ({ id }: { id: App['id'] }): ReactElement => {\n\tconst getVersions = useEndpoint('GET', '/apps/:id/versions', { id });\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst t = useTranslation();\n\n\tconst { data, isLoading, isFetched } = useQuery(\n\t\t['apps', id, 'versions'],\n\t\tasync () => {\n\t\t\tconst { apps } = await getVersions();\n\n\t\t\tif (apps.length === 0) {\n\t\t\t\tthrow new Error(t('No_results_found'));\n\t\t\t}\n\t\t\treturn apps;\n\t\t},\n\t\t{\n\t\t\tonError: (error) => {\n\t\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\t},\n\t\t},\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Accordion width='100%' alignSelf='center'>\n\t\t\t\t{isLoading && <AccordionLoading />}\n\t\t\t\t{isFetched && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{data?.map((release) => (\n\t\t\t\t\t\t\t<AppReleasesItem release={release} key={release.version} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Accordion>\n\t\t</>\n\t);\n};\n\nexport default AppReleases;\n",null],"names":["_regeneratorRuntime","Accordion","useEndpoint","useToastMessageDispatch","useTranslation","useQuery","React","AccordionLoading","AppReleasesItem","module","link","default","v","exportDefault","_ref","id","getVersions","dispatchToastMessage","t","_useQuery","apps","async","_context","prev","next","awrap","_await$getVersions","sent","length","Error","abrupt","stop","Promise","onError","error","type","message","data","isLoading","isFetched","createElement","Fragment","width","alignSelf","map","release","key","version"],"mappings":"uBAWA,IAVAA,EAAAC,EAAkDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA9BC,EAAMC,IAAA,CAAA,6BAAwB,CAAAC,QAAAA,SAAAA,CAAAA,EAAAX,EAAAA,CAAA,CAAA,EAAA,GAAzCS,EAAWC,IAAA,CAAM,wBAAwB,CAAAT,UAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAQ,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAP,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,wBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,wBAAAA,CAAAJ,SAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,QAAAA,CAAA,QAAA,SAAAG,CAAA,EAAAN,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,4BAAAA,CAAA,QAAA,SAAAG,CAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,oBAAAA,CAAA,QAAA,SAAAG,CAAA,EAAAJ,EAAAA,CAAA,CAAA,EAAA,GAAlDC,EAAOI,aAAa,CAUA,SAAAC,CAAA,EAA4C,IAAzCC,EAAED,EAAFC,EAAE,CAClBC,EAAcd,EAAY,MAAO,qBAAsB,CAAEa,GAAAA,CAAE,GAC3DE,EAAuBd,IACvBe,EAAId,IAEVe,EAAuCd,EACtC,CAAC,OAAQU,EAAI,WAAW,CACxB,WAAA,IAAAK,EAAA,OAAApB,EAAAqB,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAAA,OAAAF,EAAAE,IAAA,CAAA,EAAAxB,EAAAyB,KAAA,CACwBT,IAAa,MAAA,EAAxB,GAAA,AAEQ,IAAhBI,AAFIA,CAAAA,EAAIM,AAAwBJ,EAAAK,IAAA,CAA5BP,IAAI,AAAJA,EAECQ,MAAM,CAAM,CAAAN,EAAAE,IAAA,CAAA,EAAA,KAAA,CAAA,MACd,AAAIK,MAAMX,EAAE,oBAAoB,MAAA,EAAA,OAAAI,EAAAQ,MAAA,CAAA,SAEhCV,EAAI,MAAA,EAAA,IAAA,MAAA,OAAAE,EAAAS,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,EAEZ,CACCC,QAAS,SAACC,CAAK,EACdjB,EAAqB,CAAEkB,KAAM,QAASC,QAASF,CAAK,EACrD,IAbMG,EAAIlB,EAAJkB,IAAI,CAAEC,EAASnB,EAATmB,SAAS,CAAEC,EAASpB,EAAToB,SAAS,CAiBlC,OACCjC,EAAAkC,aAAA,CAAAlC,EAAAmC,QAAA,CAAA,KACCnC,EAAAkC,aAAA,CAACvC,EAAS,CAACyC,MAAM,OAAOC,UAAU,QAAQ,EACxCL,GAAahC,EAAAkC,aAAA,CAACjC,EAAgB,MAC9BgC,GACAjC,EAAAkC,aAAA,CAAAlC,EAAAmC,QAAA,CAAA,KACEJ,MAAAA,EAAI,KAAA,EAAJA,EAAMO,GAAG,CAAC,SAACC,CAAO,EAAA,OAClBvC,EAAAkC,aAAA,CAAChC,EAAe,CAACqC,QAASA,EAASC,IAAKD,EAAQE,OAAAA,AAAQ,EAAG,KAOlE"}