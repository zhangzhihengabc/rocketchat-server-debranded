)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/omnichannel/contactHistory/useHistoryList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { VisitorSearchChatsResult } from '@rocket.chat/rest-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../lib/lists/RecordList';\nimport { mapMessageFromApi } from '../../../lib/utils/mapMessageFromApi';\n\ntype HistoryListOptions = {\n\tfilter: string;\n\troomId: string;\n\tvisitorId: string;\n};\n\nexport const useHistoryList = (\n\toptions: HistoryListOptions,\n): {\n\titemsList: RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>;\n\tinitialItemCount: number;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst [itemsList, setItemsList] = useState(() => new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>());\n\tconst reload = useCallback(() => setItemsList(new RecordList<VisitorSearchChatsResult & { _updatedAt: Date }>()), []);\n\n\tconst getHistory = useEndpoint('GET', '/v1/livechat/visitors.searchChats/room/:roomId/visitor/:visitorId', {\n\t\troomId: options.roomId,\n\t\tvisitorId: options.visitorId,\n\t});\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { history, total } = await getHistory({\n\t\t\t\t...(options.filter && { searchText: options.filter }),\n\t\t\t\tclosedChatsOnly: 'true',\n\t\t\t\tservedChatsOnly: 'true',\n\t\t\t\toffset: start,\n\t\t\t\tcount: end + start,\n\t\t\t});\n\t\t\treturn {\n\t\t\t\titems: history.map((history) => ({\n\t\t\t\t\t...history,\n\t\t\t\t\tts: new Date(history.ts),\n\t\t\t\t\t_updatedAt: new Date(history.ts),\n\t\t\t\t\tclosedAt: history.closedAt ? new Date(history.closedAt) : undefined,\n\t\t\t\t\tservedBy: history.servedBy ? { ...history.servedBy, ts: new Date(history.servedBy.ts) } : undefined,\n\t\t\t\t\tclosingMessage: history.closingMessage ? mapMessageFromApi(history.closingMessage) : undefined,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[getHistory, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(itemsList, fetchData, 25);\n\n\treturn {\n\t\titemsList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n",null],"names":["module","link","default","_regeneratorRuntime","_objectSpread","_slicedToArray","export","useHistoryList","useEndpoint","useCallback","useState","useScrollableRecordList","useComponentDidUpdate","RecordList","mapMessageFromApi","options","_useState2","itemsList","setItemsList","reload","getHistory","roomId","visitorId","_useScrollableRecordL","start","end","_await$getHistory","history","total","async","_context","prev","next","awrap","filter","searchText","closedChatsOnly","servedChatsOnly","offset","count","sent","abrupt","items","map","ts","Date","_updatedAt","closedAt","undefined","servedBy","closingMessage","itemCount","stop","Promise","loadMoreItems","initialItemCount"],"mappings":"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"}