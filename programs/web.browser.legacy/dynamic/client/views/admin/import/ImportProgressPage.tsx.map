)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/import/ImportProgressPage.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ProgressStep } from '@rocket.chat/core-typings';\nimport { Box, Margins, ProgressBar, Throbber } from '@rocket.chat/fuselage';\nimport { useMutableCallback } from '@rocket.chat/fuselage-hooks';\nimport { useToastMessageDispatch, useEndpoint, useTranslation, useStream, useRouter } from '@rocket.chat/ui-contexts';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport React, { useEffect } from 'react';\n\nimport { ImportingStartedStates } from '../../../../app/importer/lib/ImporterProgressStep';\nimport { numberFormat } from '../../../../lib/utils/stringUtils';\nimport Page from '../../../components/Page';\nimport { useErrorHandler } from './useErrorHandler';\n\nconst ImportProgressPage = function ImportProgressPage() {\n\tconst queryClient = useQueryClient();\n\tconst streamer = useStream('importers');\n\tconst t = useTranslation();\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst handleError = useErrorHandler();\n\n\tconst router = useRouter();\n\n\tconst getCurrentImportOperation = useEndpoint('GET', '/v1/getCurrentImportOperation');\n\tconst getImportProgress = useEndpoint('GET', '/v1/getImportProgress');\n\n\tconst mutation = useMutation({\n\t\tmutationFn: async (props: { step: ProgressStep; completed: number; total: number }) => {\n\t\t\tqueryClient.setQueryData<{\n\t\t\t\tstep: ProgressStep;\n\t\t\t\tcompleted: number;\n\t\t\t\ttotal: number;\n\t\t\t}>(['importers', 'progress'], props);\n\t\t},\n\t});\n\n\tconst currentOperation = useQuery(\n\t\t['ImportProgressPage', 'currentOperation'],\n\t\tasync () => {\n\t\t\tconst { operation } = await getCurrentImportOperation();\n\t\t\treturn operation;\n\t\t},\n\t\t{\n\t\t\trefetchInterval: 1000,\n\t\t\tonSuccess: ({ valid, status }) => {\n\t\t\t\tif (!valid) {\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (status === 'importer_done') {\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('Importer_done') });\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!(ImportingStartedStates as string[]).includes(status)) {\n\t\t\t\t\trouter.navigate('/admin/import/prepare');\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: (error) => {\n\t\t\t\thandleError(error, t('Failed_To_Load_Import_Data'));\n\t\t\t\trouter.navigate('/admin/import');\n\t\t\t},\n\t\t},\n\t);\n\n\tconst handleProgressUpdated = useMutableCallback(\n\t\t({ key, step, completed, total }: { key: string; step: ProgressStep; completed: number; total: number }) => {\n\t\t\tif (!currentOperation.isSuccess) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (key.toLowerCase() !== currentOperation.data.importerKey.toLowerCase()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = step[0].toUpperCase() + step.slice(1);\n\n\t\t\tswitch (step) {\n\t\t\t\tcase 'importer_done':\n\t\t\t\t\tt.has(message) &&\n\t\t\t\t\t\tdispatchToastMessage({\n\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\tmessage: t(message),\n\t\t\t\t\t\t});\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'importer_import_failed':\n\t\t\t\tcase 'importer_import_cancelled':\n\t\t\t\t\tt.has(message) && handleError(message);\n\t\t\t\t\trouter.navigate('/admin/import');\n\t\t\t\t\treturn;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmutation.mutate({ step, completed, total });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t);\n\n\tconst progress = useQuery(\n\t\t['importers', 'progress'],\n\t\tasync () => {\n\t\t\tconst { key, step, count: { completed = 0, total = 0 } = {} } = await getImportProgress();\n\t\t\treturn {\n\t\t\t\tkey,\n\t\t\t\tstep,\n\t\t\t\tcompleted,\n\t\t\t\ttotal,\n\t\t\t};\n\t\t},\n\t\t{\n\t\t\tenabled: !!currentOperation.isSuccess,\n\t\t\tonSuccess: (progress) => {\n\t\t\t\tif (!progress) {\n\t\t\t\t\tdispatchToastMessage({ type: 'warning', message: t('Importer_not_in_progress') });\n\t\t\t\t\trouter.navigate('/admin/import/prepare');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// do not use the endpoint data to update the completed progress, leave it to the streamer\n\t\t\t\tif (!(ImportingStartedStates as string[]).includes(progress.step)) {\n\t\t\t\t\thandleProgressUpdated({\n\t\t\t\t\t\tkey: progress.key,\n\t\t\t\t\t\tstep: progress.step,\n\t\t\t\t\t\ttotal: progress.total,\n\t\t\t\t\t\tcompleted: progress.completed,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\tonError: (error) => {\n\t\t\t\thandleError(error, t('Failed_To_Load_Import_Data'));\n\t\t\t\trouter.navigate('/admin/import');\n\t\t\t},\n\t\t},\n\t);\n\n\tuseEffect(() => {\n\t\treturn streamer('progress', (progress) => {\n\t\t\t// There shouldn't be any progress update sending only the rate at this point of the process\n\t\t\tif (!('rate' in progress)) {\n\t\t\t\thandleProgressUpdated({\n\t\t\t\t\tkey: progress.key,\n\t\t\t\t\tstep: progress.step,\n\t\t\t\t\tcompleted: progress.count.completed,\n\t\t\t\t\ttotal: progress.count.total,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}, [handleProgressUpdated, streamer]);\n\n\treturn (\n\t\t<Page>\n\t\t\t<Page.Header title={t('Importing_Data')} />\n\n\t\t\t<Page.ScrollableContentWithShadow>\n\t\t\t\t<Box marginInline='auto' marginBlock='neg-x24' width='full' maxWidth='x580'>\n\t\t\t\t\t<Margins block={24}>\n\t\t\t\t\t\t{currentOperation.isLoading && <Throbber justifyContent='center' />}\n\t\t\t\t\t\t{progress.fetchStatus !== 'idle' && progress.isLoading && <Throbber justifyContent='center' />}\n\n\t\t\t\t\t\t{(currentOperation.isError || progress.isError) && <Box is='p'>{t('Failed_To_Load_Import_Data')}</Box>}\n\t\t\t\t\t\t{progress.isSuccess && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Box is='p' fontScale='p2'>\n\t\t\t\t\t\t\t\t\t{t((progress.data.step[0].toUpperCase() + progress.data.step.slice(1)) as any)}\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t<Box display='flex' justifyContent='center'>\n\t\t\t\t\t\t\t\t\t<ProgressBar percentage={(progress.data.completed / progress.data.total) * 100} />\n\t\t\t\t\t\t\t\t\t<Box is='span' fontScale='p2' mis={24}>\n\t\t\t\t\t\t\t\t\t\t{numberFormat((progress.data.completed / progress.data.total) * 100, 0)}%\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Margins>\n\t\t\t\t</Box>\n\t\t\t</Page.ScrollableContentWithShadow>\n\t\t</Page>\n\t);\n};\n\nexport default ImportProgressPage;\n",null],"names":["_regeneratorRuntime","Box","Margins","ProgressBar","Throbber","useMutableCallback","useToastMessageDispatch","useEndpoint","useTranslation","useStream","useRouter","useQuery","useMutation","useQueryClient","React","useEffect","ImportingStartedStates","numberFormat","Page","useErrorHandler","module","default","v","link","exportDefault","queryClient","streamer","t","dispatchToastMessage","handleError","router","getCurrentImportOperation","getImportProgress","mutation","mutationFn","props","async","_context","prev","next","setQueryData","stop","Promise","currentOperation","operation","_context2","awrap","_await$getCurrentImpo","sent","abrupt","refetchInterval","onSuccess","_ref","valid","status","navigate","type","message","includes","onError","error","handleProgressUpdated","_ref2","key","step","completed","total","isSuccess","toLowerCase","data","importerKey","toUpperCase","slice","has","mutate","progress","_await$getImportProgr","_await$getImportProgr2","_await$getImportProgr3","_await$getImportProgr4","_context3","count","enabled","createElement","Header","title","ScrollableContentWithShadow","marginInline","marginBlock","width","maxWidth","block","isLoading","justifyContent","fetchStatus","isError","is","Fragment","fontScale","display","percentage","mis"],"mappings":"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"}