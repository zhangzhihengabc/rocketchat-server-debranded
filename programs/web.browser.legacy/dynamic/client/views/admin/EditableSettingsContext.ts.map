)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/EditableSettingsContext.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ISettingBase, SectionName, SettingId, GroupId, TabId, ISettingColor } from '@rocket.chat/core-typings';\nimport type { SettingsContextQuery } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nexport type EditableSetting = (ISettingBase | ISettingColor) & {\n\tdisabled: boolean;\n\tchanged: boolean;\n\tinvisible: boolean;\n};\n\ntype EditableSettingsContextQuery = SettingsContextQuery & {\n\tchanged?: boolean;\n};\n\nexport type EditableSettingsContextValue = {\n\treadonly queryEditableSetting: (\n\t\t_id: SettingId,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => EditableSetting | undefined];\n\treadonly queryEditableSettings: (\n\t\tquery: EditableSettingsContextQuery,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => EditableSetting[]];\n\treadonly queryGroupSections: (\n\t\t_id: GroupId,\n\t\ttab?: TabId,\n\t) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => SectionName[]];\n\treadonly queryGroupTabs: (_id: GroupId) => [subscribe: (onStoreChange: () => void) => () => void, getSnapshot: () => TabId[]];\n\treadonly dispatch: (changes: Partial<EditableSetting>[]) => void;\n\treadonly isEnterprise: boolean;\n};\n\nexport const EditableSettingsContext = createContext<EditableSettingsContextValue>({\n\tqueryEditableSetting: () => [(): (() => void) => (): void => undefined, (): undefined => undefined],\n\tqueryEditableSettings: () => [(): (() => void) => (): void => undefined, (): EditableSetting[] => []],\n\tqueryGroupSections: () => [(): (() => void) => (): void => undefined, (): SectionName[] => []],\n\tqueryGroupTabs: () => [(): (() => void) => (): void => undefined, (): TabId[] => []],\n\tdispatch: () => undefined,\n\tisEnterprise: false,\n});\n\nexport const useIsEnterprise = (): boolean => useContext(EditableSettingsContext).isEnterprise;\n\nexport const useEditableSetting = (_id: SettingId): EditableSetting | undefined => {\n\tconst { queryEditableSetting } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryEditableSetting(_id), [queryEditableSetting, _id]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettings = (query?: EditableSettingsContextQuery): EditableSetting[] => {\n\tconst { queryEditableSettings } = useContext(EditableSettingsContext);\n\tconst [subscribe, getSnapshot] = useMemo(() => queryEditableSettings(query ?? {}), [queryEditableSettings, query]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsGroupSections = (_id: SettingId, tab?: TabId): SectionName[] => {\n\tconst { queryGroupSections } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryGroupSections(_id, tab), [queryGroupSections, _id, tab]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsGroupTabs = (_id: SettingId): TabId[] => {\n\tconst { queryGroupTabs } = useContext(EditableSettingsContext);\n\n\tconst [subscribe, getSnapshot] = useMemo(() => queryGroupTabs(_id), [queryGroupTabs, _id]);\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useEditableSettingsDispatch = (): ((changes: Partial<EditableSetting>[]) => void) =>\n\tuseContext(EditableSettingsContext).dispatch;\n",null],"names":["module","link","default","_slicedToArray","export","EditableSettingsContext","useIsEnterprise","useEditableSetting","useEditableSettings","useEditableSettingsGroupSections","useEditableSettingsGroupTabs","useEditableSettingsDispatch","createContext","useContext","useMemo","useSyncExternalStore","queryEditableSetting","queryEditableSettings","queryGroupSections","queryGroupTabs","dispatch","isEnterprise","_id","_useContext","_useMemo2","query","_useContext2","_useMemo4","tab","_useContext3","_useMemo6","_useContext4","_useMemo8"],"mappings":"uBAESA,EAAeC,IAAA,CAAA,uCAAmC,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAA3DH,EAAOI,MAAE,CAAA,CAAAC,wBAA2B,WAAS,OAAMA,CAAQ,EAAAC,gBAAAA,WAAA,OAAAA,CAAA,EAAAC,mBAAAA,WAAA,OAAAA,CAAA,EAAAC,oBAAAA,WAAA,OAAAA,CAAA,EAAAC,iCAAAA,WAAA,OAAAA,CAAA,EAAAC,6BAAAA,WAAA,OAAAA,CAAA,EAAAC,4BAAAA,WAAA,OAAAA,CAAA,CAAA,GAAAX,EAAAA,IAAAA,CAAAA,QAAAA,CAAAY,cAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAd,EAAAA,IAAAA,CAAAA,+BAAAA,CAAAe,qBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GA6BpD,IA7BPZ,EAA2DS,EAAAC,EAAAC,EAAAC,EA6B9CV,EAA0BO,EAA4C,CAClFI,qBAAsB,WAAA,MAAM,CAAC,WAAA,OAAoB,WAAqB,CAAA,EAAE,WAA0B,EAAC,EACnGC,sBAAuB,WAAA,MAAM,CAAC,WAAA,OAAoB,WAAqB,CAAA,EAAE,WAAA,MAAyB,EAAE,EAAC,EACrGC,mBAAoB,WAAA,MAAM,CAAC,WAAA,OAAoB,WAAqB,CAAA,EAAE,WAAA,MAAqB,EAAE,EAAC,EAC9FC,eAAgB,WAAA,MAAM,CAAC,WAAA,OAAoB,WAAqB,CAAA,EAAE,WAAA,MAAe,EAAE,EAAC,EACpFC,SAAU,WAAe,EACzBC,aAAc,CAAA,IAGFf,EAAkB,WAAA,OAAeO,EAAWR,GAAyBgB,YAAY,EAEjFd,EAAqB,SAACe,CAAc,EAChD,IAAQN,EAAoBO,AAAKV,EAAWR,GAApCW,oBAAoB,CAE0EQ,EAAArB,EAArEW,EAAQ,WAAA,OAAME,EAAqBM,EAAI,EAAE,CAACN,EAAsBM,EAAI,EAAC,GACtG,OAAOP,EADSS,CAAA,CAAA,EAAA,CAAaA,CAAA,CAAA,EAAA,CAE9B,EAEahB,EAAsB,SAACiB,CAAoC,EACvE,IAAQR,EAAqBS,AAAKb,EAAWR,GAArCY,qBAAqB,CACqFU,EAAAxB,EAAjFW,EAAQ,WAAA,OAAMG,EAAsBQ,MAAAA,EAAAA,EAAS,CAAA,EAAG,EAAE,CAACR,EAAuBQ,EAAM,EAAC,GAClH,OAAOV,EADSY,CAAA,CAAA,EAAA,CAAaA,CAAA,CAAA,EAAA,CAE9B,EAEalB,EAAmC,SAACa,CAAc,CAAEM,CAAW,EAC3E,IAAQV,EAAkBW,AAAKhB,EAAWR,GAAlCa,kBAAkB,CAEkFY,EAAA3B,EAA3EW,EAAQ,WAAA,OAAMI,EAAmBI,EAAKM,EAAI,EAAE,CAACV,EAAoBI,EAAKM,EAAI,EAAC,GAC5G,OAAOb,EADSe,CAAA,CAAA,EAAA,CAAaA,CAAA,CAAA,EAAA,CAE9B,EAEapB,EAA+B,SAACY,CAAc,EAC1D,IAAQH,EAAcY,AAAKlB,EAAWR,GAA9Bc,cAAc,CAEoEa,EAAA7B,EAAzDW,EAAQ,WAAA,OAAMK,EAAeG,EAAI,EAAE,CAACH,EAAgBG,EAAI,EAAC,GAC1F,OAAOP,EADSiB,CAAA,CAAA,EAAA,CAAaA,CAAA,CAAA,EAAA,CAE9B,EAEarB,EAA8B,WAAA,OAC1CE,EAAWR,GAAyBe,QAAQ"}