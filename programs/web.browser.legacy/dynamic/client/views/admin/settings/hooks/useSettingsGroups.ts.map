)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/views/admin/settings/hooks/useSettingsGroups.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ISetting } from '@rocket.chat/core-typings';\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\nimport { useSettings, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useMemo } from 'react';\n\nexport const useSettingsGroups = (filter: string): ISetting[] => {\n\tconst settings = useSettings();\n\tconst t = useTranslation();\n\n\tconst filterPredicate = useMemo(() => {\n\t\tif (!filter) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tconst getMatchableStrings = (setting: ISetting): string[] =>\n\t\t\t[setting.i18nLabel && t(setting.i18nLabel as TranslationKey), t(setting._id as TranslationKey), setting._id].filter(Boolean);\n\n\t\ttry {\n\t\t\tconst filterRegex = new RegExp(filter, 'i');\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => filterRegex.test(text));\n\t\t} catch (e) {\n\t\t\treturn (setting: ISetting): boolean => getMatchableStrings(setting).some((text) => text.slice(0, filter.length) === filter);\n\t\t}\n\t}, [filter, t]);\n\n\treturn useMemo(() => {\n\t\tconst groupIds = Array.from(\n\t\t\tnew Set(\n\t\t\t\tsettings.filter(filterPredicate).map((setting) => {\n\t\t\t\t\tif (setting.type === 'group') {\n\t\t\t\t\t\treturn setting._id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn setting.group;\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\treturn settings\n\t\t\t.filter(({ type, group, _id }) => type === 'group' && groupIds.includes(group || _id))\n\t\t\t.sort((a, b) => t((a.i18nLabel || a._id) as TranslationKey).localeCompare(t((b.i18nLabel || b._id) as TranslationKey)));\n\t}, [settings, filterPredicate, t]);\n};\n",null],"names":["module","export","useSettingsGroups","useSettings","useTranslation","useMemo","filter","settings","t","filterPredicate","getMatchableStrings","setting","i18nLabel","_id","Boolean","filterRegex","RegExp","some","text","test","e","slice","length","groupIds","Array","from","Set","map","type","group","_ref","includes","sort","a","b","localeCompare"],"mappings":"uBAEAA,EAAOC,MAAE,CAAA,CAAAC,kBAAa,WAAsB,OAAAA,CAAA,CAAA,GAA2BF,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAG,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAJ,EAAAA,IAAAA,CAAAA,QAAAA,CAAAK,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAGhE,IAHgEF,EAAAC,EAAAC,EAG1DH,EAAoB,SAACI,CAAc,EAC/C,IAAMC,EAAWJ,IACXK,EAAIJ,IAEJK,EAAkBJ,EAAQ,WAC/B,GAAI,CAACC,EACJ,OAAO,WAAA,MAAe,CAAA,CAAI,EAG3B,IAAMI,EAAsB,SAACC,CAAiB,EAAA,MAC7C,CAACA,EAAQC,SAAS,EAAIJ,EAAEG,EAAQC,SAA2B,EAAGJ,EAAEG,EAAQE,GAAqB,EAAGF,EAAQE,GAAG,CAAC,CAACP,MAAM,CAACQ,QAAQ,EAE7H,GAAI,CACH,IAAMC,EAAc,AAAIC,OAAOV,EAAQ,KACvC,OAAO,SAACK,CAAiB,EAAA,OAAcD,EAAoBC,GAASM,IAAI,CAAC,SAACC,CAAI,EAAA,OAAKH,EAAYI,IAAI,CAACD,EAAK,EAAC,EACzG,MAAOE,EAAG,CACX,OAAO,SAACT,CAAiB,EAAA,OAAcD,EAAoBC,GAASM,IAAI,CAAC,SAACC,CAAI,EAAA,OAAKA,EAAKG,KAAK,CAAC,EAAGf,EAAOgB,MAAM,IAAMhB,CAAM,EAAC,EAE7H,EAAG,CAACA,EAAQE,EAAE,EAEd,OAAOH,EAAQ,WACd,IAAMkB,EAAWC,MAAMC,IAAI,CAC1B,IAAIC,IACHnB,EAASD,MAAM,CAACG,GAAiBkB,GAAG,CAAC,SAAChB,CAAO,QAC5C,AAAIA,AAAiB,UAAjBA,EAAQiB,IAAI,CACRjB,EAAQE,GAAG,CAGZF,EAAQkB,KAAK,AACrB,KAIF,OAAOtB,EACLD,MAAM,CAAC,SAAAwB,CAAA,EAAA,IAAGF,EAAIE,EAAJF,IAAI,CAAEC,EAAKC,EAALD,KAAK,CAAEhB,EAAGiB,EAAHjB,GAAG,CAAA,MAAOe,AAAS,UAATA,GAAoBL,EAASQ,QAAQ,CAACF,GAAShB,EAAI,GACpFmB,IAAI,CAAC,SAACC,CAAC,CAAEC,CAAC,EAAA,OAAK1B,EAAGyB,EAAErB,SAAS,EAAIqB,EAAEpB,GAAG,EAAqBsB,aAAa,CAAC3B,EAAG0B,EAAEtB,SAAS,EAAIsB,EAAErB,GAAG,EAAqB,EACxH,EAAG,CAACN,EAAUE,EAAiBD,EAAE,CAClC"}