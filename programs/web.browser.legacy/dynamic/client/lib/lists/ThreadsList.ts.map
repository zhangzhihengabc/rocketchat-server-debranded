)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/ThreadsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: 'all';\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n",null],"names":["module","link","default","_createClass","_inheritsLoose","export","ThreadsList","escapeRegExp","MessageList","isThreadFollowedByUser","threadMessage","uid","_threadMessage$replie","_threadMessage$replie2","replies","includes","_MessageList","_options","_this","call","_proto","prototype","updateFilters","options","clear","filter","message","rid","tcount","type","tunread","_id","text","regex","RegExp","test","msg","compare","a","b","_b$tlm","_a$tlm","tlm","ts","getTime","key","get"],"mappings":"uBACSA,EAAcC,IAAA,CAAM,qCAA8B,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAAH,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAE,QAAAA,SAAAA,CAAAA,EAAAE,EAAAA,CAAA,CAAA,EAAA,GAA3DJ,EAAOK,MAAE,CAAA,CAAAC,YAAc,WAAM,OAAAA,CAAA,CAAA,GAA8BN,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAO,aAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAP,EAAAA,IAAAA,CAAAA,gBAAAA,CAAAQ,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GA0B3D,IA1BAL,EAA2DC,EAAAG,EAAAC,EA0BrDC,EAAyB,SAACC,CAA4B,CAAEC,CAAiB,EAAA,IAAAC,EAAAC,EAAA,OAAA,AAAkD,OAAlDD,CAAAA,EAAA,AAAmC,OAAnCC,CAAAA,EAAcH,EAAcI,OAAO,AAAPA,GAAOD,AAAA,KAAA,IAAAA,EAAA,KAAA,EAArBA,EAAuBE,QAAQ,CAACJ,EAAG,GAACC,AAAA,KAAA,IAAAA,GAAAA,CAAS,EAO7HN,EAAY,SAAAU,CAAA,EACxB,SAAAV,EAA2BW,CAA4B,EAAA,IAAAC,EAAA,MAC9CA,AAARA,CAAAA,EAAAF,EAAAG,IAAA,CAAA,IAAA,GAAO,IAAA,EADmBF,QAAAA,CAAAA,KAAAA,EAAAC,EAAAD,QAAQ,CAARA,EAA4BC,CAEvD,CAHwBd,EAAAE,EAAAU,GAGvB,IAAAI,EAAAd,EAAAe,SAAA,CAIA,OAJAD,EAMME,aAAa,CAAb,SAAcC,CAA2B,EAC/C,IAAI,CAACN,QAAQ,CAAGM,EAChB,IAAI,CAACC,KAAK,EACX,EAACJ,EAESK,MAAM,CAAN,SAAOC,CAAiB,EACjC,IAAQC,EAAQ,IAAI,CAACV,QAAQ,CAArBU,GAAG,CAEX,GA1BDD,AA0B4BA,EA1BpBC,GAAG,GA0B0BA,GA1Bd,AAA6C,UAA7C,OAAQD,AA0BHA,EA1B6BE,MAAM,EA8B1D,AAAuB,cAAvB,IAAI,CAACX,QAAQ,CAACY,IAAI,EAEjB,CAACpB,EAAuBiB,EADZ,IAAI,CAACT,QAAQ,CAArBN,GAAG,EAJX,MAAO,CAAA,EAUR,GAAI,AAAuB,WAAvB,IAAI,CAACM,QAAQ,CAACY,IAAI,CAAe,CACpC,IAAQC,EAAY,IAAI,CAACb,QAAQ,CAAzBa,OAAO,CACf,GAlCMA,MAkCuBA,IAlCvBA,AAkCuBA,EAlCdf,QAAQ,CAACL,AAkCJgB,EAlCkBK,GAAG,EAmCxC,MAAO,CAAA,QAIL,CAAA,IAAI,CAACd,QAAQ,CAACe,IAAI,IArC+DC,AAsCtE,AAAIC,OAAO3B,EAAa,IAAI,CAACU,QAAQ,CAACe,IAAI,EAAG,KAtC+BG,IAAI,CAACzB,AAuCrEgB,EAvCmFU,GAAG,CA6ClH,EAAChB,EAESiB,OAAO,CAAP,SAAQC,CAAW,CAAEC,CAAW,EAAA,IAAAC,EAAAC,EACzC,MAAO,CAAA,AAAM,OAAND,CAAAA,EAACD,EAAEG,GAAG,AAAHA,GAAGF,AAAA,KAAA,IAAAA,EAAAA,EAAID,EAAEI,EAAE,AAAFA,EAAIC,OAAO,GAAK,CAAA,AAAM,OAANH,CAAAA,EAACH,EAAEI,GAAG,AAAHA,GAAGD,AAAA,KAAA,IAAAA,EAAAA,EAAIH,EAAEK,EAAE,AAAFA,EAAIC,OAAO,EAC3D,EAACzC,EAAAG,EAAA,CAAA,CAAAuC,IAAA,UAAAC,IA1CD,WACC,OAAO,IAAI,CAAC7B,QAAQ,AACrB,CAAC,EAAA,EAAAX,CAAA,EAP+BE"}