)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/lists/DiscussionsList.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IDiscussionMessage, IMessage } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype DiscussionMessage = Omit<IMessage, 'drid'> & Required<Pick<IMessage, 'drid'>>;\n\nexport type DiscussionsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n};\n\nconst isDiscussionMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is DiscussionMessage =>\n\tmessage.rid === rid && 'drid' in message;\n\nconst isDiscussionTextMatching = (discussionMessage: DiscussionMessage, regex: RegExp): boolean => regex.test(discussionMessage.msg);\n\nexport class DiscussionsList extends MessageList<IDiscussionMessage> {\n\tpublic constructor(private _options: DiscussionsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): DiscussionsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: DiscussionsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isDiscussionMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isDiscussionTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n",null],"names":["module","link","default","_createClass","_inheritsLoose","export","DiscussionsList","escapeRegExp","MessageList","_MessageList","_options","_this","call","_proto","prototype","updateFilters","options","clear","filter","message","rid","text","regex","RegExp","test","discussionMessage","msg","compare","a","b","_b$tlm","_a$tlm","tlm","ts","getTime","key","get"],"mappings":"uBACSA,EAAcC,IAAA,CAAM,qCAA8B,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAAH,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAE,QAAAA,SAAAA,CAAAA,EAAAE,EAAAA,CAAA,CAAA,EAAA,GAA3DJ,EAAOK,MAAE,CAAA,CAAAC,gBAAoB,WAAA,OAAAA,CAA8B,CAAA,GAAAN,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAO,aAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAP,EAAAA,IAAAA,CAAAA,gBAAAA,CAAAQ,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAc0E,IAdrIL,EAA2DC,EAAAG,EAAAC,EAgB9CF,EAAgB,SAAAG,CAAA,EAC5B,SAAAH,EAA2BI,CAAgC,EAAA,IAAAC,EAAA,MAClDA,AAARA,CAAAA,EAAAF,EAAAG,IAAA,CAAA,IAAA,GAAO,IAAA,EADmBF,QAAAA,CAAAA,KAAAA,EAAAC,EAAAD,QAAQ,CAARA,EAAgCC,CAE3D,CAH4BP,EAAAE,EAAAG,GAG3B,IAAAI,EAAAP,EAAAQ,SAAA,CAIA,OAJAD,EAMME,aAAa,CAAb,SAAcC,CAA+B,EACnD,IAAI,CAACN,QAAQ,CAAGM,EAChB,IAAI,CAACC,KAAK,EACX,EAACJ,EAESK,MAAM,CAAN,SAAOC,CAAiB,EACjC,IAAQC,EAAQ,IAAI,CAACV,QAAQ,CAArBU,GAAG,UAnBZD,AAqBgCA,EArBxBC,GAAG,GAqB8BA,GArBlB,SAqBSD,GAI3B,CAAA,CAAA,IAAI,CAACT,QAAQ,CAACW,IAAI,EAvB2EC,AAwBlF,AAAIC,OAAOhB,EAAa,IAAI,CAACG,QAAQ,CAACW,IAAI,EAAG,KAxB2CG,IAAI,CAACC,AAyB7EN,EAzB+FO,GAAG,CAuB/GL,EAQnB,EAACR,EAESc,OAAO,CAAP,SAAQC,CAAW,CAAEC,CAAW,EAAA,IAAAC,EAAAC,EACzC,MAAO,CAAA,AAAM,OAAND,CAAAA,EAACD,EAAEG,GAAG,AAAHA,GAAGF,AAAA,KAAA,IAAAA,EAAAA,EAAID,EAAEI,EAAE,AAAFA,EAAIC,OAAO,GAAK,CAAA,AAAM,OAANH,CAAAA,EAACH,EAAEI,GAAG,AAAHA,GAAGD,AAAA,KAAA,IAAAA,EAAAA,EAAIH,EAAEK,EAAE,AAAFA,EAAIC,OAAO,EAC3D,EAAC/B,EAAAG,EAAA,CAAA,CAAA6B,IAAA,UAAAC,IA5BD,WACC,OAAO,IAAI,CAAC1B,QAAQ,AACrB,CAAC,EAAA,EAAAJ,CAAA,EAPmCE"}