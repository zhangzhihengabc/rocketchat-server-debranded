)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/chats/flows/processSlashCommand.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage, SlashCommand } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\n\nimport { hasAtLeastOnePermission } from '../../../../app/authorization/client';\nimport { settings } from '../../../../app/settings/client';\nimport { slashCommands } from '../../../../app/utils/client';\nimport { sdk } from '../../../../app/utils/client/lib/SDKClient';\nimport { t } from '../../../../app/utils/lib/i18n';\nimport type { ChatAPI } from '../ChatAPI';\n\nconst parse = (msg: string): { command: string; params: string } | { command: SlashCommand; params: string } | undefined => {\n\tconst match = msg.match(/^\\/([^\\s]+)(.*)/);\n\n\tif (!match) {\n\t\treturn undefined;\n\t}\n\n\tconst [, cmd, params] = match;\n\tconst command = slashCommands.commands[cmd];\n\n\tif (!command) {\n\t\treturn { command: cmd, params };\n\t}\n\n\treturn { command, params };\n};\n\nconst warnUnrecognizedSlashCommand = async (chat: ChatAPI, message: string): Promise<void> => {\n\tconsole.error(message);\n\n\tawait chat.data.pushEphemeralMessage({\n\t\t_id: Random.id(),\n\t\tts: new Date(),\n\t\tmsg: message,\n\t\tu: {\n\t\t\t_id: 'rocket.cat',\n\t\t\tusername: 'rocket.cat',\n\t\t\tname: 'Rocket.Cat',\n\t\t},\n\t\tprivate: true,\n\t\t_updatedAt: new Date(),\n\t});\n};\n\nexport const processSlashCommand = async (chat: ChatAPI, message: IMessage): Promise<boolean> => {\n\tconst match = parse(message.msg);\n\n\tif (!match) {\n\t\treturn false;\n\t}\n\n\tconst { command, params } = match;\n\n\tif (typeof command === 'string') {\n\t\tif (!settings.get('Message_AllowUnrecognizedSlashCommand')) {\n\t\t\tawait warnUnrecognizedSlashCommand(chat, t('No_such_command', { command: escapeHTML(command) }));\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tconst { permission, clientOnly, callback: handleOnClient, result: handleResult, appId, command: commandName } = command;\n\n\tif (permission && !hasAtLeastOnePermission(permission, message.rid)) {\n\t\tawait warnUnrecognizedSlashCommand(chat, t('You_do_not_have_permission_to_execute_this_command', { command: escapeHTML(commandName) }));\n\t\treturn true;\n\t}\n\n\tif (clientOnly && chat.uid) {\n\t\thandleOnClient?.({ command: commandName, message, params, userId: chat.uid });\n\t\treturn true;\n\t}\n\n\tawait sdk.rest.post('/v1/statistics.telemetry', {\n\t\tparams: [{ eventName: 'slashCommandsStats', timestamp: Date.now(), command: commandName }],\n\t});\n\n\tconst triggerId = chat.ActionManager.generateTriggerId(appId);\n\n\tconst data = {\n\t\tcmd: commandName,\n\t\tparams,\n\t\tmsg: message,\n\t\tuserId: chat.uid,\n\t} as const;\n\n\ttry {\n\t\tif (appId) {\n\t\t\tchat.ActionManager.notifyBusy();\n\t\t}\n\n\t\tconst result = await sdk.call('slashCommand', { cmd: commandName, params, msg: message, triggerId });\n\n\t\thandleResult?.(undefined, result, data);\n\t} catch (error: unknown) {\n\t\tawait warnUnrecognizedSlashCommand(chat, t('Something_went_wrong_while_executing_command', { command: commandName }));\n\t\thandleResult?.(error, undefined, data);\n\t}\n\n\tif (appId) {\n\t\tchat.ActionManager.notifyIdle();\n\t}\n\n\treturn true;\n};\n",null],"names":["module","default","_regeneratorRuntime","_slicedToArray","export","processSlashCommand","Random","escapeHTML","hasAtLeastOnePermission","settings","slashCommands","sdk","t","parse","msg","match","_match","cmd","params","command","commands","warnUnrecognizedSlashCommand","chat","message","async","_context","prev","next","console","error","awrap","data","pushEphemeralMessage","_id","id","ts","Date","u","username","name","_updatedAt","stop","Promise","permission","clientOnly","handleOnClient","handleResult","appId","commandName","triggerId","result","_context2","abrupt","get","callback","rid","uid","userId","rest","post","eventName","timestamp","now","ActionManager","generateTriggerId","notifyBusy","call","sent","undefined","t0","notifyIdle"],"mappings":"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"}