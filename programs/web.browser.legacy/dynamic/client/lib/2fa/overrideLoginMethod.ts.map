)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/2fa/overrideLoginMethod.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { t } from '../../../app/utils/lib/i18n';\nimport { dispatchToastMessage } from '../toast';\nimport { process2faReturn } from './process2faReturn';\nimport { isTotpInvalidError, isTotpRequiredError } from './utils';\n\ntype LoginCallback = {\n\t(error: unknown): void;\n\t(error: unknown, result: unknown): void;\n};\n\ntype LoginMethod<A extends unknown[]> = (...args: [...args: A, cb: LoginCallback]) => void;\n\ntype LoginMethodWithTotp<A extends unknown[]> = (...args: [...args: A, code: string, cb: LoginCallback]) => void;\n\nexport const overrideLoginMethod = <A extends unknown[]>(\n\tloginMethod: LoginMethod<A>,\n\tloginArgs: A,\n\tcallback: LoginCallback,\n\tloginMethodTOTP: LoginMethodWithTotp<A>,\n\temailOrUsername: string,\n): void => {\n\tloginMethod.call(null, ...loginArgs, async (error: unknown, result?: unknown) => {\n\t\tif (!isTotpRequiredError(error)) {\n\t\t\tcallback(error);\n\t\t\treturn;\n\t\t}\n\n\t\tawait process2faReturn({\n\t\t\terror,\n\t\t\tresult,\n\t\t\temailOrUsername,\n\t\t\toriginalCallback: callback,\n\t\t\tonCode: (code: string) => {\n\t\t\t\tloginMethodTOTP?.call(null, ...loginArgs, code, (error: unknown) => {\n\t\t\t\t\tif (isTotpInvalidError(error)) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: t('Invalid_two_factor_code') });\n\t\t\t\t\t\tcallback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback(error);\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t});\n};\n",null],"names":["module","default","_regeneratorRuntime","_toConsumableArray","export","overrideLoginMethod","t","dispatchToastMessage","process2faReturn","isTotpInvalidError","isTotpRequiredError","loginMethod","loginArgs","callback","loginMethodTOTP","emailOrUsername","call","apply","concat","error","result","async","_context","prev","next","abrupt","awrap","originalCallback","onCode","code","type","message","stop","Promise"],"mappings":"uBAAkBA,EAAAA,IAAAA,CAAAA,6BAA8B,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAAAF,EAAAA,IAAAA,CAAAA,2CAAAA,CAAAC,QAAAA,SAAAA,CAAAA,EAAAE,EAAAA,CAAA,CAAA,EAAA,GAAhDH,EAAOI,MAAK,CAAA,CAAAC,oBAAM,WAAA,OAA8BA,CAAA,CAAA,GAAAL,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAM,EAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAN,EAAAA,IAAAA,CAAAA,WAAAA,CAAAO,qBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAP,EAAAA,IAAAA,CAAAA,qBAAAA,CAAAQ,iBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAR,EAAAA,IAAAA,CAAAA,UAAAA,CAAAS,mBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,oBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAczC,IAdPR,EAAgDC,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAcnCL,EAAsB,SAClCM,CAA2B,CAC3BC,CAAY,CACZC,CAAuB,CACvBC,CAAuC,CACvCC,CAAuB,EAEvBJ,EAAYK,IAAI,CAAAC,KAAA,CAAhBN,EAAW,CAAM,KAAI,CAAAO,MAAA,CAAAf,EAAKS,GAAS,CAAE,SAAOO,CAAc,CAAEC,CAAgB,EAAA,OAAAlB,EAAAmB,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAAA,GACtEd,EAAoBS,GAAM,CAAAG,EAAAE,IAAA,CAAA,EAAA,KAAA,CACd,OAAhBX,EAASM,GAAOG,EAAAG,MAAA,CAAA,SAAA,MAAA,EAAA,OAAAH,EAAAE,IAAA,CAAA,EAAAtB,EAAAwB,KAAA,CAIXlB,EAAiB,CACtBW,MAAAA,EACAC,OAAAA,EACAL,gBAAAA,EACAY,iBAAkBd,EAClBe,OAAQ,SAACC,CAAY,EACpBf,MAAAA,GAAAA,EAAiBE,IAAI,CAAAC,KAAA,CAArBH,EAAe,CAAO,KAAI,CAAAI,MAAA,CAAAf,EAAKS,GAAS,CAAEiB,EAAM,SAACV,CAAc,EAC9D,GAAIV,EAAmBU,GAAQ,CAC9BZ,EAAqB,CAAEuB,KAAM,QAASC,QAASzB,EAAE,0BAA0B,GAC3EO,EAAS,MACT,OAGDA,EAASM,EACV,EAAC,EACF,IACC,MAAA,EAAA,IAAA,MAAA,OAAAG,EAAAU,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,EACF,EACF"}