)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/voip/VoIPUser.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["/**\n * Class representing SIP UserAgent\n * @remarks\n * This class encapsulates all the details of sip.js and exposes\n * a very simple functions and callback handlers to the outside world.\n * This class thus abstracts user from Browser specific media details as well as\n * SIP specific protocol details.\n */\nimport type {\n\tCallStates,\n\tConnectionState,\n\tICallerInfo,\n\tIQueueMembershipSubscription,\n\tSignalingSocketEvents,\n\tSocketEventKeys,\n\tIMediaStreamRenderer,\n\tVoIPUserConfiguration,\n\tVoIpCallerInfo,\n\tIState,\n\tVoipEvents,\n} from '@rocket.chat/core-typings';\nimport { Operation, UserState, WorkflowTypes } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport type { UserAgentOptions, InvitationAcceptOptions, Session, SessionInviteOptions } from 'sip.js';\nimport { UserAgent, Invitation, SessionState, Registerer, RequestPendingError, Inviter } from 'sip.js';\nimport type { OutgoingByeRequest, OutgoingRequestDelegate } from 'sip.js/lib/core';\nimport { URI } from 'sip.js/lib/core';\nimport type { SessionDescriptionHandlerOptions } from 'sip.js/lib/platform/web';\nimport { SessionDescriptionHandler } from 'sip.js/lib/platform/web';\n\nimport { toggleMediaStreamTracks } from './Helper';\nimport LocalStream from './LocalStream';\nimport { QueueAggregator } from './QueueAggregator';\nimport RemoteStream from './RemoteStream';\n\nexport class VoIPUser extends Emitter<VoipEvents> {\n\tstate: IState = {\n\t\tisReady: false,\n\t\tenableVideo: false,\n\t};\n\n\tprivate remoteStream: RemoteStream | undefined;\n\n\tuserAgentOptions: UserAgentOptions = {};\n\n\tuserAgent: UserAgent | undefined;\n\n\tregisterer: Registerer | undefined;\n\n\tmediaStreamRendered?: IMediaStreamRenderer;\n\n\tprivate _connectionState: ConnectionState = 'INITIAL';\n\n\tprivate _held = false;\n\n\tprivate mode: WorkflowTypes;\n\n\tprivate queueInfo: QueueAggregator;\n\n\tprivate connectionRetryCount;\n\n\tprivate stop;\n\n\tprivate networkEmitter: Emitter<SignalingSocketEvents>;\n\n\tprivate offlineNetworkHandler: () => void;\n\n\tprivate onlineNetworkHandler: () => void;\n\n\tprivate optionsKeepaliveInterval = 5;\n\n\tprivate optionsKeepAliveDebounceTimeInSec = 5;\n\n\tprivate attemptRegistration = false;\n\n\tprotected session: Session | undefined;\n\n\tprotected _callState: CallStates = 'INITIAL';\n\n\tprotected _callerInfo: ICallerInfo | undefined;\n\n\tprotected _userState: UserState = UserState.IDLE;\n\n\tprotected _opInProgress: Operation = Operation.OP_NONE;\n\n\tget operationInProgress(): Operation {\n\t\treturn this._opInProgress;\n\t}\n\n\tget userState(): UserState | undefined {\n\t\treturn this._userState;\n\t}\n\n\tconstructor(private readonly config: VoIPUserConfiguration, mediaRenderer?: IMediaStreamRenderer) {\n\t\tsuper();\n\t\tthis.mediaStreamRendered = mediaRenderer;\n\t\tthis.networkEmitter = new Emitter<SignalingSocketEvents>();\n\t\tthis.connectionRetryCount = this.config.connectionRetryCount;\n\t\tthis.stop = false;\n\n\t\tthis.onlineNetworkHandler = this.onNetworkRestored.bind(this);\n\t\tthis.offlineNetworkHandler = this.onNetworkLost.bind(this);\n\t}\n\n\t/**\n\t * Configures and initializes sip.js UserAgent\n\t * call gets established.\n\t * @remarks\n\t * This class configures transport properties such as websocket url, passed down in config,\n\t * sets up ICE servers,\n\t * SIP UserAgent options such as userName, Password, URI.\n\t * Once initialized, it starts the userAgent.\n\t */\n\n\tasync init(): Promise<void> {\n\t\tconst sipUri = `sip:${this.config.authUserName}@${this.config.sipRegistrarHostnameOrIP}`;\n\t\tconst transportOptions = {\n\t\t\tserver: this.config.webSocketURI,\n\t\t\tconnectionTimeout: 100, // Replace this with config\n\t\t\tkeepAliveInterval: 20,\n\t\t\t// traceSip: true,\n\t\t};\n\t\tconst sdpFactoryOptions = {\n\t\t\ticeGatheringTimeout: 10,\n\t\t\tpeerConnectionConfiguration: {\n\t\t\t\ticeServers: this.config.iceServers,\n\t\t\t},\n\t\t};\n\t\tthis.userAgentOptions = {\n\t\t\tdelegate: {\n\t\t\t\tonInvite: async (invitation: Invitation): Promise<void> => {\n\t\t\t\t\tawait this.handleIncomingCall(invitation);\n\t\t\t\t},\n\t\t\t},\n\t\t\tauthorizationPassword: this.config.authPassword,\n\t\t\tauthorizationUsername: this.config.authUserName,\n\t\t\turi: UserAgent.makeURI(sipUri),\n\t\t\ttransportOptions,\n\t\t\tsessionDescriptionHandlerFactoryOptions: sdpFactoryOptions,\n\t\t\tlogConfiguration: false,\n\t\t\tlogLevel: 'error',\n\t\t};\n\n\t\tthis.userAgent = new UserAgent(this.userAgentOptions);\n\t\tthis.userAgent.transport.isConnected();\n\t\tthis._opInProgress = Operation.OP_CONNECT;\n\t\ttry {\n\t\t\tthis.registerer = new Registerer(this.userAgent);\n\n\t\t\tthis.userAgent.transport.onConnect = this.onConnected.bind(this);\n\t\t\tthis.userAgent.transport.onDisconnect = this.onDisconnected.bind(this);\n\t\t\twindow.addEventListener('online', this.onlineNetworkHandler);\n\t\t\twindow.addEventListener('offline', this.offlineNetworkHandler);\n\t\t\tawait this.userAgent.start();\n\t\t\tif (this.config.enableKeepAliveUsingOptionsForUnstableNetworks) {\n\t\t\t\tthis.startOptionsPingForUnstableNetworks();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis._connectionState = 'ERROR';\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync onConnected(): Promise<void> {\n\t\tthis._connectionState = 'SERVER_CONNECTED';\n\t\tthis.state.isReady = true;\n\t\tthis.sendOptions();\n\t\tthis.networkEmitter.emit('connected');\n\t\t/**\n\t\t * Re-registration post network recovery should be attempted\n\t\t * if it was previously registered or incall/onhold\n\t\t */\n\n\t\tif (this.registerer && this.callState !== 'INITIAL') {\n\t\t\tthis.attemptRegistration = true;\n\t\t}\n\t}\n\n\tonDisconnected(error: any): void {\n\t\tthis._connectionState = 'SERVER_DISCONNECTED';\n\t\tthis._opInProgress = Operation.OP_NONE;\n\t\tthis.networkEmitter.emit('disconnected');\n\t\tif (error) {\n\t\t\tthis.networkEmitter.emit('connectionerror', error);\n\t\t\tthis.state.isReady = false;\n\t\t\t/**\n\t\t\t * Signalling socket reconnection should be attempted assuming\n\t\t\t * that the disconnect happened from the remote side or due to sleep\n\t\t\t * In case of remote side disconnection, if config.connectionRetryCount is -1,\n\t\t\t * attemptReconnection attempts continuously. Else stops after |config.connectionRetryCount|\n\t\t\t *\n\t\t\t */\n\t\t\t// this.attemptReconnection();\n\t\t\tthis.attemptReconnection(0, false);\n\t\t}\n\t}\n\n\tonNetworkRestored(): void {\n\t\tthis.networkEmitter.emit('localnetworkonline');\n\t\tif (this._connectionState === 'WAITING_FOR_NETWORK') {\n\t\t\t/**\n\t\t\t * Signalling socket reconnection should be attempted when online event handler\n\t\t\t * gets notified.\n\t\t\t * Important thing to note is that the second parameter |checkRegistration| = true passed here\n\t\t\t * because after the network recovery and after reconnecting to the server,\n\t\t\t * the transport layer of SIPUA does not call onConnected. So by passing |checkRegistration = true |\n\t\t\t * the code will check if the endpoint was previously registered before the disconnection.\n\t\t\t * If such is the case, it will first unregister and then re-register.\n\t\t\t * */\n\t\t\tthis.attemptReconnection();\n\t\t\tif (this.registerer && this.callState !== 'INITIAL') {\n\t\t\t\tthis.attemptRegistration = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tonNetworkLost(): void {\n\t\tthis.networkEmitter.emit('localnetworkoffline');\n\t\tthis._connectionState = 'WAITING_FOR_NETWORK';\n\t}\n\n\tget userConfig(): VoIPUserConfiguration {\n\t\treturn this.config;\n\t}\n\n\tget callState(): CallStates {\n\t\treturn this._callState;\n\t}\n\n\tget connectionState(): ConnectionState {\n\t\treturn this._connectionState;\n\t}\n\n\tget callerInfo(): VoIpCallerInfo {\n\t\tif (\n\t\t\tthis.callState === 'IN_CALL' ||\n\t\t\tthis.callState === 'OFFER_RECEIVED' ||\n\t\t\tthis.callState === 'ON_HOLD' ||\n\t\t\tthis.callState === 'OFFER_SENT'\n\t\t) {\n\t\t\tif (!this._callerInfo) {\n\t\t\t\tthrow new Error('[VoIPUser callerInfo] invalid state');\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstate: this.callState,\n\t\t\t\tcaller: this._callerInfo,\n\t\t\t\tuserState: this._userState,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tstate: this.callState,\n\t\t\tuserState: this._userState,\n\t\t};\n\t}\n\n\t/* Media Stream functions begin */\n\t/** The local media stream. Undefined if call not answered. */\n\tget localMediaStream(): MediaStream | undefined {\n\t\tconst sdh = this.session?.sessionDescriptionHandler;\n\t\tif (!sdh) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!(sdh instanceof SessionDescriptionHandler)) {\n\t\t\tthrow new Error('Session description handler not instance of web SessionDescriptionHandler');\n\t\t}\n\t\treturn sdh.localMediaStream;\n\t}\n\n\t/* Media Stream functions end */\n\t/* OutgoingRequestDelegate methods begin */\n\tonRegistrationRequestAccept(): void {\n\t\tif (this._opInProgress === Operation.OP_REGISTER) {\n\t\t\tthis._callState = 'REGISTERED';\n\t\t\tthis.emit('registered');\n\t\t\tthis.emit('stateChanged');\n\t\t}\n\t\tif (this._opInProgress === Operation.OP_UNREGISTER) {\n\t\t\tthis._callState = 'UNREGISTERED';\n\t\t\tthis.emit('unregistered');\n\t\t\tthis.emit('stateChanged');\n\t\t}\n\t}\n\n\tonRegistrationRequestReject(error: any): void {\n\t\tif (this._opInProgress === Operation.OP_REGISTER) {\n\t\t\tthis.emit('registrationerror', error);\n\t\t}\n\t\tif (this._opInProgress === Operation.OP_UNREGISTER) {\n\t\t\tthis.emit('unregistrationerror', error);\n\t\t}\n\t}\n\t/* OutgoingRequestDelegate methods end */\n\n\tprivate async handleIncomingCall(invitation: Invitation): Promise<void> {\n\t\tif (this.callState === 'REGISTERED') {\n\t\t\tthis._opInProgress = Operation.OP_PROCESS_INVITE;\n\t\t\tthis._callState = 'OFFER_RECEIVED';\n\t\t\tthis._userState = UserState.UAS;\n\t\t\tthis.session = invitation;\n\t\t\tthis.setupSessionEventHandlers(invitation);\n\t\t\tconst callerInfo: ICallerInfo = {\n\t\t\t\tcallerId: invitation.remoteIdentity.uri.user ? invitation.remoteIdentity.uri.user : '',\n\t\t\t\tcallerName: invitation.remoteIdentity.displayName,\n\t\t\t\thost: invitation.remoteIdentity.uri.host,\n\t\t\t};\n\t\t\tthis._callerInfo = callerInfo;\n\t\t\tthis.emit('incomingcall', callerInfo);\n\t\t\tthis.emit('stateChanged');\n\t\t\treturn;\n\t\t}\n\n\t\tawait invitation.reject();\n\t}\n\n\t/**\n\t * Sets up an listener handler for handling session's state change\n\t * @remarks\n\t * Called for setting up various state listeners. These listeners will\n\t * decide the next action to be taken when the session state changes.\n\t * e.g when session.state changes from |Establishing| to |Established|\n\t * one must set up local and remote media rendering.\n\t *\n\t * This class handles such session state changes and takes necessary actions.\n\t */\n\n\tprotected setupSessionEventHandlers(session: Session): void {\n\t\tthis.session?.stateChange.addListener((state: SessionState) => {\n\t\t\tif (this.session !== session) {\n\t\t\t\treturn; // if our session has changed, just return\n\t\t\t}\n\t\t\tswitch (state) {\n\t\t\t\tcase SessionState.Initial:\n\t\t\t\t\tbreak;\n\t\t\t\tcase SessionState.Establishing:\n\t\t\t\t\tthis.emit('ringing', { userState: this._userState, callInfo: this._callerInfo });\n\t\t\t\t\tbreak;\n\t\t\t\tcase SessionState.Established:\n\t\t\t\t\tif (this._userState === UserState.UAC) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * We need to decide about user-state ANSWER-RECEIVED for outbound.\n\t\t\t\t\t\t * This state is there for the symmetry of ANSWER-SENT.\n\t\t\t\t\t\t * ANSWER-SENT occurs when there is incoming invite. So then the UA\n\t\t\t\t\t\t * accepts a call, it sends the answer and state becomes ANSWER-SENT.\n\t\t\t\t\t\t * The call gets established only when the remote party sends ACK.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * But in case of UAC where the invite is sent out, there is no intermediate\n\t\t\t\t\t\t * state where the UA can be in ANSWER-RECEIVED. As soon this UA receives the answer,\n\t\t\t\t\t\t * it sends ack and changes the SessionState to established.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * So we do not have an actual state transitions from ANSWER-RECEIVED to IN-CALL.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * Nevertheless, this state is just added to maintain the symmetry. This can be safely removed.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * */\n\t\t\t\t\t\tthis._callState = 'ANSWER_RECEIVED';\n\t\t\t\t\t}\n\t\t\t\t\tthis._opInProgress = Operation.OP_NONE;\n\t\t\t\t\tthis.setupRemoteMedia();\n\t\t\t\t\tthis._callState = 'IN_CALL';\n\t\t\t\t\tthis.emit('callestablished', { userState: this._userState, callInfo: this._callerInfo });\n\t\t\t\t\tthis.emit('stateChanged');\n\t\t\t\t\tbreak;\n\t\t\t\tcase SessionState.Terminating:\n\t\t\t\t// fall through\n\t\t\t\tcase SessionState.Terminated:\n\t\t\t\t\tthis.session = undefined;\n\t\t\t\t\tthis._callState = 'REGISTERED';\n\t\t\t\t\tthis._opInProgress = Operation.OP_NONE;\n\t\t\t\t\tthis._userState = UserState.IDLE;\n\t\t\t\t\tthis.emit('callterminated');\n\t\t\t\t\tthis.remoteStream?.clear();\n\t\t\t\t\tthis.emit('stateChanged');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown session state.');\n\t\t\t}\n\t\t});\n\t}\n\n\tonTrackAdded(_event: any): void {\n\t\tconsole.log('onTrackAdded');\n\t}\n\n\tonTrackRemoved(_event: any): void {\n\t\tconsole.log('onTrackRemoved');\n\t}\n\n\t/**\n\t * Carries out necessary steps for rendering remote media whe\n\t * call gets established.\n\t * @remarks\n\t * Sets up Stream class and plays the stream on given Media element/\n\t * Also sets up various event handlers.\n\t */\n\tprivate setupRemoteMedia(): any {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Session does not exist.');\n\t\t}\n\t\tconst sdh = this.session?.sessionDescriptionHandler;\n\t\tif (!sdh) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!(sdh instanceof SessionDescriptionHandler)) {\n\t\t\tthrow new Error('Session description handler not instance of web SessionDescriptionHandler');\n\t\t}\n\n\t\tconst remoteStream = sdh.remoteMediaStream;\n\t\tif (!remoteStream) {\n\t\t\tthrow new Error('Remote media stream is undefined.');\n\t\t}\n\n\t\tthis.remoteStream = new RemoteStream(remoteStream);\n\t\tconst mediaElement = this.mediaStreamRendered?.remoteMediaElement;\n\t\tif (mediaElement) {\n\t\t\tthis.remoteStream.init(mediaElement);\n\t\t\tthis.remoteStream.onTrackAdded(this.onTrackAdded.bind(this));\n\t\t\tthis.remoteStream.onTrackRemoved(this.onTrackRemoved.bind(this));\n\t\t\tthis.remoteStream.play();\n\t\t}\n\t}\n\n\t/**\n\t * Handles call mute-unmute\n\t */\n\tprivate async handleMuteUnmute(muteState: boolean): Promise<void> {\n\t\tconst { session } = this;\n\t\tif (this._held === muteState) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tif (!session) {\n\t\t\tthrow new Error('Session not found');\n\t\t}\n\n\t\tconst sessionDescriptionHandler = this.session?.sessionDescriptionHandler;\n\t\tif (!(sessionDescriptionHandler instanceof SessionDescriptionHandler)) {\n\t\t\tthrow new Error(\"Session's session description handler not instance of SessionDescriptionHandler.\");\n\t\t}\n\n\t\tconst options: SessionInviteOptions = {\n\t\t\trequestDelegate: {\n\t\t\t\tonAccept: (): void => {\n\t\t\t\t\tthis._held = muteState;\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'receiver');\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'sender');\n\t\t\t\t},\n\t\t\t\tonReject: (): void => {\n\t\t\t\t\tthis.emit('muteerror');\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst { peerConnection } = sessionDescriptionHandler;\n\t\tif (!peerConnection) {\n\t\t\tthrow new Error('Peer connection closed.');\n\t\t}\n\t\treturn this.session\n\t\t\t?.invite(options)\n\t\t\t.then(() => {\n\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'receiver');\n\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'sender');\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tif (error instanceof RequestPendingError) {\n\t\t\t\t\tconsole.error(`[${this.session?.id}] A mute request is already in progress.`);\n\t\t\t\t}\n\t\t\t\tthis.emit('muteerror');\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\t/**\n\t * Handles call hold-unhold\n\t */\n\tprivate async handleHoldUnhold(holdState: boolean): Promise<void> {\n\t\tconst { session } = this;\n\t\tif (this._held === holdState) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tif (!session) {\n\t\t\tthrow new Error('Session not found');\n\t\t}\n\n\t\tconst sessionDescriptionHandler = this.session?.sessionDescriptionHandler;\n\t\tif (!(sessionDescriptionHandler instanceof SessionDescriptionHandler)) {\n\t\t\tthrow new Error(\"Session's session description handler not instance of SessionDescriptionHandler.\");\n\t\t}\n\t\tconst options: SessionInviteOptions = {\n\t\t\trequestDelegate: {\n\t\t\t\tonAccept: (): void => {\n\t\t\t\t\tthis._held = holdState;\n\t\t\t\t\tthis._callState = holdState ? 'ON_HOLD' : 'IN_CALL';\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'receiver');\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'sender');\n\t\t\t\t\tthis._callState === 'ON_HOLD' ? this.emit('hold') : this.emit('unhold');\n\t\t\t\t\tthis.emit('stateChanged');\n\t\t\t\t},\n\t\t\t\tonReject: (): void => {\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'receiver');\n\t\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'sender');\n\t\t\t\t\tthis.emit('holderror');\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// Session properties used to pass options to the SessionDescriptionHandler:\n\t\t//\n\t\t// 1) Session.sessionDescriptionHandlerOptions\n\t\t//    SDH options for the initial INVITE transaction.\n\t\t//    - Used in all cases when handling the initial INVITE transaction as either UAC or UAS.\n\t\t//    - May be set directly at anytime.\n\t\t//    - May optionally be set via constructor option.\n\t\t//    - May optionally be set via options passed to Inviter.invite() or Invitation.accept().\n\t\t//\n\t\t// 2) Session.sessionDescriptionHandlerOptionsReInvite\n\t\t//    SDH options for re-INVITE transactions.\n\t\t//    - Used in all cases when handling a re-INVITE transaction as either UAC or UAS.\n\t\t//    - May be set directly at anytime.\n\t\t//    - May optionally be set via constructor option.\n\t\t//    - May optionally be set via options passed to Session.invite().\n\n\t\tconst sessionDescriptionHandlerOptions = session.sessionDescriptionHandlerOptionsReInvite as SessionDescriptionHandlerOptions;\n\t\tsessionDescriptionHandlerOptions.hold = holdState;\n\t\tsession.sessionDescriptionHandlerOptionsReInvite = sessionDescriptionHandlerOptions;\n\n\t\tconst { peerConnection } = sessionDescriptionHandler;\n\t\tif (!peerConnection) {\n\t\t\tthrow new Error('Peer connection closed.');\n\t\t}\n\t\treturn this.session\n\t\t\t?.invite(options)\n\t\t\t.then(() => {\n\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'receiver');\n\t\t\t\ttoggleMediaStreamTracks(!this._held, session, 'sender');\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tif (error instanceof RequestPendingError) {\n\t\t\t\t\tconsole.error(`[${this.session?.id}] A hold request is already in progress.`);\n\t\t\t\t}\n\t\t\t\tthis.emit('holderror');\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\tstatic async create(config: VoIPUserConfiguration, mediaRenderer?: IMediaStreamRenderer): Promise<VoIPUser> {\n\t\tconst voip = new VoIPUser(config, mediaRenderer);\n\t\tawait voip.init();\n\t\treturn voip;\n\t}\n\n\t/**\n\t * Sends SIP OPTIONS message to asterisk\n\t *\n\t * There is an interesting problem that happens with Asterisk.\n\t * After websocket connection succeeds and if there is no SIP\n\t * message goes in 30 seconds, asterisk disconnects the socket.\n\t *\n\t * If any SIP message goes before 30 seconds, asterisk holds the connection.\n\t * This problem could be solved in multiple ways. One is that\n\t * whenever disconnect happens make sure that the socket is connected back using\n\t * this.userAgent.reconnect() method. But this is expensive as it does connect-disconnect\n\t * every 30 seconds till we send register message.\n\t *\n\t * Another approach is to send SIP OPTIONS just to tell server that\n\t * there is a UA using this socket. This is implemented below\n\t */\n\n\tsendOptions(outgoingRequestDelegate?: OutgoingRequestDelegate): void {\n\t\tconst uri = new URI('sip', this.config.authUserName, this.config.sipRegistrarHostnameOrIP);\n\t\tconst outgoingMessage = this.userAgent?.userAgentCore.makeOutgoingRequestMessage('OPTIONS', uri, uri, uri, {});\n\t\tif (outgoingMessage) {\n\t\t\tthis.userAgent?.userAgentCore.request(outgoingMessage, outgoingRequestDelegate);\n\t\t}\n\t}\n\t/**\n\t * Public method called from outside to register the SIP UA with call server.\n\t * @remarks\n\t */\n\n\tregister(): void {\n\t\tthis._opInProgress = Operation.OP_REGISTER;\n\t\tthis.registerer?.register({\n\t\t\trequestDelegate: {\n\t\t\t\tonAccept: this.onRegistrationRequestAccept.bind(this),\n\t\t\t\tonReject: this.onRegistrationRequestReject.bind(this),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Public method called from outside to unregister the SIP UA.\n\t * @remarks\n\t */\n\n\tunregister(): void {\n\t\tthis._opInProgress = Operation.OP_UNREGISTER;\n\t\tthis.registerer?.unregister({\n\t\t\tall: true,\n\t\t\trequestDelegate: {\n\t\t\t\tonAccept: this.onRegistrationRequestAccept.bind(this),\n\t\t\t\tonReject: this.onRegistrationRequestReject.bind(this),\n\t\t\t},\n\t\t});\n\t}\n\t/**\n\t * Public method called from outside to accept incoming call.\n\t * @remarks\n\t */\n\n\tasync acceptCall(mediaRenderer: IMediaStreamRenderer): Promise<void> {\n\t\tif (mediaRenderer) {\n\t\t\tthis.mediaStreamRendered = mediaRenderer;\n\t\t}\n\t\t// Call state must be in offer_received.\n\t\tif (this._callState === 'OFFER_RECEIVED' && this._opInProgress === Operation.OP_PROCESS_INVITE) {\n\t\t\tthis._callState = 'ANSWER_SENT';\n\t\t\t// Something is wrong, this session is not an instance of INVITE\n\t\t\tif (!(this.session instanceof Invitation)) {\n\t\t\t\tthrow new Error('Session not instance of Invitation.');\n\t\t\t}\n\t\t\t/**\n\t\t\t * It is important to decide when to add video option to the outgoing offer.\n\t\t\t * This would matter when the reinvite goes out (In case of hold/unhold)\n\t\t\t * This was added because there were failures in hold-unhold.\n\t\t\t * The scenario was that if this client does hold-unhold first, and remote client does\n\t\t\t * later, remote client goes in inconsistent state and hold-unhold does not work\n\t\t\t * Where as if the remote client does hold-unhold first, this client can do it any number\n\t\t\t * of times.\n\t\t\t *\n\t\t\t * Logic below works as follows\n\t\t\t * Local video settings = true, incoming invite has video mline = false -> Any offer = audiovideo/ answer = audioonly\n\t\t\t * Local video settings = true, incoming invite has video mline = true -> Any offer = audiovideo/ answer = audiovideo\n\t\t\t * Local video settings = false, incoming invite has video mline = false -> Any offer = audioonly/ answer = audioonly\n\t\t\t * Local video settings = false, incoming invite has video mline = true -> Any offer = audioonly/ answer = audioonly\n\t\t\t *\n\t\t\t */\n\t\t\tlet videoInvite = !!this.config.enableVideo;\n\n\t\t\tconst { body } = this.session;\n\t\t\tif (body && body.indexOf('m=video') === -1) {\n\t\t\t\tvideoInvite = false;\n\t\t\t}\n\n\t\t\tconst invitationAcceptOptions: InvitationAcceptOptions = {\n\t\t\t\tsessionDescriptionHandlerOptions: {\n\t\t\t\t\tconstraints: {\n\t\t\t\t\t\taudio: true,\n\t\t\t\t\t\tvideo: !!this.config.enableVideo && videoInvite,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn this.session.accept(invitationAcceptOptions);\n\t\t}\n\t\tthrow new Error('Something went wrong');\n\t}\n\n\t/* Helper routines for checking call actions BEGIN */\n\n\tprivate canRejectCall(): boolean {\n\t\treturn ['OFFER_RECEIVED', 'OFFER_SENT'].includes(this._callState);\n\t}\n\n\tprivate canEndOrHoldCall(): boolean {\n\t\treturn ['ANSWER_SENT', 'ANSWER_RECEIVED', 'IN_CALL', 'ON_HOLD', 'OFFER_SENT'].includes(this._callState);\n\t}\n\n\t/* Helper routines for checking call actions END */\n\n\t/**\n\t * Public method called from outside to reject a call.\n\t * @remarks\n\t */\n\trejectCall(): Promise<void> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Session does not exist.');\n\t\t}\n\t\tif (!this.canRejectCall()) {\n\t\t\tthrow new Error(`Incorrect call State = ${this.callState}`);\n\t\t}\n\t\tif (!(this.session instanceof Invitation)) {\n\t\t\tthrow new Error('Session not instance of Invitation.');\n\t\t}\n\t\treturn this.session.reject();\n\t}\n\n\t/**\n\t * Public method called from outside to end a call.\n\t * @remarks\n\t */\n\tasync endCall(): Promise<OutgoingByeRequest | void> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Session does not exist.');\n\t\t}\n\t\tif (!this.canEndOrHoldCall()) {\n\t\t\tthrow new Error(`Incorrect call State = ${this.callState}`);\n\t\t}\n\n\t\t// When call ends, force state to be revisited\n\t\tthis.emit('stateChanged');\n\t\tswitch (this.session.state) {\n\t\t\tcase SessionState.Initial:\n\t\t\t\tif (this.session instanceof Invitation) {\n\t\t\t\t\treturn this.session.reject();\n\t\t\t\t}\n\t\t\t\tthrow new Error('Session not instance of Invitation.');\n\t\t\tcase SessionState.Establishing:\n\t\t\t\tif (this.session instanceof Invitation) {\n\t\t\t\t\treturn this.session.reject();\n\t\t\t\t}\n\t\t\t\tif (this.session instanceof Inviter) {\n\t\t\t\t\treturn this.session.cancel();\n\t\t\t\t}\n\t\t\t\tthrow new Error('Session not instance of Invitation.');\n\t\t\tcase SessionState.Established:\n\t\t\t\treturn this.session.bye();\n\t\t\tcase SessionState.Terminating:\n\t\t\t\tbreak;\n\t\t\tcase SessionState.Terminated:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown state');\n\t\t}\n\t}\n\n\t/**\n\t * Public method called from outside to mute the call.\n\t * @remarks\n\t */\n\tasync muteCall(muteState: boolean): Promise<void> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Session does not exist.');\n\t\t}\n\t\tif (this._callState !== 'IN_CALL') {\n\t\t\tthrow new Error(`Incorrect call State = ${this.callState}`);\n\t\t}\n\t\tthis.handleMuteUnmute(muteState);\n\t}\n\n\t/**\n\t * Public method called from outside to hold the call.\n\t * @remarks\n\t */\n\tasync holdCall(holdState: boolean): Promise<void> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Session does not exist.');\n\t\t}\n\t\tif (!this.canEndOrHoldCall()) {\n\t\t\tthrow new Error(`Incorrect call State = ${this.callState}`);\n\t\t}\n\t\tthis.handleHoldUnhold(holdState);\n\t}\n\n\t/* CallEventDelegate implementation end */\n\tisReady(): boolean {\n\t\treturn this.state.isReady;\n\t}\n\n\t/**\n\t * This function allows to change the media renderer media elements.\n\t */\n\tswitchMediaRenderer(mediaRenderer: IMediaStreamRenderer): void {\n\t\tif (this.remoteStream) {\n\t\t\tthis.mediaStreamRendered = mediaRenderer;\n\t\t\tthis.remoteStream.init(mediaRenderer.remoteMediaElement);\n\t\t\tthis.remoteStream.onTrackAdded(this.onTrackAdded.bind(this));\n\t\t\tthis.remoteStream.onTrackRemoved(this.onTrackRemoved.bind(this));\n\t\t\tthis.remoteStream.play();\n\t\t}\n\t}\n\n\tsetWorkflowMode(mode: WorkflowTypes): void {\n\t\tthis.mode = mode;\n\t\tif (mode === WorkflowTypes.CONTACT_CENTER_USER) {\n\t\t\tthis.queueInfo = new QueueAggregator();\n\t\t}\n\t}\n\n\tsetMembershipSubscription(subscription: IQueueMembershipSubscription): void {\n\t\tif (this.mode !== WorkflowTypes.CONTACT_CENTER_USER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.queueInfo?.setMembership(subscription);\n\t}\n\n\tgetAggregator(): QueueAggregator {\n\t\treturn this.queueInfo;\n\t}\n\n\tgetRegistrarState(): string | undefined {\n\t\treturn this.registerer?.state.toString().toLocaleLowerCase();\n\t}\n\n\tclear(): void {\n\t\tthis._opInProgress = Operation.OP_CLEANUP;\n\t\t/** Socket reconnection is attempted when the socket is disconnected with some error.\n\t\t * While disconnecting, if there is any socket error, there should be no reconnection attempt.\n\t\t * So when userAgent.stop() is called which closes the sockets, it should be made sure that\n\t\t * if the socket is disconnected with error, connection attempts are not started or\n\t\t * if there are any previously ongoing attempts, they should be terminated.\n\t\t * flag attemptReconnect is used for ensuring this.\n\t\t */\n\t\tthis.stop = true;\n\t\tthis.userAgent?.stop();\n\t\tthis.registerer?.dispose();\n\t\tthis._connectionState = 'STOP';\n\n\t\tif (this.userAgent) {\n\t\t\tthis.userAgent.transport.onConnect = undefined;\n\t\t\tthis.userAgent.transport.onDisconnect = undefined;\n\t\t\twindow.removeEventListener('online', this.onlineNetworkHandler);\n\t\t\twindow.removeEventListener('offline', this.offlineNetworkHandler);\n\t\t}\n\t}\n\n\tonNetworkEvent(event: SocketEventKeys, handler: () => void): void {\n\t\tthis.networkEmitter.on(event, handler);\n\t}\n\n\toffNetworkEvent(event: SocketEventKeys, handler: () => void): void {\n\t\tthis.networkEmitter.off(event, handler);\n\t}\n\n\t/**\n\t * Connection is lost in 3 ways\n\t * 1. When local network is lost (Router is disconnected, switching networks, devtools->network->offline)\n\t * In this case, the SIP.js's transport layer does not detect the disconnection. Hence, it does not\n\t * call |onDisconnect|. To detect this kind of disconnection, window event listeners have been added.\n\t * These event listeners would be get called when the browser detects that network is offline or online.\n\t * When the network is restored, the code tries to reconnect. The useragent.transport \"does not\" generate the\n\t * onconnected event in this case as well. so onlineNetworkHandler calls attemptReconnection.\n\t * Which calls attemptRegistrationPostRecovery based on correct state. attemptRegistrationPostRecovery first tries to\n\t * unregister and then re-register.\n\t * Important note : We use the event listeners using bind function object offlineNetworkHandler and onlineNetworkHandler\n\t * It is done so because the same event handlers need to be used for removeEventListener, which becomes impossible\n\t * if done inline.\n\t *\n\t * 2. Computer goes to sleep. In this case onDisconnect is triggered. The code tries to reconnect but cant go ahead\n\t * as it goes to sleep. On waking up, The attemptReconnection gets executed, connection is completed.\n\t * In this case, it generates onConnected event. In this onConnected event it calls attemptRegistrationPostRecovery\n\t *\n\t * 3. When Asterisk disconnects all the endpoints either because it crashes or restarted,\n\t * As soon as the agent successfully connects to asterisk, it should re-register\n\t *\n\t * Retry count :\n\t * connectionRetryCount is the parameter called |Retry Count| in\n\t * Administration -> Call Center -> Server configuration -> Retry count.\n\t * The retry is implemented with backoff, maxbackoff = 8 seconds.\n\t * For continuous retries (In case Asterisk restart happens) Set this parameter to -1.\n\t *\n\t * Important to note is how attemptRegistrationPostRecovery is called. In case of\n\t * the router connection loss or while switching the networks,\n\t * there is no disconnect and connect event from the transport layer of the userAgent.\n\t * So in this case, when the connection is successful after reconnect, the code should try to re-register by calling\n\t * attemptRegistrationPostRecovery.\n\t * In case of computer waking from sleep or asterisk getting restored, connect and disconnect events are generated.\n\t * In this case, re-registration should be triggered (by calling) only when onConnected gets called and not otherwise.\n\t */\n\n\tasync attemptReconnection(reconnectionAttempt = 0, checkRegistration = false): Promise<void> {\n\t\tconst reconnectionAttempts = this.connectionRetryCount;\n\t\tthis._connectionState = 'SERVER_RECONNECTING';\n\t\tif (!this.userAgent) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.stop) {\n\t\t\treturn;\n\t\t}\n\t\t// reconnectionAttempts == -1 then keep continuously trying\n\t\tif (reconnectionAttempts !== -1 && reconnectionAttempt > reconnectionAttempts) {\n\t\t\tthis._connectionState = 'ERROR';\n\t\t\treturn;\n\t\t}\n\n\t\tconst reconnectionDelay = Math.pow(2, reconnectionAttempt % 4);\n\n\t\tconsole.error(`Attempting to reconnect with backoff due to network loss. Backoff time [${reconnectionDelay}]`);\n\t\tsetTimeout(() => {\n\t\t\tif (this.stop) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._connectionState === 'SERVER_CONNECTED') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.userAgent\n\t\t\t\t?.reconnect()\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis._connectionState = 'SERVER_CONNECTED';\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.attemptReconnection(++reconnectionAttempt, checkRegistration);\n\t\t\t\t});\n\t\t}, reconnectionDelay * 1000);\n\t}\n\n\tasync attemptPostRecoveryRoutine(): Promise<void> {\n\t\t/**\n\t\t * It might happen that the whole network loss can happen\n\t\t * while there is ongoing call. In that case, we want to maintain\n\t\t * the call.\n\t\t *\n\t\t * So after re-registration, it should remain in the same state.\n\t\t * */\n\t\tthis.sendOptions({\n\t\t\tonAccept: (): void => {\n\t\t\t\tthis.attemptPostRecoveryRegistrationRoutine();\n\t\t\t},\n\t\t\tonReject: (error: unknown): void => {\n\t\t\t\tconsole.error(`[${error}] Failed to do options in attemptPostRecoveryRoutine()`);\n\t\t\t},\n\t\t});\n\t}\n\n\tasync sendKeepAliveAndWaitForResponse(withDebounce = false): Promise<boolean> {\n\t\tconst promise = new Promise<boolean>((resolve, reject) => {\n\t\t\tlet keepAliveAccepted = false;\n\t\t\tlet responseWaitTime = this.optionsKeepaliveInterval / 2;\n\t\t\tif (withDebounce) {\n\t\t\t\tresponseWaitTime += this.optionsKeepAliveDebounceTimeInSec;\n\t\t\t}\n\n\t\t\tthis.sendOptions({\n\t\t\t\tonAccept: (): void => {\n\t\t\t\t\tkeepAliveAccepted = true;\n\t\t\t\t},\n\t\t\t\tonReject: (_error: unknown): void => {\n\t\t\t\t\tconsole.error('Failed to do options.');\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetTimeout(async () => {\n\t\t\t\tif (!keepAliveAccepted) {\n\t\t\t\t\treject(false);\n\t\t\t\t} else {\n\t\t\t\t\tif (this.attemptRegistration) {\n\t\t\t\t\t\tthis.attemptPostRecoveryRoutine();\n\t\t\t\t\t\tthis.attemptRegistration = false;\n\t\t\t\t\t}\n\t\t\t\t\tresolve(true);\n\t\t\t\t}\n\t\t\t}, responseWaitTime * 1000);\n\t\t});\n\t\treturn promise;\n\t}\n\n\tasync startOptionsPingForUnstableNetworks(): Promise<void> {\n\t\tsetTimeout(async () => {\n\t\t\tif (!this.userAgent || this.stop) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._connectionState !== 'SERVER_RECONNECTING') {\n\t\t\t\tlet isConnected = false;\n\t\t\t\ttry {\n\t\t\t\t\tawait this.sendKeepAliveAndWaitForResponse();\n\t\t\t\t\tisConnected = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`[${e}] Failed to do options ping.`);\n\t\t\t\t} finally {\n\t\t\t\t\t// Send event only if it's a \"change\" on the status (avoid unnecessary event flooding)\n\t\t\t\t\t!isConnected && this.networkEmitter.emit('disconnected');\n\t\t\t\t\tisConnected && this.networkEmitter.emit('connected');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Each seconds check if the network can reach asterisk. If not, try to reconnect\n\t\t\tthis.startOptionsPingForUnstableNetworks();\n\t\t}, this.optionsKeepaliveInterval * 1000);\n\t}\n\n\tasync attemptPostRecoveryRegistrationRoutine(): Promise<void> {\n\t\t/**\n\t\t * It might happen that the whole network loss can happen\n\t\t * while there is ongoing call. In that case, we want to maintain\n\t\t * the call.\n\t\t *\n\t\t * So after re-registration, it should remain in the same state.\n\t\t * */\n\t\tconst promise = new Promise<void>((_resolve, _reject) => {\n\t\t\tthis.registerer?.unregister({\n\t\t\t\tall: true,\n\t\t\t\trequestDelegate: {\n\t\t\t\t\tonAccept: (): void => {\n\t\t\t\t\t\t_resolve();\n\t\t\t\t\t},\n\t\t\t\t\tonReject: (error): void => {\n\t\t\t\t\t\tconsole.error(`[${error}] While unregistering after recovery`);\n\t\t\t\t\t\tthis.emit('unregistrationerror', error);\n\t\t\t\t\t\t_reject('Error in Unregistering');\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t\ttry {\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\tconsole.error(`[${error}] While waiting for unregister promise`);\n\t\t}\n\t\tthis.registerer?.register({\n\t\t\trequestDelegate: {\n\t\t\t\tonReject: (error): void => {\n\t\t\t\t\tthis._callState = 'UNREGISTERED';\n\t\t\t\t\tthis.emit('registrationerror', error);\n\t\t\t\t\tthis.emit('stateChanged');\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync changeAudioInputDevice(constraints: MediaStreamConstraints): Promise<boolean> {\n\t\tif (!this.session) {\n\t\t\tconsole.warn('changeAudioInputDevice() : No session. Returning');\n\t\t\treturn false;\n\t\t}\n\t\tconst newStream = await LocalStream.requestNewStream(constraints, this.session);\n\t\tif (!newStream) {\n\t\t\tconsole.warn('changeAudioInputDevice() : Unable to get local stream. Returning');\n\t\t\treturn false;\n\t\t}\n\t\tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;\n\t\tif (!peerConnection) {\n\t\t\tconsole.warn('changeAudioInputDevice() : No peer connection. Returning');\n\t\t\treturn false;\n\t\t}\n\t\tLocalStream.replaceTrack(peerConnection, newStream, 'audio');\n\t\treturn true;\n\t}\n\n\t// Commenting this as Video Configuration is not part of the scope for now\n\t// async changeVideoInputDevice(selectedVideoDevices: IDevice): Promise<boolean> {\n\t// \tif (!this.session) {\n\t// \t\tconsole.warn('changeVideoInputDevice() : No session. Returning');\n\t// \t\treturn false;\n\t// \t}\n\t// \tif (!this.config.enableVideo || this.deviceManager.hasVideoInputDevice()) {\n\t// \t\tconsole.warn('changeVideoInputDevice() : Unable change video device. Returning');\n\t// \t\treturn false;\n\t// \t}\n\t// \tthis.deviceManager.changeVideoInputDevice(selectedVideoDevices);\n\t// \tconst newStream = await LocalStream.requestNewStream(this.deviceManager.getConstraints('video'), this.session);\n\t// \tif (!newStream) {\n\t// \t\tconsole.warn('changeVideoInputDevice() : Unable to get local stream. Returning');\n\t// \t\treturn false;\n\t// \t}\n\t// \tconst { peerConnection } = this.session?.sessionDescriptionHandler as SessionDescriptionHandler;\n\t// \tif (!peerConnection) {\n\t// \t\tconsole.warn('changeVideoInputDevice() : No peer connection. Returning');\n\t// \t\treturn false;\n\t// \t}\n\t// \tLocalStream.replaceTrack(peerConnection, newStream, 'video');\n\t// \treturn true;\n\t// }\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\tasync makeCallURI(_callee: string, _mediaRenderer?: IMediaStreamRenderer): Promise<void> {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tasync makeCall(_calleeNumber: string): Promise<void> {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n",null],"names":["module","link","default","v","_regeneratorRuntime","_createClass","_assertThisInitialized","_inheritsLoose","export","VoIPUser","Operation","UserState","WorkflowTypes","Emitter","UserAgent","Invitation","SessionState","Registerer","RequestPendingError","Inviter","URI","SessionDescriptionHandler","toggleMediaStreamTracks","LocalStream","QueueAggregator","RemoteStream","_Emitter","config","mediaRenderer","_this","call","state","isReady","enableVideo","remoteStream","userAgentOptions","userAgent","registerer","mediaStreamRendered","_connectionState","_held","mode","queueInfo","connectionRetryCount","stop","networkEmitter","offlineNetworkHandler","onlineNetworkHandler","optionsKeepaliveInterval","optionsKeepAliveDebounceTimeInSec","attemptRegistration","session","_callState","_callerInfo","_userState","IDLE","_opInProgress","OP_NONE","onNetworkRestored","bind","onNetworkLost","_proto","prototype","init","sipUri","transportOptions","sdpFactoryOptions","_this2","async","_context2","prev","next","authUserName","sipRegistrarHostnameOrIP","server","webSocketURI","connectionTimeout","keepAliveInterval","iceGatheringTimeout","peerConnectionConfiguration","iceServers","delegate","onInvite","_callee2","invitation","_callee2$","_context","awrap","handleIncomingCall","Promise","authorizationPassword","authPassword","authorizationUsername","uri","makeURI","sessionDescriptionHandlerFactoryOptions","logConfiguration","logLevel","transport","isConnected","OP_CONNECT","onConnect","onConnected","onDisconnect","onDisconnected","window","addEventListener","start","enableKeepAliveUsingOptionsForUnstableNetworks","startOptionsPingForUnstableNetworks","t0","_context3","sendOptions","emit","callState","error","attemptReconnection","onRegistrationRequestAccept","OP_REGISTER","OP_UNREGISTER","onRegistrationRequestReject","callerInfo","_context4","OP_PROCESS_INVITE","UAS","setupSessionEventHandlers","callerId","remoteIdentity","user","callerName","displayName","host","abrupt","reject","_this$session","_this3","stateChange","addListener","_this3$remoteStream","Initial","Establishing","userState","callInfo","Established","UAC","setupRemoteMedia","Terminating","Terminated","undefined","clear","Error","onTrackAdded","_event","console","log","onTrackRemoved","_this$session2","_this$mediaStreamRend","sdh","sessionDescriptionHandler","remoteMediaStream","mediaElement","remoteMediaElement","play","handleMuteUnmute","muteState","options","_this$session3","_this$session4","_this4","_context5","resolve","requestDelegate","onAccept","onReject","peerConnection","invite","then","catch","_this4$session","id","handleHoldUnhold","holdState","sessionDescriptionHandlerOptions","_this$session5","_this$session6","_this5","_context6","sessionDescriptionHandlerOptionsReInvite","hold","_this5$session","create","voip","_context7","outgoingRequestDelegate","_this$userAgent","_this$userAgent2","outgoingMessage","userAgentCore","makeOutgoingRequestMessage","request","register","_this$registerer","unregister","_this$registerer2","all","acceptCall","videoInvite","body","invitationAcceptOptions","_context8","indexOf","constraints","audio","video","accept","canRejectCall","includes","canEndOrHoldCall","rejectCall","endCall","_context9","cancel","bye","muteCall","_context10","holdCall","_context11","switchMediaRenderer","setWorkflowMode","CONTACT_CENTER_USER","setMembershipSubscription","subscription","_this$queueInfo","setMembership","getAggregator","getRegistrarState","_this$registerer3","toString","toLocaleLowerCase","_this$userAgent3","_this$registerer4","OP_CLEANUP","dispose","removeEventListener","onNetworkEvent","event","handler","on","offNetworkEvent","off","reconnectionAttempt","checkRegistration","reconnectionAttempts","reconnectionDelay","_this6","_args12","arguments","_context12","length","Math","pow","setTimeout","_this6$userAgent","reconnect","attemptPostRecoveryRoutine","_this7","_context13","attemptPostRecoveryRegistrationRoutine","sendKeepAliveAndWaitForResponse","withDebounce","promise","_this8","_args15","_context15","keepAliveAccepted","responseWaitTime","_error","_callee3","_callee3$","_context14","_this9","_context17","_callee4","_callee4$","_context16","finish","_this$registerer5","_this10","_context18","_resolve","_reject","_this10$registerer","changeAudioInputDevice","_this$session7","newStream","_context19","warn","requestNewStream","sent","_this$session$session","replaceTrack","makeCallURI","_callee","_mediaRenderer","_context20","makeCall","_calleeNumber","_context21","key","get","caller","_this$session8","localMediaStream"],"mappings":"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"}