)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/voip/LocalStream.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["/**\n * This class is used for local stream manipulation.\n * @remarks\n * This class does not really store any local stream for the reason\n * that the local stream tracks are stored in the peer connection.\n *\n * This simply provides necessary methods for stream manipulation.\n *\n * Currently it does not use any of its base functionality. Nevertheless\n * there might be a need that we may want to do some stream operations\n * such as closing of tracks, in future. For that purpose, it is written\n * this way.\n *\n */\n\nimport type { Session } from 'sip.js';\nimport type { MediaStreamFactory, SessionDescriptionHandler } from 'sip.js/lib/platform/web';\nimport { defaultMediaStreamFactory } from 'sip.js/lib/platform/web';\n\nimport Stream from './Stream';\n\nexport default class LocalStream extends Stream {\n\tstatic async requestNewStream(constraints: MediaStreamConstraints, session: Session): Promise<MediaStream | undefined> {\n\t\tconst factory: MediaStreamFactory = defaultMediaStreamFactory();\n\t\tif (session?.sessionDescriptionHandler) {\n\t\t\treturn factory(constraints, session.sessionDescriptionHandler as SessionDescriptionHandler);\n\t\t}\n\t}\n\n\tstatic async replaceTrack(peerConnection: RTCPeerConnection, newStream: MediaStream, mediaType?: 'audio' | 'video'): Promise<boolean> {\n\t\tconst senders = peerConnection.getSenders();\n\t\tif (!senders) {\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * This will be called when media device change happens.\n\t\t * This needs to be called externally when the device change occurs.\n\t\t * This function first acquires the new stream based on device selection\n\t\t * and then replaces the track in the sender of existing stream by track acquired\n\t\t * by caputuring new stream.\n\t\t *\n\t\t * Notes:\n\t\t * Each sender represents a track in the RTCPeerConnection.\n\t\t * Peer connection will contain single track for\n\t\t * each, audio, video and data.\n\t\t * Furthermore, We are assuming that\n\t\t * newly captured stream will have a single track for each media type. i.e\n\t\t * audio video and data. But this assumption may not be true atleast in theory. One may see multiple\n\t\t * audio track in the captured stream or multiple senders for same kind in the peer connection\n\t\t * If/When such situation arrives in future, we may need to revisit the track replacement logic.\n\t\t * */\n\n\t\tswitch (mediaType) {\n\t\t\tcase 'audio': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getAudioTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No audio tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'audio') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tcase 'video': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No video tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'video') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < newTracks.length; j++) {\n\t\t\t\t\t\tif (senders[i].track?.kind === newTracks[j].kind) {\n\t\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[j]);\n\t\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t}\n\t}\n}\n",null],"names":["module","default","_regeneratorRuntime","_inheritsLoose","LocalStream","defaultMediaStreamFactory","v","Stream","_Stream","apply","arguments","requestNewStream","constraints","session","factory","async","_context","prev","next","sessionDescriptionHandler","abrupt","stop","Promise","replaceTrack","peerConnection","newStream","mediaType","senders","replaced","newTracks","i","_senders$i$track","_replaced","_newTracks","_i","_senders$_i$track","_replaced2","_newTracks2","_i2","j","_senders$_i2$track","_context2","getSenders","t0","getAudioTracks","console","warn","length","track","kind","getVideoTracks"],"mappings":"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"}