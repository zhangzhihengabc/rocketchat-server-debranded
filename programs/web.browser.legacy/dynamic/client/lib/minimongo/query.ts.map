)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/lib/minimongo/query.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { compareBSONValues, getBSONType } from './bson';\nimport { equals, flatSome, isObject, some } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport type { BSONType, FieldExpression, Query } from './types';\n\nconst isArrayOfFields = <T>(values: unknown[]): values is T[] =>\n\tvalues.every((value) => ['number', 'string', 'symbol'].includes(typeof value));\n\nconst $in = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tlet index: Record<T, T> | null = null;\n\tif (isArrayOfFields<T>(operand)) {\n\t\tindex = {} as Record<T, T>;\n\t\tfor (const operandElement of operand) {\n\t\t\tindex[operandElement] = operandElement;\n\t\t}\n\t}\n\n\treturn (value: T): boolean =>\n\t\tsome(value, (x) => {\n\t\t\tif (typeof x === 'string' && index !== null) {\n\t\t\t\treturn !!index[x];\n\t\t\t}\n\n\t\t\treturn operand.some((operandElement) => equals(operandElement, x));\n\t\t});\n};\n\nconst $nin = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tconst isIn = $in(operand, undefined);\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !isIn(value);\n\t};\n};\n\nconst $all =\n\t<T>(operand: T[], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn operand.every((operandElement) => value.some((valueElement) => equals(operandElement, valueElement)));\n\t};\n\nconst $lt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) < 0);\n\nconst $lte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) <= 0);\n\nconst $gt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) > 0);\n\nconst $gte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) >= 0);\n\nconst $ne =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\t!some(value, (x) => equals(x, operand));\n\nconst $exists =\n\t<T>(operand: boolean, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\toperand === (value !== undefined);\n\nconst $mod =\n\t<T>([divisor, remainder]: [number, number], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => Number(x) % divisor === remainder);\n\nconst $size =\n\t<T>(operand: number, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tArray.isArray(value) && operand === value.length;\n\nconst $type =\n\t<T>(operand: BSONType, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => getBSONType(x) === operand);\n\t};\n\nconst $regex = <T>(operand: string | RegExp, options: string): ((value: T) => boolean) => {\n\tlet regex: RegExp;\n\n\tif (options !== undefined) {\n\t\tconst regexSource = operand instanceof RegExp ? operand.source : operand;\n\t\tregex = new RegExp(regexSource, options);\n\t} else if (!(operand instanceof RegExp)) {\n\t\tregex = new RegExp(operand);\n\t}\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n};\n\nconst $elemMatch = <T>(operand: Query<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileDocumentSelector(operand);\n\n\treturn (value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.some((x) => matcher(x));\n\t};\n};\n\nconst $not = <T>(operand: FieldExpression<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileValueSelector(operand);\n\treturn (value: T): boolean => !matcher(value);\n};\n\nconst dummyOperator =\n\t<T>(_operand: unknown, _options: undefined): ((value: T) => boolean) =>\n\t(_value: T): boolean =>\n\t\ttrue;\n\nconst $options = dummyOperator;\nconst $near = dummyOperator;\nconst $geoIntersects = dummyOperator;\n\nconst valueOperators = {\n\t$in,\n\t$nin,\n\t$all,\n\t$lt,\n\t$lte,\n\t$gt,\n\t$gte,\n\t$ne,\n\t$exists,\n\t$mod,\n\t$size,\n\t$type,\n\t$regex,\n\t$elemMatch,\n\t$not,\n\t$options,\n\t$near,\n\t$geoIntersects,\n} as const;\n\nconst $and = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => f(doc));\n};\n\nconst $or = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.some((f) => f(doc));\n};\n\nconst $nor = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => !f(doc));\n};\n\nconst $where = <T>(selectorValue: string | ((doc: T) => boolean)): ((doc: T) => boolean) => {\n\tconst fn = selectorValue instanceof Function ? selectorValue : Function(`return ${selectorValue}`);\n\treturn (doc: T): boolean => !!fn.call(doc);\n};\n\nconst logicalOperators = {\n\t$and,\n\t$or,\n\t$nor,\n\t$where,\n} as const;\n\nconst isValueOperator = (operator: string): operator is keyof typeof valueOperators => operator in valueOperators;\n\nconst isLogicalOperator = (operator: string): operator is keyof typeof logicalOperators => operator in logicalOperators;\n\nconst hasValueOperators = <T>(valueSelector: FieldExpression<T>): boolean =>\n\tObject.keys(valueSelector).every((key) => key.slice(0, 1) === '$');\n\nconst compileUndefinedOrNullSelector =\n\t<T>(): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === undefined || x === null);\n\nconst compilePrimitiveSelector =\n\t<T>(primitive: T) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === primitive);\n\nconst compileRegexSelector =\n\t<T>(regex: RegExp) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n\nconst compileArraySelector =\n\t<T>(expected: T) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn some(value, (x) => equals(expected, x));\n\t};\n\nconst compileValueOperatorsSelector = <T>(expression: FieldExpression<T>): ((value: T) => boolean) => {\n\tconst operatorFunctions: ((value: T) => boolean)[] = [];\n\tfor (const operator of Object.keys(expression) as (keyof FieldExpression<T>)[]) {\n\t\tif (!isValueOperator(operator)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst operand = expression[operator];\n\t\tconst operation = valueOperators[operator] as unknown as (operand: unknown, options: unknown) => (value: T) => boolean;\n\t\toperatorFunctions.push(operation(operand, expression.$options));\n\t}\n\treturn (value: T): boolean => operatorFunctions.every((f) => f(value));\n};\n\nconst compileValueSelector = <T>(valueSelector: FieldExpression<T>[keyof FieldExpression<T>]): ((value: T) => boolean) => {\n\tif (valueSelector === undefined || valueSelector === null) {\n\t\treturn compileUndefinedOrNullSelector();\n\t}\n\n\tif (!isObject(valueSelector)) {\n\t\treturn compilePrimitiveSelector(valueSelector as T);\n\t}\n\n\tif (valueSelector instanceof RegExp) {\n\t\treturn compileRegexSelector(valueSelector);\n\t}\n\n\tif (Array.isArray(valueSelector)) {\n\t\treturn compileArraySelector(valueSelector as unknown as T);\n\t}\n\n\tif (hasValueOperators<T>(valueSelector)) {\n\t\treturn compileValueOperatorsSelector(valueSelector);\n\t}\n\n\treturn (value: T): boolean => flatSome(value, (x) => equals(valueSelector, x as unknown as object));\n};\n\nexport const compileDocumentSelector = <T>(docSelector: Query<T> | FieldExpression<T>['$where'][]): ((doc: T) => boolean) => {\n\tconst perKeySelectors = Object.entries(docSelector).map(([key, subSelector]) => {\n\t\tif (subSelector === undefined) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tif (isLogicalOperator(key)) {\n\t\t\tswitch (key) {\n\t\t\t\tcase '$and':\n\t\t\t\t\treturn $and(subSelector);\n\n\t\t\t\tcase '$or':\n\t\t\t\t\treturn $or(subSelector);\n\n\t\t\t\tcase '$nor':\n\t\t\t\t\treturn $nor(subSelector);\n\n\t\t\t\tcase '$where':\n\t\t\t\t\treturn $where(subSelector);\n\t\t\t}\n\t\t}\n\n\t\tconst lookUpByIndex = createLookupFunction(key);\n\t\tconst valueSelectorFunc = compileValueSelector(subSelector);\n\t\treturn (doc: T): boolean => {\n\t\t\tconst branchValues = lookUpByIndex(doc);\n\t\t\treturn branchValues.some(valueSelectorFunc);\n\t\t};\n\t});\n\n\treturn (doc: T): boolean => perKeySelectors.every((f) => f(doc));\n};\n",null],"names":["module","link","default","_slicedToArray","_createForOfIteratorHelperLoose","_typeof","export","compileDocumentSelector","compareBSONValues","getBSONType","equals","flatSome","isObject","some","createLookupFunction","$in","operand","_options","index","values","every","value","includes","_step","_iterator","done","operandElement","x","dummyOperator","_operand","_value","valueOperators","$nin","isIn","undefined","$all","Array","isArray","valueElement","$lt","$lte","$gt","$gte","$ne","$exists","$mod","_ref","_ref2","divisor","remainder","Number","$size","length","$type","$regex","options","regex","regexSource","RegExp","source","test","String","$elemMatch","matcher","$not","compileValueSelector","$options","$near","$geoIntersects","$and","subSelector","subSelectorFunctions","map","doc","f","$or","$nor","$where","selectorValue","fn","Function","call","logicalOperators","compileValueOperatorsSelector","expression","operatorFunctions","_i","_Object$keys","Object","keys","operator","operation","push","valueSelector","key","slice","docSelector","perKeySelectors","entries","_ref3","_ref4","lookUpByIndex","valueSelectorFunc","branchValues"],"mappings":"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"}