)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/startup/roles.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRole } from '@rocket.chat/core-typings';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport { Roles } from '../../app/models/client';\nimport { CachedCollectionManager } from '../../app/ui-cached-collection/client';\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\n\nMeteor.startup(() => {\n\tCachedCollectionManager.onLogin(async () => {\n\t\tconst { roles } = await sdk.rest.get('/v1/roles.list');\n\t\t// if a role is checked before this collection is populated, it will return undefined\n\t\tRoles._collection._docs._map = new Map(roles.map((record) => [Roles._collection._docs._idStringify(record._id), record]));\n\t\tObject.values(Roles._collection.queries).forEach((query) => Roles._collection._recomputeResults(query));\n\n\t\tRoles.ready.set(true);\n\t});\n\n\ttype ClientAction = 'inserted' | 'updated' | 'removed' | 'changed';\n\n\tconst events: Record<string, ((role: IRole & { type?: ClientAction }) => void) | undefined> = {\n\t\tchanged: (role) => {\n\t\t\tdelete role.type;\n\t\t\tRoles.upsert({ _id: role._id }, role);\n\t\t},\n\t\tremoved: (role) => {\n\t\t\tRoles.remove({ _id: role._id });\n\t\t},\n\t};\n\n\tTracker.autorun((c) => {\n\t\tif (!Meteor.userId()) {\n\t\t\treturn;\n\t\t}\n\n\t\tTracker.afterFlush(() => {\n\t\t\tsdk.stream('roles', ['roles'], (role) => {\n\t\t\t\tevents[role.type]?.(role);\n\t\t\t});\n\t\t});\n\n\t\tc.stop();\n\t});\n});\n",null],"names":["_regeneratorRuntime","Meteor","Tracker","Roles","CachedCollectionManager","sdk","module","default","link","startup","onLogin","roles","async","_context","prev","next","awrap","rest","get","_await$sdk$rest$get","sent","_collection","_docs","_map","Map","map","record","_idStringify","_id","Object","values","queries","forEach","query","_recomputeResults","ready","set","stop","Promise","events","changed","role","type","upsert","removed","remove","autorun","c","userId","afterFlush","stream","_events$role$type","call"],"mappings":"2BACAA,EAAAC,EAAuCC,EAAAC,EAAAC,EAAAC,EAAhBC,EAAAA,IAAAA,CAAAA,6BAAgB,CAAAC,QAAAA,SAAAA,CAAAA,EAAAP,EAAAA,CAAA,CAAA,EAAA,GAA9BM,EAAQE,IAAA,CAAM,gBAAgB,CAAAP,OAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,iBAAAA,CAAAJ,QAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,0BAAAA,CAAAH,MAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,wCAAAA,CAAAF,wBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,uCAAAA,CAAAD,IAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAOvCJ,EAAOQ,OAAO,CAAC,WACdL,EAAwBM,OAAO,CAAC,WAAA,IAAAC,EAAA,OAAAX,EAAAY,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAAA,OAAAF,EAAAE,IAAA,CAAA,EAAAf,EAAAgB,KAAA,CACPX,EAAIY,IAAI,CAACC,GAAG,CAAC,kBAAiB,MAAA,EAA9CP,EAAKQ,AAAyCN,EAAAO,IAAA,CAA9CT,KAAK,CAEbR,EAAMkB,WAAW,CAACC,KAAK,CAACC,IAAI,CAAG,IAAIC,IAAIb,EAAMc,GAAG,CAAC,SAACC,CAAM,EAAA,MAAK,CAACvB,EAAMkB,WAAW,CAACC,KAAK,CAACK,YAAY,CAACD,EAAOE,GAAG,EAAGF,EAAO,IACvHG,OAAOC,MAAM,CAAC3B,EAAMkB,WAAW,CAACU,OAAO,EAAEC,OAAO,CAAC,SAACC,CAAK,EAAA,OAAK9B,EAAMkB,WAAW,CAACa,iBAAiB,CAACD,EAAM,GAEtG9B,EAAMgC,KAAK,CAACC,GAAG,CAAC,CAAA,EAAM,MAAA,EAAA,IAAA,MAAA,OAAAvB,EAAAwB,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,GAKvB,IAAMC,EAAwF,CAC7FC,QAAS,SAACC,CAAI,EACb,OAAOA,EAAKC,IAAI,CAChBvC,EAAMwC,MAAM,CAAC,CAAEf,IAAKa,EAAKb,GAAAA,AAAG,EAAIa,EACjC,EACAG,QAAS,SAACH,CAAI,EACbtC,EAAM0C,MAAM,CAAC,CAAEjB,IAAKa,EAAKb,GAAAA,AAAG,EAC7B,GAGD1B,EAAQ4C,OAAO,CAAC,SAACC,CAAC,EACZ9C,EAAO+C,MAAM,KAIlB9C,EAAQ+C,UAAU,CAAC,WAClB5C,EAAI6C,MAAM,CAAC,QAAS,CAAC,QAAQ,CAAE,SAACT,CAAI,EAAI,IAAAU,CACvC,AAAiB,QAAjBA,CAAAA,EAAAZ,CAAM,CAACE,EAAKC,IAAI,CAAC,AAAD,GAACS,AAAA,KAAA,IAAAA,GAAjBA,EAAAC,IAAA,CAAAb,EAAoBE,EACrB,EACD,GAEAM,EAAEV,IAAI,GACP,EACD"}