)]}'
{"version":3,"sources":["meteor://ðŸ’»app/client/startup/otr.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { isOTRMessage } from '@rocket.chat/core-typings';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport OTR from '../../app/otr/client/OTR';\nimport { OtrRoomState } from '../../app/otr/lib/OtrRoomState';\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\nimport { t } from '../../app/utils/lib/i18n';\nimport { onClientBeforeSendMessage } from '../lib/onClientBeforeSendMessage';\nimport { onClientMessageReceived } from '../lib/onClientMessageReceived';\n\nMeteor.startup(() => {\n\tTracker.autorun(() => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn;\n\t\t}\n\n\t\tsdk.stream('notify-user', [`${uid}/otr`], (type, data) => {\n\t\t\tif (!data.roomId || !data.userId || data.userId === uid) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, data.roomId);\n\t\t\totrRoom?.onUserStream(type, data);\n\t\t});\n\t});\n\n\tonClientBeforeSendMessage.use(async (message) => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst msg = await otrRoom.encrypt(message);\n\t\t\treturn { ...message, msg, t: 'otr' };\n\t\t}\n\t\treturn message;\n\t});\n\n\tonClientMessageReceived.use(async (message) => {\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!isOTRMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif ('notification' in message) {\n\t\t\treturn { ...message, msg: t('Encrypted_message') };\n\t\t}\n\n\t\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\n\n\t\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\tconst decrypted = await otrRoom.decrypt(message.msg);\n\t\t\tif (typeof decrypted === 'string') {\n\t\t\t\treturn { ...message, msg: decrypted };\n\t\t\t}\n\t\t\tconst { _id, text: msg, ack, ts, userId } = decrypted;\n\n\t\t\tif (ts) message.ts = ts;\n\n\t\t\tif (message.otrAck) {\n\t\t\t\tconst otrAck = await otrRoom.decrypt(message.otrAck);\n\t\t\t\tif (typeof otrAck === 'string') {\n\t\t\t\t\treturn { ...message, msg: otrAck };\n\t\t\t\t}\n\n\t\t\t\tif (ack === otrAck.text) {\n\t\t\t\t\treturn { ...message, _id, t: 'otr-ack', msg };\n\t\t\t\t}\n\t\t\t} else if (userId !== Meteor.userId()) {\n\t\t\t\tconst encryptedAck = await otrRoom.encryptText(ack);\n\n\t\t\t\tvoid sdk.call('updateOTRAck', { message, ack: encryptedAck });\n\t\t\t}\n\n\t\t\treturn { ...message, _id, msg };\n\t\t}\n\t\tif (message.t === 'otr') message.msg = '';\n\n\t\treturn message;\n\t});\n});\n",null],"names":["_regeneratorRuntime","_objectSpread","isOTRMessage","Meteor","Tracker","OTR","OtrRoomState","sdk","t","onClientBeforeSendMessage","onClientMessageReceived","module","link","default","v","startup","autorun","uid","userId","stream","type","data","roomId","otrRoom","getInstanceByRoomId","onUserStream","use","message","msg","async","_context","prev","next","abrupt","rid","getState","ESTABLISHED","awrap","encrypt","sent","stop","Promise","decrypted","_id","ack","ts","otrAck","encryptedAck","_context2","decrypt","text","encryptText","call"],"mappings":"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"}