)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/markdown/lib/parser/original/markdown.js","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { addAsToken, isToken, validateAllowedTokens } from './token';\n\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nconst endsWithWhitespace = (text) => text.substring(text.length - 1).match(/\\s/);\n\nconst getParseableMarkersCount = (start, end) => {\n\tconst usableMarkers = start.length > 1 ? 2 : 1;\n\treturn end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\n\nconst getTextWrapper = (marker, tagName) => (textPrepend, wrappedText, textAppend) =>\n\t`${textPrepend}<span class=\"copyonly\">${marker}</span><${tagName}>${wrappedText}</${tagName}><span class=\"copyonly\">${marker}</span>${textAppend}`;\n\nconst getRegexReplacer = (replaceFunction, getRegex) => (marker, tagName) => {\n\tconst wrapper = getTextWrapper(marker, tagName);\n\treturn (msg) => msg.replace(getRegex(marker), (...args) => replaceFunction(wrapper, ...args));\n};\n\nconst getParserWithCustomMarker = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3) => {\n\t\tif (endsWithWhitespace(p2)) {\n\t\t\treturn match;\n\t\t}\n\t\tconst finalMarkerCount = getParseableMarkersCount(p1, p3);\n\t\treturn wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n\t},\n\t(marker) => new RegExp(`(\\\\${marker}+(?!\\\\s))([^\\\\${marker}\\\\r\\\\n]+)(\\\\${marker}+)`, 'gm'),\n);\n\nconst parseBold = getParserWithCustomMarker('*', 'strong');\n\nconst parseStrike = getParserWithCustomMarker('~', 'strike');\n\nconst parseItalic = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3, p4, p5) => {\n\t\tif (p1 || p5 || endsWithWhitespace(p3)) {\n\t\t\treturn match;\n\t\t}\n\n\t\tconst finalMarkerCount = getParseableMarkersCount(p2, p4);\n\t\treturn wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n\t},\n\t() => new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm'),\n)('_', 'em');\n\nconst parseNotEscaped = (message, { supportSchemesForLink, headers, rootUrl }) => {\n\tlet msg = message.html;\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\n\tconst schemes = (supportSchemesForLink || '').split(',').join('|');\n\n\tif (headers) {\n\t\t// Support # Text for h1\n\t\tmsg = msg.replace(\n\t\t\t/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h1>$1</h1>',\n\t\t);\n\n\t\t// Support # Text for h2\n\t\tmsg = msg.replace(\n\t\t\t/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h2>$1</h2>',\n\t\t);\n\n\t\t// Support # Text for h3\n\t\tmsg = msg.replace(\n\t\t\t/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h3>$1</h3>',\n\t\t);\n\n\t\t// Support # Text for h4\n\t\tmsg = msg.replace(\n\t\t\t/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h4>$1</h4>',\n\t\t);\n\t}\n\n\t// Support *text* to make bold\n\tmsg = parseBold(msg);\n\n\t// Support _text_ to make italics\n\tmsg = parseItalic(msg);\n\n\t// // Support ~text~ to strike through text\n\tmsg = parseStrike(msg);\n\n\t// Support for block quote\n\t// >>>\n\t// Text\n\t// <<<\n\tmsg = msg.replace(\n\t\t/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>',\n\t);\n\n\t// Support >Text for quote\n\tmsg = msg.replace(\n\t\t/^&gt;(.*)$/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>',\n\t);\n\n\t// Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n\tmsg = msg.replace(\n\t\t/\\s*<blockquote class=\"background-transparent-darker-before\">/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\">',\n\t);\n\tmsg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>');\n\n\t// Remove new-line between blockquotes.\n\tmsg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote');\n\n\t// Support ![alt text](http://image url)\n\tmsg = msg.replace(new RegExp(`!\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${url}\" href=\"${url}\" title=\"${title}\" target=\"${target}\" rel=\"noopener noreferrer\"><div class=\"inline-image\" style=\"background-image: url(${url});\"></div></a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support [Text](http://link)\n\tmsg = msg.replace(new RegExp(`\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\ttitle = title.replace(/&amp;/g, '&');\n\n\t\tconst escapedUrl = encodeURI(url);\n\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${escapedUrl}\" href=\"${escapedUrl}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support <http://link|Text>\n\tmsg = msg.replace(new RegExp(`(?:<|&lt;)((?:${schemes}):\\\\\\/\\\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)`, 'gm'), (match, url, title) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(message, `<a data-title=\"${url}\" href=\"${url}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`, 'link');\n\t});\n\treturn msg;\n};\n\nexport const markdown = (message, options) => {\n\tmessage.html = parseNotEscaped(message, options);\n\treturn message;\n};\n",null],"names":["module","export","markdown","link","addAsToken","v","isToken","validateAllowedTokens","validateUrl","url","message","_message$tokens","tokens","some","token","includes","test","trim","URL","e","endsWithWhitespace","text","substring","length","match","getParseableMarkersCount","start","end","usableMarkers","getRegexReplacer","replaceFunction","getRegex","marker","tagName","wrapper","textPrepend","wrappedText","textAppend","msg","replace","_len","arguments","args","Array","_key","apply","concat","getParserWithCustomMarker","p1","p2","p3","finalMarkerCount","RegExp","parseBold","parseStrike","parseItalic","p4","p5","parseNotEscaped","_ref","supportSchemesForLink","headers","rootUrl","html","schemes","split","join","title","target","encodeURI","indexOf","escapedUrl","options"],"mappings":"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"}