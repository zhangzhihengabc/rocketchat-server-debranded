)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/livechat/client/lib/stream/queueManager.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { ILivechatDepartment, ILivechatInquiryRecord, IOmnichannelAgent } from '@rocket.chat/core-typings';\n\nimport { queryClient } from '../../../../../client/lib/queryClient';\nimport { callWithErrorHandling } from '../../../../../client/lib/utils/callWithErrorHandling';\nimport { settings } from '../../../../settings/client';\nimport { sdk } from '../../../../utils/client/lib/SDKClient';\nimport { LivechatInquiry } from '../../collections/LivechatInquiry';\n\nconst departments = new Set();\n\nconst events = {\n\tadded: async (inquiry: ILivechatInquiryRecord) => {\n\t\tif (!departments.has(inquiry.department)) {\n\t\t\treturn;\n\t\t}\n\n\t\tLivechatInquiry.insert({ ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tawait invalidateRoomQueries(inquiry.rid);\n\t},\n\tchanged: async (inquiry: ILivechatInquiryRecord) => {\n\t\tif (inquiry.status !== 'queued' || (inquiry.department && !departments.has(inquiry.department))) {\n\t\t\treturn removeInquiry(inquiry);\n\t\t}\n\n\t\tLivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, alert: true, _updatedAt: new Date(inquiry._updatedAt) });\n\t\tawait invalidateRoomQueries(inquiry.rid);\n\t},\n\tremoved: (inquiry: ILivechatInquiryRecord) => removeInquiry(inquiry),\n};\n\nconst invalidateRoomQueries = async (rid: string) => {\n\tawait queryClient.invalidateQueries(['rooms', { reference: rid, type: 'l' }]);\n\tawait queryClient.removeQueries(['rooms', rid]);\n\tawait queryClient.removeQueries(['/v1/rooms.info', rid]);\n};\n\nconst removeInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tawait LivechatInquiry.remove(inquiry._id);\n\treturn queryClient.invalidateQueries(['rooms', { reference: inquiry.rid, type: 'l' }]);\n};\n\nconst getInquiriesFromAPI = async () => {\n\tconst count = settings.get('Livechat_guest_pool_max_number_incoming_livechats_displayed') ?? 0;\n\tconst { inquiries } = await sdk.rest.get('/v1/livechat/inquiries.queuedForUser', { count });\n\treturn inquiries;\n};\n\nconst removeListenerOfDepartment = (departmentId: ILivechatDepartment['_id']) => {\n\tsdk.stop('livechat-inquiry-queue-observer', `department/${departmentId}`);\n\tdepartments.delete(departmentId);\n};\n\nconst appendListenerToDepartment = (departmentId: ILivechatDepartment['_id']) => {\n\tdepartments.add(departmentId);\n\tsdk.stream('livechat-inquiry-queue-observer', [`department/${departmentId}`], async (args) => {\n\t\tif (!('type' in args)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { type, ...inquiry } = args;\n\t\tawait events[args.type](inquiry);\n\t});\n\treturn () => removeListenerOfDepartment(departmentId);\n};\nconst addListenerForeachDepartment = (departments: ILivechatDepartment['_id'][] = []) => {\n\tconst cleanupFunctions = departments.map((department) => appendListenerToDepartment(department));\n\treturn () => cleanupFunctions.forEach((cleanup) => cleanup());\n};\n\nconst updateInquiries = async (inquiries: ILivechatInquiryRecord[] = []) =>\n\tinquiries.forEach((inquiry) => LivechatInquiry.upsert({ _id: inquiry._id }, { ...inquiry, _updatedAt: new Date(inquiry._updatedAt) }));\n\nconst getAgentsDepartments = async (userId: IOmnichannelAgent['_id']) => {\n\tconst { departments } = await sdk.rest.get(`/v1/livechat/agents/${userId}/departments`, { enabledDepartmentsOnly: 'true' });\n\treturn departments;\n};\n\nconst removeGlobalListener = () => sdk.stop('livechat-inquiry-queue-observer', 'public');\n\nconst addGlobalListener = () => {\n\tsdk.stream('livechat-inquiry-queue-observer', ['public'], async (args) => {\n\t\tif (!('type' in args)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { type, ...inquiry } = args;\n\t\tawait events[args.type](inquiry);\n\t});\n\treturn removeGlobalListener;\n};\n\nconst subscribe = async (userId: IOmnichannelAgent['_id']) => {\n\tconst config = await callWithErrorHandling('livechat:getRoutingConfig');\n\tif (config?.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tconst agentDepartments = (await getAgentsDepartments(userId)).map((department) => department.departmentId);\n\n\t// Register to all depts + public queue always to match the inquiry list returned by backend\n\tconst cleanDepartmentListeners = addListenerForeachDepartment(agentDepartments);\n\tconst globalCleanup = addGlobalListener();\n\n\tconst computation = Tracker.autorun(async () => {\n\t\tconst inquiriesFromAPI = (await getInquiriesFromAPI()) as unknown as ILivechatInquiryRecord[];\n\n\t\tawait updateInquiries(inquiriesFromAPI);\n\t});\n\n\treturn () => {\n\t\tLivechatInquiry.remove({});\n\t\tremoveGlobalListener();\n\t\tcleanDepartmentListeners?.();\n\t\tglobalCleanup?.();\n\t\tdepartments.clear();\n\t\tcomputation.stop();\n\t};\n};\n\nexport const initializeLivechatInquiryStream = (() => {\n\tlet cleanUp: (() => void) | undefined;\n\n\treturn async (...args: Parameters<typeof subscribe>) => {\n\t\tcleanUp?.();\n\t\tcleanUp = await subscribe(...args);\n\t};\n})();\n",null],"names":["cleanUp","_objectWithoutProperties","_regeneratorRuntime","_objectSpread","queryClient","callWithErrorHandling","settings","sdk","LivechatInquiry","module","default","export","initializeLivechatInquiryStream","departments","Set","events","added","inquiry","async","_context","prev","next","has","department","abrupt","insert","alert","_updatedAt","Date","awrap","invalidateRoomQueries","rid","stop","Promise","changed","_context2","status","removeInquiry","upsert","_id","removed","_context3","invalidateQueries","reference","type","removeQueries","_context4","remove","getInquiriesFromAPI","_settings$get","count","inquiries","_context5","get","rest","_await$sdk$rest$get","sent","removeListenerOfDepartment","departmentId","delete","addListenerForeachDepartment","cleanupFunctions","map","add","stream","args","_context6","_excluded","forEach","cleanup","updateInquiries","_args7","arguments","_context7","getAgentsDepartments","userId","_context8","enabledDepartmentsOnly","_await$sdk$rest$get2","removeGlobalListener","subscribe","config","cleanDepartmentListeners","globalCleanup","computation","_context11","autoAssignAgent","_context9","_excluded2","Tracker","autorun","_callee10","inquiriesFromAPI","_callee10$","_context10","clear","_cleanUp","_args12","_context12","apply"],"mappings":"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"}