)]}'
{"version":3,"sources":["meteor://ðŸ’»app/app/otr/client/OTRRoom.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IRoom, IMessage, IUser } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport EJSON from 'ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport GenericModal from '../../../client/components/GenericModal';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport { Presence } from '../../../client/lib/presence';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { getUidDirectMessage } from '../../../client/lib/utils/getUidDirectMessage';\nimport { goToRoomById } from '../../../client/lib/utils/goToRoomById';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport type { IOnUserStreamData, IOTRAlgorithm, IOTRDecrypt, IOTRRoom } from '../lib/IOTR';\nimport { OtrRoomState } from '../lib/OtrRoomState';\nimport { otrSystemMessages } from '../lib/constants';\nimport {\n\tdecryptAES,\n\tderiveBits,\n\tdigest,\n\tencryptAES,\n\texportKey,\n\tgenerateKeyPair,\n\timportKey,\n\timportKeyRaw,\n\tjoinEncryptedData,\n} from '../lib/functions';\n\nexport class OTRRoom implements IOTRRoom {\n\tprivate _userId: string;\n\n\tprivate _roomId: string;\n\n\tprivate _keyPair: CryptoKeyPair | null;\n\n\tprivate _exportedPublicKey: JsonWebKey;\n\n\tprivate _sessionKey: CryptoKey | null;\n\n\tprivate _userOnlineComputation: Tracker.Computation;\n\n\tprivate peerId: string;\n\n\tprivate state: ReactiveVar<OtrRoomState> = new ReactiveVar(OtrRoomState.NOT_STARTED);\n\n\tprivate isFirstOTR: boolean;\n\n\tprotected constructor(uid: IUser['_id'], rid: IRoom['_id'], peerId: IUser['_id']) {\n\t\tthis._userId = uid;\n\t\tthis._roomId = rid;\n\t\tthis._keyPair = null;\n\t\tthis._sessionKey = null;\n\t\tthis.peerId = peerId;\n\t\tthis.isFirstOTR = true;\n\t}\n\n\tpublic static create(uid: IUser['_id'], rid: IRoom['_id']): OTRRoom | undefined {\n\t\tconst peerId = getUidDirectMessage(rid);\n\n\t\tif (!peerId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new OTRRoom(uid, rid, peerId);\n\t}\n\n\tgetPeerId(): string {\n\t\treturn this.peerId;\n\t}\n\n\tgetState(): OtrRoomState {\n\t\treturn this.state.get();\n\t}\n\n\tsetState(nextState: OtrRoomState): void {\n\t\tif (this.getState() === nextState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.set(nextState);\n\t}\n\n\tasync handshake(refresh?: boolean): Promise<void> {\n\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\n\t\tawait this.generateKeyPair();\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'handshake',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t\trefresh,\n\t\t\t},\n\t\t]);\n\n\t\tif (refresh) {\n\t\t\tconst user = Meteor.user();\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait sdk.call('sendSystemMessages', this._roomId, user.username, otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH);\n\t\t\tthis.isFirstOTR = false;\n\t\t}\n\t}\n\n\tacknowledge(): void {\n\t\tvoid sdk.rest.post('/v1/statistics.telemetry', { params: [{ eventName: 'otrStats', timestamp: Date.now(), rid: this._roomId }] });\n\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'acknowledge',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t},\n\t\t]);\n\t}\n\n\tdeny(): void {\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.DECLINED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'deny',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\tend(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'end',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\treset(): void {\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t}\n\n\tasync generateKeyPair(): Promise<void> {\n\t\tif (this._userOnlineComputation) {\n\t\t\tthis._userOnlineComputation.stop();\n\t\t}\n\n\t\tthis._userOnlineComputation = Tracker.autorun(() => {\n\t\t\tconst $room = document.querySelector(`#chat-window-${this._roomId}`);\n\t\t\tconst $title = $room?.querySelector('.rc-header__title');\n\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\tif ($room && $title && !$title.querySelector('.otr-icon')) {\n\t\t\t\t\t$title.prepend(\"<i class='otr-icon icon-key'></i>\");\n\t\t\t\t}\n\t\t\t} else if ($title) {\n\t\t\t\t$title.querySelector('.otr-icon')?.remove();\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\t// Generate an ephemeral key pair.\n\t\t\tthis._keyPair = await generateKeyPair();\n\n\t\t\tif (!this._keyPair.publicKey) {\n\t\t\t\tthrow new Error('Public key is not generated');\n\t\t\t}\n\n\t\t\tthis._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n\n\t\t\t// Once we have generated new keys, it's safe to delete old messages\n\t\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync importPublicKey(publicKey: string): Promise<void> {\n\t\ttry {\n\t\t\tif (!this._keyPair) throw new Error('No key pair');\n\t\t\tconst publicKeyObject: JsonWebKey = EJSON.parse(publicKey);\n\t\t\tconst peerPublicKey = await importKey(publicKeyObject);\n\t\t\tconst ecdhObj: IOTRAlgorithm = {\n\t\t\t\tname: 'ECDH',\n\t\t\t\tnamedCurve: 'P-256',\n\t\t\t\tpublic: peerPublicKey,\n\t\t\t};\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst hashedBits = await digest(bits);\n\t\t\t// We truncate the hash to 128 bits.\n\t\t\tconst sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n\t\t\t// Session key available.\n\t\t\tthis._sessionKey = await importKeyRaw(sessionKeyData);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync encryptText(data: string | Uint8Array): Promise<string> {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available');\n\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\n\t\t\treturn EJSON.stringify(output);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync encrypt(message: Pick<IMessage, '_id' | 'msg'>): Promise<string> {\n\t\ttry {\n\t\t\tconst data = new TextEncoder().encode(\n\t\t\t\tEJSON.stringify({\n\t\t\t\t\t_id: message._id,\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t\tuserId: this._userId,\n\t\t\t\t\tack: Random.id((Random.fraction() + 1) * 20),\n\t\t\t\t\tts: new Date(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync decrypt(message: string): Promise<IOTRDecrypt | string> {\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available.');\n\n\t\t\tconst cipherText: Uint8Array = EJSON.parse(message);\n\t\t\tconst data = await decryptAES(cipherText, this._sessionKey);\n\t\t\tconst msgDecoded: IOTRDecrypt = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n\t\t\tif (msgDecoded && typeof msgDecoded === 'object') {\n\t\t\t\treturn msgDecoded;\n\t\t\t}\n\t\t\treturn message;\n\t\t} catch (e) {\n\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\treturn message;\n\t\t}\n\t}\n\n\tasync onUserStream(type: string, data: IOnUserStreamData): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase 'handshake':\n\t\t\t\tlet timeout: NodeJS.Timeout;\n\n\t\t\t\tconst establishConnection = async (): Promise<void> => {\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\t\tawait this.generateKeyPair();\n\t\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\t\t\t\t\t\tawait goToRoomById(data.roomId);\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\t\t\t\t\t\t\tthis.acknowledge();\n\n\t\t\t\t\t\t\tif (data.refresh) {\n\t\t\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\t\t\ttype: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t\t\tthrow new Meteor.Error('establish-connection-error', 'Establish connection error.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst closeOrCancelModal = (): void => {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tthis.deny();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(data.userId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* \tWe have to check if there's an in progress handshake request because\n\t\t\t\t\t\t\tNotifications.notifyUser will sometimes dispatch 2 events */\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.REQUESTED) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState(OtrRoomState.REQUESTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n\t\t\t\t\t\t\t\t\tusername: obj.username,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tconfirmText: t('Yes'),\n\t\t\t\t\t\t\t\tcancelText: t('No'),\n\t\t\t\t\t\t\t\tonClose: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonCancel: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonConfirm: async (): Promise<void> => {\n\t\t\t\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.TIMEOUT);\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'acknowledge':\n\t\t\t\ttry {\n\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\n\t\t\t\t\tif (this.isFirstOTR) {\n\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\ttype: otrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.isFirstOTR = false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'deny':\n\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHING) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.setState(OtrRoomState.DECLINED);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(this.peerId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_ended_the_OTR_session', { username: obj.username }),\n\t\t\t\t\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n",null],"names":["module","link","default","_typeof","_regeneratorRuntime","export","OTRRoom","Random","v","EJSON","Meteor","ReactiveVar","Tracker","GenericModal","imperativeModal","Presence","dispatchToastMessage","getUidDirectMessage","goToRoomById","sdk","t","OtrRoomState","otrSystemMessages","decryptAES","deriveBits","digest","encryptAES","exportKey","generateKeyPair","importKey","importKeyRaw","joinEncryptedData","_generateKeyPair","uid","rid","peerId","_userId","_roomId","_keyPair","_exportedPublicKey","_sessionKey","_userOnlineComputation","state","NOT_STARTED","isFirstOTR","create","_proto","prototype","getPeerId","getState","get","setState","nextState","set","handshake","refresh","user","async","_context","prev","next","ESTABLISHING","awrap","publish","roomId","userId","publicKey","stringify","abrupt","call","username","USER_REQUESTED_OTR_KEY_REFRESH","stop","Promise","acknowledge","rest","post","params","eventName","timestamp","Date","now","deny","reset","DECLINED","end","_this","_context2","autorun","_$title$querySelector","$room","document","querySelector","$title","ESTABLISHED","prepend","remove","sent","Error","t0","ERROR","importPublicKey","publicKeyObject","ecdhObj","bits","hashedBits","sessionKeyData","_context3","parse","name","namedCurve","Uint8Array","slice","encryptText","data","iv","output","_context4","TextEncoder","encode","text","ack","id","fraction","crypto","getRandomValues","encryptedData","encrypt","message","enc","_context5","_id","msg","ts","decrypt","cipherText","msgDecoded","_context6","TextDecoder","decode","type","onUserStream","timeout","establishConnection","closeOrCancelModal","obj","_obj","_this2","_context10","_callee2","_callee2$","_context8","clearTimeout","setTimeout","_callee","_callee$","_context7","USER_KEY_REFRESHED_SUCCESSFULLY","close","REQUESTED","open","component","props","variant","title","children","confirmText","cancelText","onClose","onCancel","onConfirm","_callee3","_callee3$","_context9","TIMEOUT","t1","USER_JOINED_OTR","t2","t3"],"mappings":"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"}