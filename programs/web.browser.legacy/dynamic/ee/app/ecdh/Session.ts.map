)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/app/ecdh/Session.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n",null],"names":["module","default","_regeneratorRuntime","_createClass","export","Session","SodiumPlus","X25519PublicKey","sodium","stringFormatKey","stringFormatEncryptedData","stringFormatRawData","decryptKey","encryptKey","secretKey","publicKey","_proto","prototype","async","_context","prev","next","abrupt","auto","stop","Promise","publicKeyFromString","text","Buffer","from","encryptToBuffer","plaintext","nonce","ciphertext","_context2","awrap","sent","randombytes_buf","crypto_secretbox","toString","concat","encrypt","buffer","_context3","decryptToBuffer","data","decrypted","_context4","isBuffer","crypto_secretbox_open","slice","decrypt","_context5","key","get"],"mappings":"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"}