)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/apps/orchestrator.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { AppClientManager } from '@rocket.chat/apps-engine/client/AppClientManager';\nimport type { IPermission } from '@rocket.chat/apps-engine/definition/permissions/IPermission';\nimport type { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport type { Serialized } from '@rocket.chat/core-typings';\n\nimport { hasAtLeastOnePermission } from '../../../app/authorization/client';\nimport { sdk } from '../../../app/utils/client/lib/SDKClient';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport type { App } from '../../../client/views/marketplace/types';\nimport type { IAppExternalURL, ICategory } from './@types/IOrchestrator';\nimport { RealAppsEngineUIHost } from './RealAppsEngineUIHost';\n\nclass AppClientOrchestrator {\n\tprivate _appClientUIHost: RealAppsEngineUIHost;\n\n\tprivate _manager: AppClientManager;\n\n\tprivate _isLoaded: boolean;\n\n\tconstructor() {\n\t\tthis._appClientUIHost = new RealAppsEngineUIHost();\n\t\tthis._manager = new AppClientManager(this._appClientUIHost);\n\t\tthis._isLoaded = false;\n\t}\n\n\tpublic async load(): Promise<void> {\n\t\tif (!this._isLoaded) {\n\t\t\tthis._isLoaded = true;\n\t\t}\n\t}\n\n\tpublic getAppClientManager(): AppClientManager {\n\t\treturn this._manager;\n\t}\n\n\tpublic handleError(error: unknown): void {\n\t\tif (hasAtLeastOnePermission(['manage-apps'])) {\n\t\t\tdispatchToastMessage({\n\t\t\t\ttype: 'error',\n\t\t\t\tmessage: error,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async getInstalledApps(): Promise<App[]> {\n\t\tconst result = await sdk.rest.get<'/apps/installed'>('/apps/installed');\n\n\t\tif ('apps' in result) {\n\t\t\t// TODO: chapter day: multiple results are returned, but we only need one\n\t\t\treturn result.apps as App[];\n\t\t}\n\t\tthrow new Error('Invalid response from API');\n\t}\n\n\tpublic async getAppsFromMarketplace(isAdminUser?: boolean): Promise<App[]> {\n\t\tconst result = await sdk.rest.get('/apps/marketplace', { isAdminUser: isAdminUser ? isAdminUser.toString() : 'false' });\n\n\t\tif (!Array.isArray(result)) {\n\t\t\t// TODO: chapter day: multiple results are returned, but we only need one\n\t\t\tthrow new Error('Invalid response from API');\n\t\t}\n\n\t\treturn (result as App[]).map((app: App) => {\n\t\t\tconst { latest, appRequestStats, price, pricingPlans, purchaseType, isEnterpriseOnly, modifiedAt, bundledIn, requestedEndUser } = app;\n\t\t\treturn {\n\t\t\t\t...latest,\n\t\t\t\tappRequestStats,\n\t\t\t\tprice,\n\t\t\t\tpricingPlans,\n\t\t\t\tpurchaseType,\n\t\t\t\tisEnterpriseOnly,\n\t\t\t\tmodifiedAt,\n\t\t\t\tbundledIn,\n\t\t\t\trequestedEndUser,\n\t\t\t};\n\t\t});\n\t}\n\n\tpublic async getAppsOnBundle(bundleId: string): Promise<App[]> {\n\t\tconst { apps } = await sdk.rest.get(`/apps/bundles/${bundleId}/apps`);\n\t\treturn apps;\n\t}\n\n\tpublic async getApp(appId: string): Promise<App> {\n\t\tconst { app } = await sdk.rest.get(`/apps/${appId}` as any);\n\t\treturn app;\n\t}\n\n\tpublic async setAppSettings(appId: string, settings: ISetting[]): Promise<void> {\n\t\tawait sdk.rest.post(`/apps/${appId}/settings`, { settings });\n\t}\n\n\tpublic async installApp(appId: string, version: string, permissionsGranted?: IPermission[]): Promise<App> {\n\t\tconst { app } = await sdk.rest.post<'/apps/'>('/apps/', {\n\t\t\tappId,\n\t\t\tmarketplace: true,\n\t\t\tversion,\n\t\t\tpermissionsGranted,\n\t\t});\n\t\treturn app;\n\t}\n\n\tpublic async updateApp(appId: string, version: string, permissionsGranted?: IPermission[]): Promise<App> {\n\t\tconst result = await sdk.rest.post<'/apps/:id'>(`/apps/${appId}`, {\n\t\t\tappId,\n\t\t\tmarketplace: true,\n\t\t\tversion,\n\t\t\tpermissionsGranted,\n\t\t});\n\n\t\tif ('app' in result) {\n\t\t\treturn result.app;\n\t\t}\n\t\tthrow new Error('App not found');\n\t}\n\n\tpublic async buildExternalUrl(appId: string, purchaseType: 'buy' | 'subscription' = 'buy', details = false): Promise<IAppExternalURL> {\n\t\tconst result = await sdk.rest.get('/apps/buildExternalUrl', {\n\t\t\tappId,\n\t\t\tpurchaseType,\n\t\t\tdetails: `${details}`,\n\t\t});\n\n\t\tif ('url' in result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tthrow new Error('Failed to build external url');\n\t}\n\n\tpublic async buildExternalAppRequest(appId: string) {\n\t\tconst result = await sdk.rest.get('/apps/buildExternalAppRequest', {\n\t\t\tappId,\n\t\t});\n\n\t\tif ('url' in result) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new Error('Failed to build App Request external url');\n\t}\n\n\tpublic async buildIncompatibleExternalUrl(appId: string, appVersion: string, action: string): Promise<IAppExternalURL> {\n\t\tconst result = await sdk.rest.get('/apps/incompatibleModal', {\n\t\t\tappId,\n\t\t\tappVersion,\n\t\t\taction,\n\t\t});\n\n\t\tif ('url' in result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tthrow new Error('Failed to build external url');\n\t}\n\n\tpublic async getCategories(): Promise<Serialized<ICategory[]>> {\n\t\tconst result = await sdk.rest.get('/apps/categories');\n\n\t\tif (Array.isArray(result)) {\n\t\t\t// TODO: chapter day: multiple results are returned, but we only need one\n\t\t\treturn result as Serialized<ICategory>[];\n\t\t}\n\t\tthrow new Error('Failed to get categories');\n\t}\n}\n\nexport const AppClientOrchestratorInstance = new AppClientOrchestrator();\n",null],"names":["module","link","default","v","_objectSpread","_regeneratorRuntime","export","AppClientOrchestratorInstance","AppClientManager","hasAtLeastOnePermission","sdk","dispatchToastMessage","RealAppsEngineUIHost","AppClientOrchestrator","_appClientUIHost","_manager","_isLoaded","_proto","prototype","load","async","_context","prev","next","stop","Promise","getAppClientManager","handleError","error","type","message","getInstalledApps","result","_context2","awrap","rest","get","sent","abrupt","apps","Error","getAppsFromMarketplace","isAdminUser","_context3","toString","Array","isArray","map","app","latest","appRequestStats","price","pricingPlans","purchaseType","isEnterpriseOnly","modifiedAt","bundledIn","requestedEndUser","getAppsOnBundle","bundleId","_context4","_await$sdk$rest$get","getApp","appId","_context5","_await$sdk$rest$get2","setAppSettings","settings","_context6","post","installApp","version","permissionsGranted","_context7","marketplace","_await$sdk$rest$post","updateApp","_context8","buildExternalUrl","details","_args9","arguments","_context9","length","undefined","buildExternalAppRequest","_context10","buildIncompatibleExternalUrl","appVersion","action","_context11","getCategories","_context12"],"mappings":"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"}