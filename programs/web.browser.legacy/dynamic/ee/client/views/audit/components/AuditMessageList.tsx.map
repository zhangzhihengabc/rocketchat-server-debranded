)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/views/audit/components/AuditMessageList.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport { MessageDivider } from '@rocket.chat/fuselage';\nimport { useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ReactElement } from 'react';\nimport React, { Fragment, memo } from 'react';\n\nimport { MessageTypes } from '../../../../../app/ui-utils/client';\nimport RoomMessage from '../../../../../client/components/message/variants/RoomMessage';\nimport SystemMessage from '../../../../../client/components/message/variants/SystemMessage';\nimport { useFormatDate } from '../../../../../client/hooks/useFormatDate';\nimport { isMessageNewDay } from '../../../../../client/views/room/MessageList/lib/isMessageNewDay';\n\ntype AuditMessageListProps = {\n\tmessages: IMessage[];\n};\n\nconst AuditMessageList = ({ messages }: AuditMessageListProps): ReactElement => {\n\tconst formatDate = useFormatDate();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\n\treturn (\n\t\t<>\n\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\tconst newDay = isMessageNewDay(message, previous);\n\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t{newDay && <MessageDivider>{formatDate(message.ts)}</MessageDivider>}\n\n\t\t\t\t\t\t{!system && (\n\t\t\t\t\t\t\t<RoomMessage\n\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\tsequential={false}\n\t\t\t\t\t\t\t\tunread={false}\n\t\t\t\t\t\t\t\tmention={false}\n\t\t\t\t\t\t\t\tall={false}\n\t\t\t\t\t\t\t\tignoredUser={false}\n\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{system && <SystemMessage message={message} showUserAvatar={showUserAvatar} />}\n\t\t\t\t\t</Fragment>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n};\n\nexport default memo(AuditMessageList);\n",null],"names":["MessageDivider","useUserPreference","React","Fragment","memo","MessageTypes","RoomMessage","SystemMessage","useFormatDate","isMessageNewDay","module","link","v","exportDefault","_ref","messages","formatDate","showUserAvatar","createElement","map","message","index","_ref2","newDay","system","isSystemMessage","key","_id","ts","sequential","unread","mention","all","ignoredUser"],"mappings":"uBAgBA,IAfAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAgBC,IAAA,CAAM,wBAAwB,CAAAX,eAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAU,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAT,kBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAS,EAAAA,IAAAA,CAAAA,QAAAA,CAAA,QAAA,SAAAE,CAAA,EAAAV,EAAAA,CAAA,EAAAC,SAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,KAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAM,EAAAA,IAAAA,CAAAA,qCAAAA,CAAAL,aAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAK,EAAAA,IAAAA,CAAAA,gEAAAA,CAAA,QAAA,SAAAE,CAAA,EAAAN,EAAAA,CAAA,CAAA,EAAA,GAAAI,EAAAA,IAAAA,CAAAA,kEAAAA,CAAA,QAAA,SAAAE,CAAA,EAAAL,EAAAA,CAAA,CAAA,EAAA,GAAAG,EAAAA,IAAAA,CAAAA,4CAAAA,CAAAF,cAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAE,EAAAA,IAAAA,CAAAA,mEAAAA,CAAAD,gBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAvDC,EAAOG,aAAE,CAiDMT,EAlCU,SAAAU,CAAA,EAAsD,IAAnDC,EAAQD,EAARC,QAAQ,CAC7BC,EAAaR,IACbS,EAAiB,CAAC,CAAChB,EAA2B,kBAEpD,OACCC,EAAAgB,aAAA,CAAAhB,EAAAC,QAAA,CAAA,KACEY,EAASI,GAAG,CAAC,SAACC,CAAO,CAAEC,CAAK,CAAAC,CAAA,EAC5B,IAAMC,EAASd,EAAgBW,EADsBE,CAAA,CAApBD,EAAQ,EAAC,EAEpCG,EAASnB,EAAaoB,eAAe,CAACL,GAE5C,OACClB,EAAAgB,aAAA,CAACf,EAAQ,CAACuB,IAAKN,EAAQO,GAAAA,AAAI,EACzBJ,GAAUrB,EAAAgB,aAAA,CAAClB,EAAc,KAAEgB,EAAWI,EAAQQ,EAAE,GAEhD,CAACJ,GACDtB,EAAAgB,aAAA,CAACZ,EAAW,CACXc,QAASA,EACTS,WAAY,CAAA,EACZC,OAAQ,CAAA,EACRC,QAAS,CAAA,EACTC,IAAK,CAAA,EACLC,YAAa,CAAA,EACbhB,eAAgBA,CAAe,GAIhCO,GAAUtB,EAAAgB,aAAA,CAACX,EAAa,CAACa,QAASA,EAASH,eAAgBA,CAAe,GAG9E,GAGH"}