)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/ecdh.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\nimport type { ClientSession } from '../app/ecdh/client/ClientSession';\n\nlet resolveSession: (value: ClientSession | void) => void;\nconst sessionPromise = new Promise<ClientSession | void>((resolve) => {\n\tresolveSession = resolve;\n});\n\nfunction init(session: ClientSession): void {\n\tMeteor.connection._stream.allowConnection();\n\n\tconst _didMessage = Meteor.connection._stream.socket._didMessage.bind(Meteor.connection._stream.socket);\n\tconst send = Meteor.connection._stream.socket.send.bind(Meteor.connection._stream.socket);\n\n\tMeteor.connection._stream.socket._didMessage = async (data): Promise<void> => {\n\t\tconst decryptedData = await session.decrypt(data);\n\t\tdecryptedData.split('\\n').forEach((d) => _didMessage(d));\n\t};\n\n\tMeteor.connection._stream.socket.send = async (data): Promise<void> => {\n\t\tsend(await session.encrypt(data));\n\t};\n}\n\nasync function initEncryptedSession(): Promise<void> {\n\tif (!window.ECDH_Enabled) {\n\t\tMeteor.connection._stream.allowConnection();\n\t\treturn resolveSession();\n\t}\n\tconst { ClientSession } = await import('../app/ecdh/client/ClientSession');\n\tconst session = new ClientSession();\n\tconst clientPublicKey = await session.init();\n\n\ttry {\n\t\tconst response = await fetch('/api/ecdh_proxy/initEncryptedSession', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({ clientPublicKey }),\n\t\t});\n\n\t\tif (response.status !== 200) {\n\t\t\tresolveSession();\n\t\t\treturn Meteor.connection._stream.allowConnection();\n\t\t}\n\n\t\tconst data = await response.json();\n\n\t\tif (data.success === false) {\n\t\t\tresolveSession();\n\t\t\treturn Meteor.connection._stream.allowConnection();\n\t\t}\n\n\t\tawait session.setServerKey(data.publicKeyString);\n\t\tresolveSession(session);\n\t\tinit(session);\n\t} catch (e) {\n\t\tconsole.log(e);\n\t\tresolveSession();\n\t\tMeteor.connection._stream.allowConnection();\n\t}\n}\n\ninitEncryptedSession();\nsdk.rest.use(async (request, next) => {\n\tconst session = await sessionPromise;\n\n\tif (!session) {\n\t\treturn next(...request);\n\t}\n\tconst result = await (await next(...request)).text();\n\tconst decrypted = await session.decrypt(result);\n\tconst parsed = JSON.parse(decrypted);\n\treturn parsed;\n});\n",null],"names":["module","default","_toConsumableArray","_regeneratorRuntime","link","Meteor","sdk","session","clientPublicKey","response","data","resolveSession","sessionPromise","Promise","resolve","async","_context3","prev","next","window","ECDH_Enabled","connection","_stream","allowConnection","abrupt","awrap","dynamicImport","_await$module$dynamic","sent","ClientSession","init","fetch","method","headers","body","JSON","stringify","status","json","success","setServerKey","publicKeyString","_didMessage","socket","bind","send","_context","decrypt","decryptedData","split","forEach","d","stop","_context2","t0","encrypt","t1","console","log","rest","use","request","result","parsed","_context4","apply","text","call","parse"],"mappings":"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"}