)]}'
{"version":3,"sources":["meteor://ðŸ’»app/ee/client/omnichannel/reports/hooks/useStatusSection.tsx","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type { TranslationContextValue, TranslationKey } from '@rocket.chat/ui-contexts';\nimport { useEndpoint, useTranslation } from '@rocket.chat/ui-contexts';\nimport { useQuery } from '@tanstack/react-query';\nimport { useMemo } from 'react';\n\nimport { getPeriodRange } from '../../../components/dashboards/periods';\nimport { usePeriodSelectorStorage } from '../../../components/dashboards/usePeriodSelectorStorage';\nimport { COLORS, PERIOD_OPTIONS } from '../components/constants';\nimport { formatPeriodDescription } from '../utils/formatPeriodDescription';\nimport { round } from '../utils/round';\nimport { useDefaultDownload } from './useDefaultDownload';\n\nconst STATUSES: Record<string, { label: TranslationKey; color: string }> = {\n\tOpen: { label: 'Omnichannel_Reports_Status_Open', color: COLORS.success },\n\tQueued: { label: 'Queued', color: COLORS.warning2 },\n\tOn_Hold: { label: 'On_Hold', color: COLORS.warning },\n\tClosed: { label: 'Omnichannel_Reports_Status_Closed', color: COLORS.danger },\n};\n\nconst formatChartData = (data: { label: string; value: number }[] | undefined = [], total = 0, t: TranslationContextValue['translate']) => {\n\treturn data.map((item) => {\n\t\tconst status = STATUSES[item.label];\n\t\tconst percentage = total > 0 ? round((item.value / total) * 100) : 0;\n\t\tconst label = t(status.label);\n\t\treturn {\n\t\t\t...item,\n\t\t\tid: item.label,\n\t\t\tlabel: `${label} ${item.value} (${percentage}%)`,\n\t\t\trawLabel: label,\n\t\t\tcolor: status.color,\n\t\t};\n\t});\n};\n\nexport const useStatusSection = () => {\n\tconst t = useTranslation();\n\tconst [period, periodSelectorProps] = usePeriodSelectorStorage('reports-status-period', PERIOD_OPTIONS);\n\tconst getConversationsByStatus = useEndpoint('GET', '/v1/livechat/analytics/dashboards/conversations-by-status');\n\tconst { start, end } = getPeriodRange(period);\n\n\tconst {\n\t\tdata: { data, total } = { data: [], total: 0 },\n\t\tisLoading,\n\t\tisError,\n\t\tisSuccess,\n\t\trefetch,\n\t} = useQuery(\n\t\t['omnichannel-reports', 'conversations-by-status', period, t],\n\t\tasync () => {\n\t\t\tconst response = await getConversationsByStatus({ start: start.toISOString(), end: end.toISOString() });\n\n\t\t\treturn { ...response, data: formatChartData(response.data, response.total, t) };\n\t\t},\n\t\t{\n\t\t\trefetchInterval: 5 * 60 * 1000,\n\t\t},\n\t);\n\n\tconst title = t('Conversations_by_status');\n\tconst subtitle = t('__count__conversations__period__', {\n\t\tcount: total ?? 0,\n\t\tperiod: formatPeriodDescription(period, t),\n\t});\n\tconst emptyStateSubtitle = t('Omnichannel_Reports_Status_Empty_Subtitle');\n\n\tconst downloadProps = useDefaultDownload({ columnName: t('Status'), title, data, period });\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\tid: 'conversations-by-status',\n\t\t\ttitle,\n\t\t\tsubtitle,\n\t\t\temptyStateSubtitle,\n\t\t\tdata,\n\t\t\ttotal,\n\t\t\tperiod,\n\t\t\tperiodSelectorProps,\n\t\t\tdownloadProps,\n\t\t\tisLoading,\n\t\t\tisError,\n\t\t\tisDataFound: isSuccess && data.length > 0,\n\t\t\tonRetry: refetch,\n\t\t}),\n\t\t[title, subtitle, emptyStateSubtitle, data, total, period, periodSelectorProps, downloadProps, isLoading, isError, isSuccess, refetch],\n\t);\n};\n",null],"names":["module","default","v","_regeneratorRuntime","_slicedToArray","_objectSpread","export","useStatusSection","useEndpoint","useTranslation","useQuery","useMemo","getPeriodRange","usePeriodSelectorStorage","COLORS","PERIOD_OPTIONS","formatPeriodDescription","round","useDefaultDownload","STATUSES","Open","label","color","success","Queued","warning2","On_Hold","warning","Closed","danger","formatChartData","data","total","arguments","length","undefined","t","map","item","status","percentage","value","id","rawLabel","_usePeriodSelectorSto2","period","periodSelectorProps","getConversationsByStatus","_getPeriodRange","start","end","_useQuery","response","async","_context","prev","next","awrap","toISOString","sent","abrupt","stop","Promise","refetchInterval","_useQuery$data","isLoading","isError","isSuccess","refetch","title","subtitle","count","emptyStateSubtitle","downloadProps","columnName","isDataFound","onRetry"],"mappings":"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"}