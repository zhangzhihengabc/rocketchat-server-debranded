)]}'
{"version":3,"sources":["meteor://ðŸ’»app/definition/IRoomTypeConfig.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import type {\n\tIRoom,\n\tRoomType,\n\tIUser,\n\tIMessage,\n\tReadReceipt,\n\tValueOf,\n\tAtLeast,\n\tISubscription,\n\tIOmnichannelRoom,\n} from '@rocket.chat/core-typings';\nimport type { Keys as IconName } from '@rocket.chat/icons';\nimport type { IRouterPaths, RouteName } from '@rocket.chat/ui-contexts';\n\nexport type RoomIdentification = { rid?: IRoom['_id']; name?: string; tab?: string };\n\nexport interface IRoomTypeRouteConfig<TRouteName extends RouteName> {\n\tname: TRouteName;\n\tpath?: IRouterPaths[TRouteName]['pattern'];\n\tlink?: (data: RoomIdentification) => Record<string, string>;\n}\n\nexport const RoomSettingsEnum = {\n\tTYPE: 'type',\n\tNAME: 'roomName',\n\tTOPIC: 'roomTopic',\n\tANNOUNCEMENT: 'roomAnnouncement',\n\tDESCRIPTION: 'roomDescription',\n\tREAD_ONLY: 'readOnly',\n\tREACT_WHEN_READ_ONLY: 'reactWhenReadOnly',\n\tARCHIVE_OR_UNARCHIVE: 'archiveOrUnarchive',\n\tJOIN_CODE: 'joinCode',\n\tBROADCAST: 'broadcast',\n\tSYSTEM_MESSAGES: 'systemMessages',\n\tE2E: 'encrypted',\n} as const;\n\nexport const RoomMemberActions = {\n\tARCHIVE: 'archive',\n\tIGNORE: 'ignore',\n\tBLOCK: 'block',\n\tMUTE: 'mute',\n\tSET_AS_OWNER: 'setAsOwner',\n\tSET_AS_LEADER: 'setAsLeader',\n\tSET_AS_MODERATOR: 'setAsModerator',\n\tLEAVE: 'leave',\n\tREMOVE_USER: 'removeUser',\n\tJOIN: 'join',\n\tINVITE: 'invite',\n} as const;\n\nexport const UiTextContext = {\n\tHIDE_WARNING: 'hideWarning',\n\tLEAVE_WARNING: 'leaveWarning',\n} as const;\n\nexport interface IRoomTypeConfig {\n\tidentifier: string;\n\troute?: IRoomTypeRouteConfig<RouteName>;\n}\n\nexport interface IRoomTypeClientConfig extends IRoomTypeConfig {\n\tlabel?: string;\n}\n\nexport interface IRoomTypeClientDirectives {\n\tconfig: IRoomTypeClientConfig;\n\n\tallowRoomSettingChange: (room: Partial<IRoom>, setting: ValueOf<typeof RoomSettingsEnum>) => boolean;\n\tallowMemberAction: (\n\t\troom: Partial<IRoom>,\n\t\taction: ValueOf<typeof RoomMemberActions>,\n\t\tuserId: IUser['_id'],\n\t\tuserSubscription?: ISubscription,\n\t) => boolean;\n\troomName: (room: AtLeast<IRoom, '_id' | 'name' | 'fname' | 'prid'>) => string | undefined;\n\tisGroupChat: (room: Partial<IRoom>) => boolean;\n\tgetUiText: (context: ValueOf<typeof UiTextContext>) => string;\n\tcondition: () => boolean;\n\tgetAvatarPath: (\n\t\troom: AtLeast<IRoom, '_id' | 'name' | 'fname' | 'prid' | 'avatarETag' | 'uids' | 'usernames'> & { username?: IRoom['_id'] },\n\t) => string;\n\tgetIcon?: (room: Partial<IRoom>) => IconName;\n\textractOpenRoomParams?: (routeParams: Record<string, string | null | undefined>) => { type: RoomType; reference: string };\n\tfindRoom: (identifier: string) => IRoom | undefined;\n\tshowJoinLink: (roomId: string) => boolean;\n\tisLivechatRoom: () => boolean;\n\tcanSendMessage: (rid: string) => boolean;\n\treadOnly?: (rid: string, user: AtLeast<IUser, 'username'>) => boolean;\n}\n\nexport interface IRoomTypeServerDirectives {\n\tconfig: IRoomTypeConfig;\n\n\tallowRoomSettingChange: (room: IRoom, setting: ValueOf<typeof RoomSettingsEnum>) => boolean;\n\tallowMemberAction: (room: IRoom, action: ValueOf<typeof RoomMemberActions>, userId?: IUser['_id']) => Promise<boolean>;\n\troomName: (room: IRoom, userId?: string) => Promise<string | undefined>;\n\tisGroupChat: (room: IRoom) => boolean;\n\tcanBeDeleted: (hasPermission: (permissionId: string, rid?: string) => Promise<boolean> | boolean, room: IRoom) => Promise<boolean>;\n\tpreventRenaming: () => boolean;\n\tgetDiscussionType: (room?: AtLeast<IRoom, 'teamId'>) => Promise<RoomType>;\n\tcanAccessUploadedFile: (params: { rc_uid: string; rc_rid: string; rc_token: string }) => Promise<boolean>;\n\tgetNotificationDetails: (\n\t\troom: IRoom,\n\t\tsender: AtLeast<IUser, '_id' | 'name' | 'username'>,\n\t\tnotificationMessage: string,\n\t\tuserId: string,\n\t) => Promise<{ title: string | undefined; text: string; name: string | undefined }>;\n\tgetMsgSender: (senderId: IUser['_id']) => Promise<IUser | null>;\n\tincludeInRoomSearch: () => boolean;\n\tgetReadReceiptsExtraData: (message: IMessage) => Partial<ReadReceipt>;\n\tincludeInDashboard: () => boolean;\n\troomFind?: (rid: string) => Promise<IRoom | undefined> | Promise<IOmnichannelRoom | null> | IRoom | undefined;\n}\n",null],"names":["module","export","RoomSettingsEnum","RoomMemberActions","UiTextContext","TYPE","NAME","TOPIC","ANNOUNCEMENT","DESCRIPTION","READ_ONLY","REACT_WHEN_READ_ONLY","ARCHIVE_OR_UNARCHIVE","JOIN_CODE","BROADCAST","SYSTEM_MESSAGES","E2E","ARCHIVE","IGNORE","BLOCK","MUTE","SET_AS_OWNER","SET_AS_LEADER","SET_AS_MODERATOR","LEAVE","REMOVE_USER","JOIN","INVITE","HIDE_WARNING","LEAVE_WARNING"],"mappings":"uBAsBAA,EAAOC,MAAM,CAAA,CAAAC,iBAAmB,WAAA,OAAAA,CAAA,EAAAC,kBAAAA,WAAA,OAAAA,CAAA,EAAAC,cAAAA,WAAA,OAAAA,CAAA,CAAA,GAAzB,IAAMF,EAAmB,CAC/BG,KAAM,OACNC,KAAM,WACNC,MAAO,YACPC,aAAc,mBACdC,YAAa,kBACbC,UAAW,WACXC,qBAAsB,oBACtBC,qBAAsB,qBACtBC,UAAW,WACXC,UAAW,YACXC,gBAAiB,iBACjBC,IAAK,aAGOb,EAAoB,CAChCc,QAAS,UACTC,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNC,aAAc,aACdC,cAAe,cACfC,iBAAkB,iBAClBC,MAAO,QACPC,YAAa,aACbC,KAAM,OACNC,OAAQ,UAGIvB,EAAgB,CAC5BwB,aAAc,cACdC,cAAe"}