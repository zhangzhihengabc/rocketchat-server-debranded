function module(t,e,n){"use strict";let r=t("path"),a=t("./scan"),s=t("./parse"),o=t("./utils"),i=t("./constants"),u=t=>t&&"object"==typeof t&&!Array.isArray(t),p=(t,e,n=!1)=>{if(Array.isArray(t)){let r=t.map(t=>p(t,e,n));return t=>{for(let e of r){let n=e(t);if(n)return n}return!1}}let r=u(t)&&t.tokens&&t.input;if(""===t||"string"!=typeof t&&!r)throw TypeError("Expected pattern to be a non-empty string");let a=e||{},s=o.isWindows(e),i=r?p.compileRe(t,e):p.makeRe(t,e,!1,!0),c=i.state;delete i.state;let l=()=>!1;if(a.ignore){let t={...e,ignore:null,onMatch:null,onResult:null};l=p(a.ignore,t,n)}let f=(n,r=!1)=>{let{isMatch:o,match:u,output:f}=p.test(n,i,e,{glob:t,posix:s}),h={glob:t,state:c,regex:i,posix:s,input:n,output:f,match:u,isMatch:o};return("function"==typeof a.onResult&&a.onResult(h),!1===o)?(h.isMatch=!1,!!r&&h):l(n)?("function"==typeof a.onIgnore&&a.onIgnore(h),h.isMatch=!1,!!r&&h):("function"==typeof a.onMatch&&a.onMatch(h),!r||h)};return n&&(f.state=c),f};p.test=(t,e,n,{glob:r,posix:a}={})=>{if("string"!=typeof t)throw TypeError("Expected input to be a string");if(""===t)return{isMatch:!1,output:""};let s=n||{},i=s.format||(a?o.toPosixSlashes:null),u=t===r,c=u&&i?i(t):t;return!1===u&&(u=(c=i?i(t):t)===r),(!1===u||!0===s.capture)&&(u=!0===s.matchBase||!0===s.basename?p.matchBase(t,e,n,a):e.exec(c)),{isMatch:!!u,match:u,output:c}},p.matchBase=(t,e,n,a=o.isWindows(n))=>{let s=e instanceof RegExp?e:p.makeRe(e,n);return s.test(r.basename(t))},p.isMatch=(t,e,n)=>p(e,n)(t),p.parse=(t,e)=>Array.isArray(t)?t.map(t=>p.parse(t,e)):s(t,{...e,fastpaths:!1}),p.scan=(t,e)=>a(t,e),p.compileRe=(t,e,n=!1,r=!1)=>{if(!0===n)return t.output;let a=e||{},s=a.contains?"":"^",o=a.contains?"":"$",i=`${s}(?:${t.output})${o}`;t&&!0===t.negated&&(i=`^(?!${i}).*$`);let u=p.toRegex(i,e);return!0===r&&(u.state=t),u},p.makeRe=(t,e={},n=!1,r=!1)=>{if(!t||"string"!=typeof t)throw TypeError("Expected a non-empty string");let a={negated:!1,fastpaths:!0};return!1!==e.fastpaths&&("."===t[0]||"*"===t[0])&&(a.output=s.fastpaths(t,e)),a.output||(a=s(t,e)),p.compileRe(a,e,n,r)},p.toRegex=(t,e)=>{try{let n=e||{};return new RegExp(t,n.flags||(n.nocase?"i":""))}catch(t){if(e&&!0===e.debug)throw t;return/$^/}},p.constants=i,n.exports=p}
//# sourceMappingURL=/dynamic/node_modules/picomatch/lib/e91acfb708773218e5d23477a965419baeb27db8.map
