)]}'
{"version":3,"sources":["meteor://ðŸ’»app/node_modules/@rocket.chat/ui-theming/src/hooks/useThemeMode.ts","meteor://ðŸ’»app/<anon>"],"sourcesContent":["import { useDarkMode } from '@rocket.chat/fuselage-hooks';\nimport { useEndpoint, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ThemePreference as ThemeMode, Themes } from '@rocket.chat/ui-theming/src/types/themes';\nimport { useCallback, useState } from 'react';\n\n/**\n * Returns the current option set by the user, the theme mode resolved given the user configuration and OS (if applies) and a function to set it.\n * @param defaultThemeMode The default theme mode to use if the user has not set any.\n * @returns [currentThemeMode, setThemeMode, resolvedThemeMode]\n */\n\nexport const useThemeMode = (): [ThemeMode, (value: ThemeMode) => () => void, Themes] => {\n\tconst themeMode = useUserPreference<ThemeMode>('themeAppearence') || 'auto';\n\n\tconst saveUserPreferences = useEndpoint('POST', '/v1/users.setPreferences');\n\n\tconst [updaters] = useState(\n\t\t(): Record<ThemeMode, () => void> => ({\n\t\t\t'light': () => saveUserPreferences({ data: { themeAppearence: 'light' } }),\n\t\t\t'dark': () => saveUserPreferences({ data: { themeAppearence: 'dark' } }),\n\t\t\t'auto': () => saveUserPreferences({ data: { themeAppearence: 'auto' } }),\n\t\t\t'high-contrast': () => saveUserPreferences({ data: { themeAppearence: 'high-contrast' } }),\n\t\t}),\n\t);\n\n\tconst setTheme = useCallback((value: ThemeMode): (() => void) => updaters[value], [updaters]);\n\n\tconst useTheme = () => {\n\t\tif (useDarkMode(themeMode === 'auto' ? undefined : themeMode === 'dark')) {\n\t\t\treturn 'dark';\n\t\t}\n\t\tif (themeMode === 'high-contrast') {\n\t\t\treturn 'high-contrast';\n\t\t}\n\t\treturn 'light';\n\t};\n\treturn [themeMode, setTheme, useTheme()];\n};\n",null],"names":["module","link","default","_slicedToArray","export","useThemeMode","useDarkMode","useEndpoint","useUserPreference","useCallback","useState","themeMode","saveUserPreferences","updaters","_useState2","data","themeAppearence","value","undefined"],"mappings":"uBAASA,EAAaC,IAAM,CAAA,uCAA8B,CAAAC,QAAAA,SAAAA,CAAAA,EAAAC,EAAAA,CAAA,CAAA,EAAA,GAA1DH,EAAOI,MAAE,CAAA,CAAAC,aAAmB,WAAA,OAAAA,CAA8B,CAAA,GAAAL,EAAAA,IAAAA,CAAAA,8BAAAA,CAAAM,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAN,EAAAA,IAAAA,CAAAA,2BAAAA,CAAAO,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,kBAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAAAR,EAAAA,IAAAA,CAAAA,QAAAA,CAAAS,YAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,EAAAC,SAAAA,SAAAA,CAAAA,EAAAA,EAAAA,CAAA,CAAA,EAAA,GAWnD,IAXPP,EAA0DG,EAAAC,EAAAC,EAAAC,EAAAC,EAW7CL,EAAe,WAC3B,IAAMM,EAAYH,EAA6B,oBAAsB,OAE/DI,EAAsBL,EAAY,OAAQ,4BAEzCM,EAAQC,AAOdX,EAPkBO,EAClB,WAAA,MAAsC,CACrC,MAAS,WAAA,OAAME,EAAoB,CAAEG,KAAM,CAAEC,gBAAiB,OAAO,CAAE,EAAG,EAC1E,KAAQ,WAAA,OAAMJ,EAAoB,CAAEG,KAAM,CAAEC,gBAAiB,MAAM,CAAE,EAAG,EACxE,KAAQ,WAAA,OAAMJ,EAAoB,CAAEG,KAAM,CAAEC,gBAAiB,MAAM,CAAE,EAAG,EACxE,gBAAiB,WAAA,OAAMJ,EAAoB,CAAEG,KAAM,CAAEC,gBAAiB,eAAe,CAAE,EAAG,EAC1F,GACD,EAPc,CAAA,EAAA,CAoBf,MAAO,CAACL,EAXSF,EAAY,SAACQ,CAAgB,EAAA,OAAmBJ,CAAQ,CAACI,EAAM,EAAE,CAACJ,EAAS,EAG3F,AAAIP,EAAYK,AAAc,SAAdA,EAAuBO,KAAAA,EAAYP,AAAc,SAAdA,GAC3C,OAEJA,AAAc,kBAAdA,EACI,gBAED,QAEgC,AACzC"}