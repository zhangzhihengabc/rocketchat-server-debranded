function module(t,e,s){"use strict";var i=t("../utils"),n=i.assert,r=i.parseBytes,u=i.cachedProperty;function c(t,e){this.eddsa=t,this._secret=r(e.secret),t.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=r(e.pub)}c.fromPublic=function t(t,e){return e instanceof c?e:new c(t,{pub:e})},c.fromSecret=function t(t,e){return e instanceof c?e:new c(t,{secret:e})},c.prototype.secret=function t(){return this._secret},u(c,"pubBytes",function t(){return this.eddsa.encodePoint(this.pub())}),u(c,"pub",function t(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),u(c,"privBytes",function t(){var t=this.eddsa,e=this.hash(),s=t.encodingLength-1,i=e.slice(0,t.encodingLength);return i[0]&=248,i[s]&=127,i[s]|=64,i}),u(c,"priv",function t(){return this.eddsa.decodeInt(this.privBytes())}),u(c,"hash",function t(){return this.eddsa.hash().update(this.secret()).digest()}),u(c,"messagePrefix",function t(){return this.hash().slice(this.eddsa.encodingLength)}),c.prototype.sign=function t(t){return n(this._secret,"KeyPair can only verify"),this.eddsa.sign(t,this)},c.prototype.verify=function t(t,e){return this.eddsa.verify(t,e,this)},c.prototype.getSecret=function t(t){return n(this._secret,"KeyPair is public only"),i.encode(this.secret(),t)},c.prototype.getPublic=function t(t){return i.encode(this.pubBytes(),t)},s.exports=c}
//# sourceMappingURL=/dynamic/node_modules/elliptic/lib/elliptic/eddsa/3346bd8383cca09846721c95eaada8d2ffec9752.map
